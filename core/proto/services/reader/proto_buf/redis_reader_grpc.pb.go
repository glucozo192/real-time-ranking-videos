// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package readerService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReaderRedisServiceClient is the client API for ReaderRedisService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReaderRedisServiceClient interface {
	RemoveCachingByKey(ctx context.Context, in *RemoveCachingByKeyReq, opts ...grpc.CallOption) (*RemoveCachingByKeyRes, error)
}

type readerRedisServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReaderRedisServiceClient(cc grpc.ClientConnInterface) ReaderRedisServiceClient {
	return &readerRedisServiceClient{cc}
}

func (c *readerRedisServiceClient) RemoveCachingByKey(ctx context.Context, in *RemoveCachingByKeyReq, opts ...grpc.CallOption) (*RemoveCachingByKeyRes, error) {
	out := new(RemoveCachingByKeyRes)
	err := c.cc.Invoke(ctx, "/readerService.readerRedisService/RemoveCachingByKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReaderRedisServiceServer is the server API for ReaderRedisService service.
// All implementations should embed UnimplementedReaderRedisServiceServer
// for forward compatibility
type ReaderRedisServiceServer interface {
	RemoveCachingByKey(context.Context, *RemoveCachingByKeyReq) (*RemoveCachingByKeyRes, error)
}

// UnimplementedReaderRedisServiceServer should be embedded to have forward compatible implementations.
type UnimplementedReaderRedisServiceServer struct {
}

func (UnimplementedReaderRedisServiceServer) RemoveCachingByKey(context.Context, *RemoveCachingByKeyReq) (*RemoveCachingByKeyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCachingByKey not implemented")
}

// UnsafeReaderRedisServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReaderRedisServiceServer will
// result in compilation errors.
type UnsafeReaderRedisServiceServer interface {
	mustEmbedUnimplementedReaderRedisServiceServer()
}

func RegisterReaderRedisServiceServer(s grpc.ServiceRegistrar, srv ReaderRedisServiceServer) {
	s.RegisterService(&ReaderRedisService_ServiceDesc, srv)
}

func _ReaderRedisService_RemoveCachingByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCachingByKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReaderRedisServiceServer).RemoveCachingByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/readerService.readerRedisService/RemoveCachingByKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReaderRedisServiceServer).RemoveCachingByKey(ctx, req.(*RemoveCachingByKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ReaderRedisService_ServiceDesc is the grpc.ServiceDesc for ReaderRedisService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReaderRedisService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "readerService.readerRedisService",
	HandlerType: (*ReaderRedisServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RemoveCachingByKey",
			Handler:    _ReaderRedisService_RemoveCachingByKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "redis_reader.proto",
}
