// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/glu/video-real-time-ranking/ent/comments"
	"github.com/glu/video-real-time-ranking/ent/objects"
	"github.com/glu/video-real-time-ranking/ent/predicate"
	"github.com/glu/video-real-time-ranking/ent/reactions"
	"github.com/glu/video-real-time-ranking/ent/videos"
	"github.com/glu/video-real-time-ranking/ent/viewers"
)

// VideosQuery is the builder for querying Videos entities.
type VideosQuery struct {
	config
	ctx              *QueryContext
	order            []videos.OrderOption
	inters           []Interceptor
	predicates       []predicate.Videos
	withTblComments  *CommentsQuery
	withTblReactions *ReactionsQuery
	withTblViewers   *ViewersQuery
	withTblObjects   *ObjectsQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the VideosQuery builder.
func (vq *VideosQuery) Where(ps ...predicate.Videos) *VideosQuery {
	vq.predicates = append(vq.predicates, ps...)
	return vq
}

// Limit the number of records to be returned by this query.
func (vq *VideosQuery) Limit(limit int) *VideosQuery {
	vq.ctx.Limit = &limit
	return vq
}

// Offset to start from.
func (vq *VideosQuery) Offset(offset int) *VideosQuery {
	vq.ctx.Offset = &offset
	return vq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (vq *VideosQuery) Unique(unique bool) *VideosQuery {
	vq.ctx.Unique = &unique
	return vq
}

// Order specifies how the records should be ordered.
func (vq *VideosQuery) Order(o ...videos.OrderOption) *VideosQuery {
	vq.order = append(vq.order, o...)
	return vq
}

// QueryTblComments chains the current query on the "tbl_comments" edge.
func (vq *VideosQuery) QueryTblComments() *CommentsQuery {
	query := (&CommentsClient{config: vq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(videos.Table, videos.FieldID, selector),
			sqlgraph.To(comments.Table, comments.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, videos.TblCommentsTable, videos.TblCommentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(vq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTblReactions chains the current query on the "tbl_reactions" edge.
func (vq *VideosQuery) QueryTblReactions() *ReactionsQuery {
	query := (&ReactionsClient{config: vq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(videos.Table, videos.FieldID, selector),
			sqlgraph.To(reactions.Table, reactions.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, videos.TblReactionsTable, videos.TblReactionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(vq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTblViewers chains the current query on the "tbl_viewers" edge.
func (vq *VideosQuery) QueryTblViewers() *ViewersQuery {
	query := (&ViewersClient{config: vq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(videos.Table, videos.FieldID, selector),
			sqlgraph.To(viewers.Table, viewers.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, videos.TblViewersTable, videos.TblViewersColumn),
		)
		fromU = sqlgraph.SetNeighbors(vq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTblObjects chains the current query on the "tbl_objects" edge.
func (vq *VideosQuery) QueryTblObjects() *ObjectsQuery {
	query := (&ObjectsClient{config: vq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := vq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := vq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(videos.Table, videos.FieldID, selector),
			sqlgraph.To(objects.Table, objects.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, videos.TblObjectsTable, videos.TblObjectsColumn),
		)
		fromU = sqlgraph.SetNeighbors(vq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Videos entity from the query.
// Returns a *NotFoundError when no Videos was found.
func (vq *VideosQuery) First(ctx context.Context) (*Videos, error) {
	nodes, err := vq.Limit(1).All(setContextOp(ctx, vq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{videos.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (vq *VideosQuery) FirstX(ctx context.Context) *Videos {
	node, err := vq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Videos ID from the query.
// Returns a *NotFoundError when no Videos ID was found.
func (vq *VideosQuery) FirstID(ctx context.Context) (id uint, err error) {
	var ids []uint
	if ids, err = vq.Limit(1).IDs(setContextOp(ctx, vq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{videos.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (vq *VideosQuery) FirstIDX(ctx context.Context) uint {
	id, err := vq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Videos entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Videos entity is found.
// Returns a *NotFoundError when no Videos entities are found.
func (vq *VideosQuery) Only(ctx context.Context) (*Videos, error) {
	nodes, err := vq.Limit(2).All(setContextOp(ctx, vq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{videos.Label}
	default:
		return nil, &NotSingularError{videos.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (vq *VideosQuery) OnlyX(ctx context.Context) *Videos {
	node, err := vq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Videos ID in the query.
// Returns a *NotSingularError when more than one Videos ID is found.
// Returns a *NotFoundError when no entities are found.
func (vq *VideosQuery) OnlyID(ctx context.Context) (id uint, err error) {
	var ids []uint
	if ids, err = vq.Limit(2).IDs(setContextOp(ctx, vq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{videos.Label}
	default:
		err = &NotSingularError{videos.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (vq *VideosQuery) OnlyIDX(ctx context.Context) uint {
	id, err := vq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of VideosSlice.
func (vq *VideosQuery) All(ctx context.Context) ([]*Videos, error) {
	ctx = setContextOp(ctx, vq.ctx, "All")
	if err := vq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Videos, *VideosQuery]()
	return withInterceptors[[]*Videos](ctx, vq, qr, vq.inters)
}

// AllX is like All, but panics if an error occurs.
func (vq *VideosQuery) AllX(ctx context.Context) []*Videos {
	nodes, err := vq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Videos IDs.
func (vq *VideosQuery) IDs(ctx context.Context) (ids []uint, err error) {
	if vq.ctx.Unique == nil && vq.path != nil {
		vq.Unique(true)
	}
	ctx = setContextOp(ctx, vq.ctx, "IDs")
	if err = vq.Select(videos.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (vq *VideosQuery) IDsX(ctx context.Context) []uint {
	ids, err := vq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (vq *VideosQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, vq.ctx, "Count")
	if err := vq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, vq, querierCount[*VideosQuery](), vq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (vq *VideosQuery) CountX(ctx context.Context) int {
	count, err := vq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (vq *VideosQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, vq.ctx, "Exist")
	switch _, err := vq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (vq *VideosQuery) ExistX(ctx context.Context) bool {
	exist, err := vq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the VideosQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (vq *VideosQuery) Clone() *VideosQuery {
	if vq == nil {
		return nil
	}
	return &VideosQuery{
		config:           vq.config,
		ctx:              vq.ctx.Clone(),
		order:            append([]videos.OrderOption{}, vq.order...),
		inters:           append([]Interceptor{}, vq.inters...),
		predicates:       append([]predicate.Videos{}, vq.predicates...),
		withTblComments:  vq.withTblComments.Clone(),
		withTblReactions: vq.withTblReactions.Clone(),
		withTblViewers:   vq.withTblViewers.Clone(),
		withTblObjects:   vq.withTblObjects.Clone(),
		// clone intermediate query.
		sql:  vq.sql.Clone(),
		path: vq.path,
	}
}

// WithTblComments tells the query-builder to eager-load the nodes that are connected to
// the "tbl_comments" edge. The optional arguments are used to configure the query builder of the edge.
func (vq *VideosQuery) WithTblComments(opts ...func(*CommentsQuery)) *VideosQuery {
	query := (&CommentsClient{config: vq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	vq.withTblComments = query
	return vq
}

// WithTblReactions tells the query-builder to eager-load the nodes that are connected to
// the "tbl_reactions" edge. The optional arguments are used to configure the query builder of the edge.
func (vq *VideosQuery) WithTblReactions(opts ...func(*ReactionsQuery)) *VideosQuery {
	query := (&ReactionsClient{config: vq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	vq.withTblReactions = query
	return vq
}

// WithTblViewers tells the query-builder to eager-load the nodes that are connected to
// the "tbl_viewers" edge. The optional arguments are used to configure the query builder of the edge.
func (vq *VideosQuery) WithTblViewers(opts ...func(*ViewersQuery)) *VideosQuery {
	query := (&ViewersClient{config: vq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	vq.withTblViewers = query
	return vq
}

// WithTblObjects tells the query-builder to eager-load the nodes that are connected to
// the "tbl_objects" edge. The optional arguments are used to configure the query builder of the edge.
func (vq *VideosQuery) WithTblObjects(opts ...func(*ObjectsQuery)) *VideosQuery {
	query := (&ObjectsClient{config: vq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	vq.withTblObjects = query
	return vq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name" bson:"name"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Videos.Query().
//		GroupBy(videos.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (vq *VideosQuery) GroupBy(field string, fields ...string) *VideosGroupBy {
	vq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &VideosGroupBy{build: vq}
	grbuild.flds = &vq.ctx.Fields
	grbuild.label = videos.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name" bson:"name"`
//	}
//
//	client.Videos.Query().
//		Select(videos.FieldName).
//		Scan(ctx, &v)
func (vq *VideosQuery) Select(fields ...string) *VideosSelect {
	vq.ctx.Fields = append(vq.ctx.Fields, fields...)
	sbuild := &VideosSelect{VideosQuery: vq}
	sbuild.label = videos.Label
	sbuild.flds, sbuild.scan = &vq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a VideosSelect configured with the given aggregations.
func (vq *VideosQuery) Aggregate(fns ...AggregateFunc) *VideosSelect {
	return vq.Select().Aggregate(fns...)
}

func (vq *VideosQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range vq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, vq); err != nil {
				return err
			}
		}
	}
	for _, f := range vq.ctx.Fields {
		if !videos.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if vq.path != nil {
		prev, err := vq.path(ctx)
		if err != nil {
			return err
		}
		vq.sql = prev
	}
	return nil
}

func (vq *VideosQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Videos, error) {
	var (
		nodes       = []*Videos{}
		_spec       = vq.querySpec()
		loadedTypes = [4]bool{
			vq.withTblComments != nil,
			vq.withTblReactions != nil,
			vq.withTblViewers != nil,
			vq.withTblObjects != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Videos).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Videos{config: vq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, vq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := vq.withTblComments; query != nil {
		if err := vq.loadTblComments(ctx, query, nodes,
			func(n *Videos) { n.Edges.TblComments = []*Comments{} },
			func(n *Videos, e *Comments) { n.Edges.TblComments = append(n.Edges.TblComments, e) }); err != nil {
			return nil, err
		}
	}
	if query := vq.withTblReactions; query != nil {
		if err := vq.loadTblReactions(ctx, query, nodes,
			func(n *Videos) { n.Edges.TblReactions = []*Reactions{} },
			func(n *Videos, e *Reactions) { n.Edges.TblReactions = append(n.Edges.TblReactions, e) }); err != nil {
			return nil, err
		}
	}
	if query := vq.withTblViewers; query != nil {
		if err := vq.loadTblViewers(ctx, query, nodes,
			func(n *Videos) { n.Edges.TblViewers = []*Viewers{} },
			func(n *Videos, e *Viewers) { n.Edges.TblViewers = append(n.Edges.TblViewers, e) }); err != nil {
			return nil, err
		}
	}
	if query := vq.withTblObjects; query != nil {
		if err := vq.loadTblObjects(ctx, query, nodes,
			func(n *Videos) { n.Edges.TblObjects = []*Objects{} },
			func(n *Videos, e *Objects) { n.Edges.TblObjects = append(n.Edges.TblObjects, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (vq *VideosQuery) loadTblComments(ctx context.Context, query *CommentsQuery, nodes []*Videos, init func(*Videos), assign func(*Videos, *Comments)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint]*Videos)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(comments.FieldVideoID)
	}
	query.Where(predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(videos.TblCommentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.VideoID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "video_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (vq *VideosQuery) loadTblReactions(ctx context.Context, query *ReactionsQuery, nodes []*Videos, init func(*Videos), assign func(*Videos, *Reactions)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint]*Videos)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(reactions.FieldVideoID)
	}
	query.Where(predicate.Reactions(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(videos.TblReactionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.VideoID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "video_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (vq *VideosQuery) loadTblViewers(ctx context.Context, query *ViewersQuery, nodes []*Videos, init func(*Videos), assign func(*Videos, *Viewers)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint]*Videos)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(viewers.FieldVideoID)
	}
	query.Where(predicate.Viewers(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(videos.TblViewersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.VideoID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "video_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (vq *VideosQuery) loadTblObjects(ctx context.Context, query *ObjectsQuery, nodes []*Videos, init func(*Videos), assign func(*Videos, *Objects)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint]*Videos)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(objects.FieldVideoID)
	}
	query.Where(predicate.Objects(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(videos.TblObjectsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.VideoID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "video_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (vq *VideosQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := vq.querySpec()
	_spec.Node.Columns = vq.ctx.Fields
	if len(vq.ctx.Fields) > 0 {
		_spec.Unique = vq.ctx.Unique != nil && *vq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, vq.driver, _spec)
}

func (vq *VideosQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(videos.Table, videos.Columns, sqlgraph.NewFieldSpec(videos.FieldID, field.TypeUint))
	_spec.From = vq.sql
	if unique := vq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if vq.path != nil {
		_spec.Unique = true
	}
	if fields := vq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, videos.FieldID)
		for i := range fields {
			if fields[i] != videos.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := vq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := vq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := vq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := vq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (vq *VideosQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(vq.driver.Dialect())
	t1 := builder.Table(videos.Table)
	columns := vq.ctx.Fields
	if len(columns) == 0 {
		columns = videos.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if vq.sql != nil {
		selector = vq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if vq.ctx.Unique != nil && *vq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range vq.predicates {
		p(selector)
	}
	for _, p := range vq.order {
		p(selector)
	}
	if offset := vq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := vq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// VideosGroupBy is the group-by builder for Videos entities.
type VideosGroupBy struct {
	selector
	build *VideosQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (vgb *VideosGroupBy) Aggregate(fns ...AggregateFunc) *VideosGroupBy {
	vgb.fns = append(vgb.fns, fns...)
	return vgb
}

// Scan applies the selector query and scans the result into the given value.
func (vgb *VideosGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, vgb.build.ctx, "GroupBy")
	if err := vgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*VideosQuery, *VideosGroupBy](ctx, vgb.build, vgb, vgb.build.inters, v)
}

func (vgb *VideosGroupBy) sqlScan(ctx context.Context, root *VideosQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(vgb.fns))
	for _, fn := range vgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*vgb.flds)+len(vgb.fns))
		for _, f := range *vgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*vgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// VideosSelect is the builder for selecting fields of Videos entities.
type VideosSelect struct {
	*VideosQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (vs *VideosSelect) Aggregate(fns ...AggregateFunc) *VideosSelect {
	vs.fns = append(vs.fns, fns...)
	return vs
}

// Scan applies the selector query and scans the result into the given value.
func (vs *VideosSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, vs.ctx, "Select")
	if err := vs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*VideosQuery, *VideosSelect](ctx, vs.VideosQuery, vs, vs.inters, v)
}

func (vs *VideosSelect) sqlScan(ctx context.Context, root *VideosQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(vs.fns))
	for _, fn := range vs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*vs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := vs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
