// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/glu/video-real-time-ranking/ent/objects"
	"github.com/glu/video-real-time-ranking/ent/videos"
)

// Objects is the model entity for the Objects schema.
type Objects struct {
	config `bson:"-" json:"-"`
	// ID of the ent.
	ID uint `json:"id" bson:"_id,omitempty"`
	// VideoID holds the value of the "video_id" field.
	VideoID uint `json:"video_id" bson:"video_id"`
	// Description holds the value of the "description" field.
	Description string `json:"description" bson:"description"`
	// CoordinateX holds the value of the "coordinate_x" field.
	CoordinateX int `json:"coordinate_x" bson:"coordinate_x"`
	// CoordinateY holds the value of the "coordinate_y" field.
	CoordinateY int `json:"coordinate_y" bson:"coordinate_y"`
	// Length holds the value of the "length" field.
	Length int `json:"length" bson:"length"`
	// Width holds the value of the "width" field.
	Width int `json:"width" bson:"width"`
	// Order holds the value of the "order" field.
	Order int `json:"order" bson:"order"`
	// TimeStart holds the value of the "time_start" field.
	TimeStart float64 `json:"time_start" bson:"time_start"`
	// TimeEnd holds the value of the "time_end" field.
	TimeEnd float64 `json:"time_end" bson:"time_end"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at" bson:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at" bson:"deleted_at"`
	// TouchVector holds the value of the "touch_vector" field.
	TouchVector string `json:"touch_vector" bson:"touch_vector"`
	// MarkerName holds the value of the "marker_name" field.
	MarkerName string `json:"marker_name" bson:"marker_name"`
	// TimePoint holds the value of the "time_point" field.
	TimePoint float64 `json:"time_point" bson:"time_point"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ObjectsQuery when eager-loading is set.
	Edges        ObjectsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ObjectsEdges holds the relations/edges for other nodes in the graph.
type ObjectsEdges struct {
	// TblVideos holds the value of the tbl_videos edge.
	TblVideos *Videos `json:"tbl_videos,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TblVideosOrErr returns the TblVideos value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ObjectsEdges) TblVideosOrErr() (*Videos, error) {
	if e.TblVideos != nil {
		return e.TblVideos, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: videos.Label}
	}
	return nil, &NotLoadedError{edge: "tbl_videos"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Objects) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case objects.FieldTimeStart, objects.FieldTimeEnd, objects.FieldTimePoint:
			values[i] = new(sql.NullFloat64)
		case objects.FieldID, objects.FieldVideoID, objects.FieldCoordinateX, objects.FieldCoordinateY, objects.FieldLength, objects.FieldWidth, objects.FieldOrder:
			values[i] = new(sql.NullInt64)
		case objects.FieldDescription, objects.FieldTouchVector, objects.FieldMarkerName:
			values[i] = new(sql.NullString)
		case objects.FieldCreatedAt, objects.FieldUpdatedAt, objects.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Objects fields.
func (o *Objects) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case objects.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = uint(value.Int64)
		case objects.FieldVideoID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field video_id", values[i])
			} else if value.Valid {
				o.VideoID = uint(value.Int64)
			}
		case objects.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				o.Description = value.String
			}
		case objects.FieldCoordinateX:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field coordinate_x", values[i])
			} else if value.Valid {
				o.CoordinateX = int(value.Int64)
			}
		case objects.FieldCoordinateY:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field coordinate_y", values[i])
			} else if value.Valid {
				o.CoordinateY = int(value.Int64)
			}
		case objects.FieldLength:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field length", values[i])
			} else if value.Valid {
				o.Length = int(value.Int64)
			}
		case objects.FieldWidth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field width", values[i])
			} else if value.Valid {
				o.Width = int(value.Int64)
			}
		case objects.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				o.Order = int(value.Int64)
			}
		case objects.FieldTimeStart:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field time_start", values[i])
			} else if value.Valid {
				o.TimeStart = value.Float64
			}
		case objects.FieldTimeEnd:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field time_end", values[i])
			} else if value.Valid {
				o.TimeEnd = value.Float64
			}
		case objects.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				o.CreatedAt = value.Time
			}
		case objects.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				o.UpdatedAt = value.Time
			}
		case objects.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				o.DeletedAt = new(time.Time)
				*o.DeletedAt = value.Time
			}
		case objects.FieldTouchVector:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field touch_vector", values[i])
			} else if value.Valid {
				o.TouchVector = value.String
			}
		case objects.FieldMarkerName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field marker_name", values[i])
			} else if value.Valid {
				o.MarkerName = value.String
			}
		case objects.FieldTimePoint:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field time_point", values[i])
			} else if value.Valid {
				o.TimePoint = value.Float64
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Objects.
// This includes values selected through modifiers, order, etc.
func (o *Objects) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// QueryTblVideos queries the "tbl_videos" edge of the Objects entity.
func (o *Objects) QueryTblVideos() *VideosQuery {
	return NewObjectsClient(o.config).QueryTblVideos(o)
}

// Update returns a builder for updating this Objects.
// Note that you need to call Objects.Unwrap() before calling this method if this Objects
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Objects) Update() *ObjectsUpdateOne {
	return NewObjectsClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Objects entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Objects) Unwrap() *Objects {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Objects is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Objects) String() string {
	var builder strings.Builder
	builder.WriteString("Objects(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("video_id=")
	builder.WriteString(fmt.Sprintf("%v", o.VideoID))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(o.Description)
	builder.WriteString(", ")
	builder.WriteString("coordinate_x=")
	builder.WriteString(fmt.Sprintf("%v", o.CoordinateX))
	builder.WriteString(", ")
	builder.WriteString("coordinate_y=")
	builder.WriteString(fmt.Sprintf("%v", o.CoordinateY))
	builder.WriteString(", ")
	builder.WriteString("length=")
	builder.WriteString(fmt.Sprintf("%v", o.Length))
	builder.WriteString(", ")
	builder.WriteString("width=")
	builder.WriteString(fmt.Sprintf("%v", o.Width))
	builder.WriteString(", ")
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", o.Order))
	builder.WriteString(", ")
	builder.WriteString("time_start=")
	builder.WriteString(fmt.Sprintf("%v", o.TimeStart))
	builder.WriteString(", ")
	builder.WriteString("time_end=")
	builder.WriteString(fmt.Sprintf("%v", o.TimeEnd))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(o.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(o.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := o.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("touch_vector=")
	builder.WriteString(o.TouchVector)
	builder.WriteString(", ")
	builder.WriteString("marker_name=")
	builder.WriteString(o.MarkerName)
	builder.WriteString(", ")
	builder.WriteString("time_point=")
	builder.WriteString(fmt.Sprintf("%v", o.TimePoint))
	builder.WriteByte(')')
	return builder.String()
}

// ObjectsSlice is a parsable slice of Objects.
type ObjectsSlice []*Objects
