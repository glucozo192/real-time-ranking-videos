// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/glu/video-real-time-ranking/ent/objects"
	"github.com/glu/video-real-time-ranking/ent/predicate"
	"github.com/glu/video-real-time-ranking/ent/videos"
)

// ObjectsUpdate is the builder for updating Objects entities.
type ObjectsUpdate struct {
	config
	hooks    []Hook
	mutation *ObjectsMutation
}

// Where appends a list predicates to the ObjectsUpdate builder.
func (ou *ObjectsUpdate) Where(ps ...predicate.Objects) *ObjectsUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetVideoID sets the "video_id" field.
func (ou *ObjectsUpdate) SetVideoID(u uint) *ObjectsUpdate {
	ou.mutation.SetVideoID(u)
	return ou
}

// SetNillableVideoID sets the "video_id" field if the given value is not nil.
func (ou *ObjectsUpdate) SetNillableVideoID(u *uint) *ObjectsUpdate {
	if u != nil {
		ou.SetVideoID(*u)
	}
	return ou
}

// SetDescription sets the "description" field.
func (ou *ObjectsUpdate) SetDescription(s string) *ObjectsUpdate {
	ou.mutation.SetDescription(s)
	return ou
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ou *ObjectsUpdate) SetNillableDescription(s *string) *ObjectsUpdate {
	if s != nil {
		ou.SetDescription(*s)
	}
	return ou
}

// ClearDescription clears the value of the "description" field.
func (ou *ObjectsUpdate) ClearDescription() *ObjectsUpdate {
	ou.mutation.ClearDescription()
	return ou
}

// SetCoordinateX sets the "coordinate_x" field.
func (ou *ObjectsUpdate) SetCoordinateX(i int) *ObjectsUpdate {
	ou.mutation.ResetCoordinateX()
	ou.mutation.SetCoordinateX(i)
	return ou
}

// SetNillableCoordinateX sets the "coordinate_x" field if the given value is not nil.
func (ou *ObjectsUpdate) SetNillableCoordinateX(i *int) *ObjectsUpdate {
	if i != nil {
		ou.SetCoordinateX(*i)
	}
	return ou
}

// AddCoordinateX adds i to the "coordinate_x" field.
func (ou *ObjectsUpdate) AddCoordinateX(i int) *ObjectsUpdate {
	ou.mutation.AddCoordinateX(i)
	return ou
}

// SetCoordinateY sets the "coordinate_y" field.
func (ou *ObjectsUpdate) SetCoordinateY(i int) *ObjectsUpdate {
	ou.mutation.ResetCoordinateY()
	ou.mutation.SetCoordinateY(i)
	return ou
}

// SetNillableCoordinateY sets the "coordinate_y" field if the given value is not nil.
func (ou *ObjectsUpdate) SetNillableCoordinateY(i *int) *ObjectsUpdate {
	if i != nil {
		ou.SetCoordinateY(*i)
	}
	return ou
}

// AddCoordinateY adds i to the "coordinate_y" field.
func (ou *ObjectsUpdate) AddCoordinateY(i int) *ObjectsUpdate {
	ou.mutation.AddCoordinateY(i)
	return ou
}

// SetLength sets the "length" field.
func (ou *ObjectsUpdate) SetLength(i int) *ObjectsUpdate {
	ou.mutation.ResetLength()
	ou.mutation.SetLength(i)
	return ou
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (ou *ObjectsUpdate) SetNillableLength(i *int) *ObjectsUpdate {
	if i != nil {
		ou.SetLength(*i)
	}
	return ou
}

// AddLength adds i to the "length" field.
func (ou *ObjectsUpdate) AddLength(i int) *ObjectsUpdate {
	ou.mutation.AddLength(i)
	return ou
}

// SetWidth sets the "width" field.
func (ou *ObjectsUpdate) SetWidth(i int) *ObjectsUpdate {
	ou.mutation.ResetWidth()
	ou.mutation.SetWidth(i)
	return ou
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (ou *ObjectsUpdate) SetNillableWidth(i *int) *ObjectsUpdate {
	if i != nil {
		ou.SetWidth(*i)
	}
	return ou
}

// AddWidth adds i to the "width" field.
func (ou *ObjectsUpdate) AddWidth(i int) *ObjectsUpdate {
	ou.mutation.AddWidth(i)
	return ou
}

// SetOrder sets the "order" field.
func (ou *ObjectsUpdate) SetOrder(i int) *ObjectsUpdate {
	ou.mutation.ResetOrder()
	ou.mutation.SetOrder(i)
	return ou
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (ou *ObjectsUpdate) SetNillableOrder(i *int) *ObjectsUpdate {
	if i != nil {
		ou.SetOrder(*i)
	}
	return ou
}

// AddOrder adds i to the "order" field.
func (ou *ObjectsUpdate) AddOrder(i int) *ObjectsUpdate {
	ou.mutation.AddOrder(i)
	return ou
}

// SetTimeStart sets the "time_start" field.
func (ou *ObjectsUpdate) SetTimeStart(f float64) *ObjectsUpdate {
	ou.mutation.ResetTimeStart()
	ou.mutation.SetTimeStart(f)
	return ou
}

// SetNillableTimeStart sets the "time_start" field if the given value is not nil.
func (ou *ObjectsUpdate) SetNillableTimeStart(f *float64) *ObjectsUpdate {
	if f != nil {
		ou.SetTimeStart(*f)
	}
	return ou
}

// AddTimeStart adds f to the "time_start" field.
func (ou *ObjectsUpdate) AddTimeStart(f float64) *ObjectsUpdate {
	ou.mutation.AddTimeStart(f)
	return ou
}

// SetTimeEnd sets the "time_end" field.
func (ou *ObjectsUpdate) SetTimeEnd(f float64) *ObjectsUpdate {
	ou.mutation.ResetTimeEnd()
	ou.mutation.SetTimeEnd(f)
	return ou
}

// SetNillableTimeEnd sets the "time_end" field if the given value is not nil.
func (ou *ObjectsUpdate) SetNillableTimeEnd(f *float64) *ObjectsUpdate {
	if f != nil {
		ou.SetTimeEnd(*f)
	}
	return ou
}

// AddTimeEnd adds f to the "time_end" field.
func (ou *ObjectsUpdate) AddTimeEnd(f float64) *ObjectsUpdate {
	ou.mutation.AddTimeEnd(f)
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *ObjectsUpdate) SetUpdatedAt(t time.Time) *ObjectsUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// SetDeletedAt sets the "deleted_at" field.
func (ou *ObjectsUpdate) SetDeletedAt(t time.Time) *ObjectsUpdate {
	ou.mutation.SetDeletedAt(t)
	return ou
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ou *ObjectsUpdate) SetNillableDeletedAt(t *time.Time) *ObjectsUpdate {
	if t != nil {
		ou.SetDeletedAt(*t)
	}
	return ou
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ou *ObjectsUpdate) ClearDeletedAt() *ObjectsUpdate {
	ou.mutation.ClearDeletedAt()
	return ou
}

// SetTouchVector sets the "touch_vector" field.
func (ou *ObjectsUpdate) SetTouchVector(s string) *ObjectsUpdate {
	ou.mutation.SetTouchVector(s)
	return ou
}

// SetNillableTouchVector sets the "touch_vector" field if the given value is not nil.
func (ou *ObjectsUpdate) SetNillableTouchVector(s *string) *ObjectsUpdate {
	if s != nil {
		ou.SetTouchVector(*s)
	}
	return ou
}

// SetMarkerName sets the "marker_name" field.
func (ou *ObjectsUpdate) SetMarkerName(s string) *ObjectsUpdate {
	ou.mutation.SetMarkerName(s)
	return ou
}

// SetNillableMarkerName sets the "marker_name" field if the given value is not nil.
func (ou *ObjectsUpdate) SetNillableMarkerName(s *string) *ObjectsUpdate {
	if s != nil {
		ou.SetMarkerName(*s)
	}
	return ou
}

// SetTimePoint sets the "time_point" field.
func (ou *ObjectsUpdate) SetTimePoint(f float64) *ObjectsUpdate {
	ou.mutation.ResetTimePoint()
	ou.mutation.SetTimePoint(f)
	return ou
}

// SetNillableTimePoint sets the "time_point" field if the given value is not nil.
func (ou *ObjectsUpdate) SetNillableTimePoint(f *float64) *ObjectsUpdate {
	if f != nil {
		ou.SetTimePoint(*f)
	}
	return ou
}

// AddTimePoint adds f to the "time_point" field.
func (ou *ObjectsUpdate) AddTimePoint(f float64) *ObjectsUpdate {
	ou.mutation.AddTimePoint(f)
	return ou
}

// SetTblVideosID sets the "tbl_videos" edge to the Videos entity by ID.
func (ou *ObjectsUpdate) SetTblVideosID(id uint) *ObjectsUpdate {
	ou.mutation.SetTblVideosID(id)
	return ou
}

// SetTblVideos sets the "tbl_videos" edge to the Videos entity.
func (ou *ObjectsUpdate) SetTblVideos(v *Videos) *ObjectsUpdate {
	return ou.SetTblVideosID(v.ID)
}

// Mutation returns the ObjectsMutation object of the builder.
func (ou *ObjectsUpdate) Mutation() *ObjectsMutation {
	return ou.mutation
}

// ClearTblVideos clears the "tbl_videos" edge to the Videos entity.
func (ou *ObjectsUpdate) ClearTblVideos() *ObjectsUpdate {
	ou.mutation.ClearTblVideos()
	return ou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *ObjectsUpdate) Save(ctx context.Context) (int, error) {
	ou.defaults()
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *ObjectsUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *ObjectsUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *ObjectsUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *ObjectsUpdate) defaults() {
	if _, ok := ou.mutation.UpdatedAt(); !ok {
		v := objects.UpdateDefaultUpdatedAt()
		ou.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *ObjectsUpdate) check() error {
	if v, ok := ou.mutation.CoordinateX(); ok {
		if err := objects.CoordinateXValidator(v); err != nil {
			return &ValidationError{Name: "coordinate_x", err: fmt.Errorf(`ent: validator failed for field "Objects.coordinate_x": %w`, err)}
		}
	}
	if v, ok := ou.mutation.CoordinateY(); ok {
		if err := objects.CoordinateYValidator(v); err != nil {
			return &ValidationError{Name: "coordinate_y", err: fmt.Errorf(`ent: validator failed for field "Objects.coordinate_y": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Length(); ok {
		if err := objects.LengthValidator(v); err != nil {
			return &ValidationError{Name: "length", err: fmt.Errorf(`ent: validator failed for field "Objects.length": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Width(); ok {
		if err := objects.WidthValidator(v); err != nil {
			return &ValidationError{Name: "width", err: fmt.Errorf(`ent: validator failed for field "Objects.width": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Order(); ok {
		if err := objects.OrderValidator(v); err != nil {
			return &ValidationError{Name: "order", err: fmt.Errorf(`ent: validator failed for field "Objects.order": %w`, err)}
		}
	}
	if _, ok := ou.mutation.TblVideosID(); ou.mutation.TblVideosCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Objects.tbl_videos"`)
	}
	return nil
}

func (ou *ObjectsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(objects.Table, objects.Columns, sqlgraph.NewFieldSpec(objects.FieldID, field.TypeUint))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.Description(); ok {
		_spec.SetField(objects.FieldDescription, field.TypeString, value)
	}
	if ou.mutation.DescriptionCleared() {
		_spec.ClearField(objects.FieldDescription, field.TypeString)
	}
	if value, ok := ou.mutation.CoordinateX(); ok {
		_spec.SetField(objects.FieldCoordinateX, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedCoordinateX(); ok {
		_spec.AddField(objects.FieldCoordinateX, field.TypeInt, value)
	}
	if value, ok := ou.mutation.CoordinateY(); ok {
		_spec.SetField(objects.FieldCoordinateY, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedCoordinateY(); ok {
		_spec.AddField(objects.FieldCoordinateY, field.TypeInt, value)
	}
	if value, ok := ou.mutation.Length(); ok {
		_spec.SetField(objects.FieldLength, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedLength(); ok {
		_spec.AddField(objects.FieldLength, field.TypeInt, value)
	}
	if value, ok := ou.mutation.Width(); ok {
		_spec.SetField(objects.FieldWidth, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedWidth(); ok {
		_spec.AddField(objects.FieldWidth, field.TypeInt, value)
	}
	if value, ok := ou.mutation.Order(); ok {
		_spec.SetField(objects.FieldOrder, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedOrder(); ok {
		_spec.AddField(objects.FieldOrder, field.TypeInt, value)
	}
	if value, ok := ou.mutation.TimeStart(); ok {
		_spec.SetField(objects.FieldTimeStart, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedTimeStart(); ok {
		_spec.AddField(objects.FieldTimeStart, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.TimeEnd(); ok {
		_spec.SetField(objects.FieldTimeEnd, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedTimeEnd(); ok {
		_spec.AddField(objects.FieldTimeEnd, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.SetField(objects.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ou.mutation.DeletedAt(); ok {
		_spec.SetField(objects.FieldDeletedAt, field.TypeTime, value)
	}
	if ou.mutation.DeletedAtCleared() {
		_spec.ClearField(objects.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ou.mutation.TouchVector(); ok {
		_spec.SetField(objects.FieldTouchVector, field.TypeString, value)
	}
	if value, ok := ou.mutation.MarkerName(); ok {
		_spec.SetField(objects.FieldMarkerName, field.TypeString, value)
	}
	if value, ok := ou.mutation.TimePoint(); ok {
		_spec.SetField(objects.FieldTimePoint, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedTimePoint(); ok {
		_spec.AddField(objects.FieldTimePoint, field.TypeFloat64, value)
	}
	if ou.mutation.TblVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   objects.TblVideosTable,
			Columns: []string{objects.TblVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videos.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.TblVideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   objects.TblVideosTable,
			Columns: []string{objects.TblVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videos.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{objects.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// ObjectsUpdateOne is the builder for updating a single Objects entity.
type ObjectsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ObjectsMutation
}

// SetVideoID sets the "video_id" field.
func (ouo *ObjectsUpdateOne) SetVideoID(u uint) *ObjectsUpdateOne {
	ouo.mutation.SetVideoID(u)
	return ouo
}

// SetNillableVideoID sets the "video_id" field if the given value is not nil.
func (ouo *ObjectsUpdateOne) SetNillableVideoID(u *uint) *ObjectsUpdateOne {
	if u != nil {
		ouo.SetVideoID(*u)
	}
	return ouo
}

// SetDescription sets the "description" field.
func (ouo *ObjectsUpdateOne) SetDescription(s string) *ObjectsUpdateOne {
	ouo.mutation.SetDescription(s)
	return ouo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ouo *ObjectsUpdateOne) SetNillableDescription(s *string) *ObjectsUpdateOne {
	if s != nil {
		ouo.SetDescription(*s)
	}
	return ouo
}

// ClearDescription clears the value of the "description" field.
func (ouo *ObjectsUpdateOne) ClearDescription() *ObjectsUpdateOne {
	ouo.mutation.ClearDescription()
	return ouo
}

// SetCoordinateX sets the "coordinate_x" field.
func (ouo *ObjectsUpdateOne) SetCoordinateX(i int) *ObjectsUpdateOne {
	ouo.mutation.ResetCoordinateX()
	ouo.mutation.SetCoordinateX(i)
	return ouo
}

// SetNillableCoordinateX sets the "coordinate_x" field if the given value is not nil.
func (ouo *ObjectsUpdateOne) SetNillableCoordinateX(i *int) *ObjectsUpdateOne {
	if i != nil {
		ouo.SetCoordinateX(*i)
	}
	return ouo
}

// AddCoordinateX adds i to the "coordinate_x" field.
func (ouo *ObjectsUpdateOne) AddCoordinateX(i int) *ObjectsUpdateOne {
	ouo.mutation.AddCoordinateX(i)
	return ouo
}

// SetCoordinateY sets the "coordinate_y" field.
func (ouo *ObjectsUpdateOne) SetCoordinateY(i int) *ObjectsUpdateOne {
	ouo.mutation.ResetCoordinateY()
	ouo.mutation.SetCoordinateY(i)
	return ouo
}

// SetNillableCoordinateY sets the "coordinate_y" field if the given value is not nil.
func (ouo *ObjectsUpdateOne) SetNillableCoordinateY(i *int) *ObjectsUpdateOne {
	if i != nil {
		ouo.SetCoordinateY(*i)
	}
	return ouo
}

// AddCoordinateY adds i to the "coordinate_y" field.
func (ouo *ObjectsUpdateOne) AddCoordinateY(i int) *ObjectsUpdateOne {
	ouo.mutation.AddCoordinateY(i)
	return ouo
}

// SetLength sets the "length" field.
func (ouo *ObjectsUpdateOne) SetLength(i int) *ObjectsUpdateOne {
	ouo.mutation.ResetLength()
	ouo.mutation.SetLength(i)
	return ouo
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (ouo *ObjectsUpdateOne) SetNillableLength(i *int) *ObjectsUpdateOne {
	if i != nil {
		ouo.SetLength(*i)
	}
	return ouo
}

// AddLength adds i to the "length" field.
func (ouo *ObjectsUpdateOne) AddLength(i int) *ObjectsUpdateOne {
	ouo.mutation.AddLength(i)
	return ouo
}

// SetWidth sets the "width" field.
func (ouo *ObjectsUpdateOne) SetWidth(i int) *ObjectsUpdateOne {
	ouo.mutation.ResetWidth()
	ouo.mutation.SetWidth(i)
	return ouo
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (ouo *ObjectsUpdateOne) SetNillableWidth(i *int) *ObjectsUpdateOne {
	if i != nil {
		ouo.SetWidth(*i)
	}
	return ouo
}

// AddWidth adds i to the "width" field.
func (ouo *ObjectsUpdateOne) AddWidth(i int) *ObjectsUpdateOne {
	ouo.mutation.AddWidth(i)
	return ouo
}

// SetOrder sets the "order" field.
func (ouo *ObjectsUpdateOne) SetOrder(i int) *ObjectsUpdateOne {
	ouo.mutation.ResetOrder()
	ouo.mutation.SetOrder(i)
	return ouo
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (ouo *ObjectsUpdateOne) SetNillableOrder(i *int) *ObjectsUpdateOne {
	if i != nil {
		ouo.SetOrder(*i)
	}
	return ouo
}

// AddOrder adds i to the "order" field.
func (ouo *ObjectsUpdateOne) AddOrder(i int) *ObjectsUpdateOne {
	ouo.mutation.AddOrder(i)
	return ouo
}

// SetTimeStart sets the "time_start" field.
func (ouo *ObjectsUpdateOne) SetTimeStart(f float64) *ObjectsUpdateOne {
	ouo.mutation.ResetTimeStart()
	ouo.mutation.SetTimeStart(f)
	return ouo
}

// SetNillableTimeStart sets the "time_start" field if the given value is not nil.
func (ouo *ObjectsUpdateOne) SetNillableTimeStart(f *float64) *ObjectsUpdateOne {
	if f != nil {
		ouo.SetTimeStart(*f)
	}
	return ouo
}

// AddTimeStart adds f to the "time_start" field.
func (ouo *ObjectsUpdateOne) AddTimeStart(f float64) *ObjectsUpdateOne {
	ouo.mutation.AddTimeStart(f)
	return ouo
}

// SetTimeEnd sets the "time_end" field.
func (ouo *ObjectsUpdateOne) SetTimeEnd(f float64) *ObjectsUpdateOne {
	ouo.mutation.ResetTimeEnd()
	ouo.mutation.SetTimeEnd(f)
	return ouo
}

// SetNillableTimeEnd sets the "time_end" field if the given value is not nil.
func (ouo *ObjectsUpdateOne) SetNillableTimeEnd(f *float64) *ObjectsUpdateOne {
	if f != nil {
		ouo.SetTimeEnd(*f)
	}
	return ouo
}

// AddTimeEnd adds f to the "time_end" field.
func (ouo *ObjectsUpdateOne) AddTimeEnd(f float64) *ObjectsUpdateOne {
	ouo.mutation.AddTimeEnd(f)
	return ouo
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *ObjectsUpdateOne) SetUpdatedAt(t time.Time) *ObjectsUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// SetDeletedAt sets the "deleted_at" field.
func (ouo *ObjectsUpdateOne) SetDeletedAt(t time.Time) *ObjectsUpdateOne {
	ouo.mutation.SetDeletedAt(t)
	return ouo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ouo *ObjectsUpdateOne) SetNillableDeletedAt(t *time.Time) *ObjectsUpdateOne {
	if t != nil {
		ouo.SetDeletedAt(*t)
	}
	return ouo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ouo *ObjectsUpdateOne) ClearDeletedAt() *ObjectsUpdateOne {
	ouo.mutation.ClearDeletedAt()
	return ouo
}

// SetTouchVector sets the "touch_vector" field.
func (ouo *ObjectsUpdateOne) SetTouchVector(s string) *ObjectsUpdateOne {
	ouo.mutation.SetTouchVector(s)
	return ouo
}

// SetNillableTouchVector sets the "touch_vector" field if the given value is not nil.
func (ouo *ObjectsUpdateOne) SetNillableTouchVector(s *string) *ObjectsUpdateOne {
	if s != nil {
		ouo.SetTouchVector(*s)
	}
	return ouo
}

// SetMarkerName sets the "marker_name" field.
func (ouo *ObjectsUpdateOne) SetMarkerName(s string) *ObjectsUpdateOne {
	ouo.mutation.SetMarkerName(s)
	return ouo
}

// SetNillableMarkerName sets the "marker_name" field if the given value is not nil.
func (ouo *ObjectsUpdateOne) SetNillableMarkerName(s *string) *ObjectsUpdateOne {
	if s != nil {
		ouo.SetMarkerName(*s)
	}
	return ouo
}

// SetTimePoint sets the "time_point" field.
func (ouo *ObjectsUpdateOne) SetTimePoint(f float64) *ObjectsUpdateOne {
	ouo.mutation.ResetTimePoint()
	ouo.mutation.SetTimePoint(f)
	return ouo
}

// SetNillableTimePoint sets the "time_point" field if the given value is not nil.
func (ouo *ObjectsUpdateOne) SetNillableTimePoint(f *float64) *ObjectsUpdateOne {
	if f != nil {
		ouo.SetTimePoint(*f)
	}
	return ouo
}

// AddTimePoint adds f to the "time_point" field.
func (ouo *ObjectsUpdateOne) AddTimePoint(f float64) *ObjectsUpdateOne {
	ouo.mutation.AddTimePoint(f)
	return ouo
}

// SetTblVideosID sets the "tbl_videos" edge to the Videos entity by ID.
func (ouo *ObjectsUpdateOne) SetTblVideosID(id uint) *ObjectsUpdateOne {
	ouo.mutation.SetTblVideosID(id)
	return ouo
}

// SetTblVideos sets the "tbl_videos" edge to the Videos entity.
func (ouo *ObjectsUpdateOne) SetTblVideos(v *Videos) *ObjectsUpdateOne {
	return ouo.SetTblVideosID(v.ID)
}

// Mutation returns the ObjectsMutation object of the builder.
func (ouo *ObjectsUpdateOne) Mutation() *ObjectsMutation {
	return ouo.mutation
}

// ClearTblVideos clears the "tbl_videos" edge to the Videos entity.
func (ouo *ObjectsUpdateOne) ClearTblVideos() *ObjectsUpdateOne {
	ouo.mutation.ClearTblVideos()
	return ouo
}

// Where appends a list predicates to the ObjectsUpdate builder.
func (ouo *ObjectsUpdateOne) Where(ps ...predicate.Objects) *ObjectsUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *ObjectsUpdateOne) Select(field string, fields ...string) *ObjectsUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Objects entity.
func (ouo *ObjectsUpdateOne) Save(ctx context.Context) (*Objects, error) {
	ouo.defaults()
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *ObjectsUpdateOne) SaveX(ctx context.Context) *Objects {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *ObjectsUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *ObjectsUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *ObjectsUpdateOne) defaults() {
	if _, ok := ouo.mutation.UpdatedAt(); !ok {
		v := objects.UpdateDefaultUpdatedAt()
		ouo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *ObjectsUpdateOne) check() error {
	if v, ok := ouo.mutation.CoordinateX(); ok {
		if err := objects.CoordinateXValidator(v); err != nil {
			return &ValidationError{Name: "coordinate_x", err: fmt.Errorf(`ent: validator failed for field "Objects.coordinate_x": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.CoordinateY(); ok {
		if err := objects.CoordinateYValidator(v); err != nil {
			return &ValidationError{Name: "coordinate_y", err: fmt.Errorf(`ent: validator failed for field "Objects.coordinate_y": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Length(); ok {
		if err := objects.LengthValidator(v); err != nil {
			return &ValidationError{Name: "length", err: fmt.Errorf(`ent: validator failed for field "Objects.length": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Width(); ok {
		if err := objects.WidthValidator(v); err != nil {
			return &ValidationError{Name: "width", err: fmt.Errorf(`ent: validator failed for field "Objects.width": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Order(); ok {
		if err := objects.OrderValidator(v); err != nil {
			return &ValidationError{Name: "order", err: fmt.Errorf(`ent: validator failed for field "Objects.order": %w`, err)}
		}
	}
	if _, ok := ouo.mutation.TblVideosID(); ouo.mutation.TblVideosCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Objects.tbl_videos"`)
	}
	return nil
}

func (ouo *ObjectsUpdateOne) sqlSave(ctx context.Context) (_node *Objects, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(objects.Table, objects.Columns, sqlgraph.NewFieldSpec(objects.FieldID, field.TypeUint))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Objects.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, objects.FieldID)
		for _, f := range fields {
			if !objects.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != objects.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.Description(); ok {
		_spec.SetField(objects.FieldDescription, field.TypeString, value)
	}
	if ouo.mutation.DescriptionCleared() {
		_spec.ClearField(objects.FieldDescription, field.TypeString)
	}
	if value, ok := ouo.mutation.CoordinateX(); ok {
		_spec.SetField(objects.FieldCoordinateX, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedCoordinateX(); ok {
		_spec.AddField(objects.FieldCoordinateX, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.CoordinateY(); ok {
		_spec.SetField(objects.FieldCoordinateY, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedCoordinateY(); ok {
		_spec.AddField(objects.FieldCoordinateY, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.Length(); ok {
		_spec.SetField(objects.FieldLength, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedLength(); ok {
		_spec.AddField(objects.FieldLength, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.Width(); ok {
		_spec.SetField(objects.FieldWidth, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedWidth(); ok {
		_spec.AddField(objects.FieldWidth, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.Order(); ok {
		_spec.SetField(objects.FieldOrder, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedOrder(); ok {
		_spec.AddField(objects.FieldOrder, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.TimeStart(); ok {
		_spec.SetField(objects.FieldTimeStart, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedTimeStart(); ok {
		_spec.AddField(objects.FieldTimeStart, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.TimeEnd(); ok {
		_spec.SetField(objects.FieldTimeEnd, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedTimeEnd(); ok {
		_spec.AddField(objects.FieldTimeEnd, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.SetField(objects.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.DeletedAt(); ok {
		_spec.SetField(objects.FieldDeletedAt, field.TypeTime, value)
	}
	if ouo.mutation.DeletedAtCleared() {
		_spec.ClearField(objects.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ouo.mutation.TouchVector(); ok {
		_spec.SetField(objects.FieldTouchVector, field.TypeString, value)
	}
	if value, ok := ouo.mutation.MarkerName(); ok {
		_spec.SetField(objects.FieldMarkerName, field.TypeString, value)
	}
	if value, ok := ouo.mutation.TimePoint(); ok {
		_spec.SetField(objects.FieldTimePoint, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedTimePoint(); ok {
		_spec.AddField(objects.FieldTimePoint, field.TypeFloat64, value)
	}
	if ouo.mutation.TblVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   objects.TblVideosTable,
			Columns: []string{objects.TblVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videos.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.TblVideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   objects.TblVideosTable,
			Columns: []string{objects.TblVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videos.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Objects{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{objects.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
