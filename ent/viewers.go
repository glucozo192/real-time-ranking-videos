// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/glu/video-real-time-ranking/ent/videos"
	"github.com/glu/video-real-time-ranking/ent/viewers"
)

// Viewers is the model entity for the Viewers schema.
type Viewers struct {
	config `bson:"-" json:"-"`
	// ID of the ent.
	ID uint `json:"id" bson:"_id,omitempty"`
	// VideoID holds the value of the "video_id" field.
	VideoID uint `json:"video_id" bson:"video_id"`
	// Number holds the value of the "number" field.
	Number int `json:"number" bson:"number"`
	// TimePoint holds the value of the "time_point" field.
	TimePoint float64 `json:"time_point" bson:"time_point"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at" bson:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at" bson:"deleted_at"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ViewersQuery when eager-loading is set.
	Edges        ViewersEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ViewersEdges holds the relations/edges for other nodes in the graph.
type ViewersEdges struct {
	// TblVideos holds the value of the tbl_videos edge.
	TblVideos *Videos `json:"tbl_videos,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TblVideosOrErr returns the TblVideos value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ViewersEdges) TblVideosOrErr() (*Videos, error) {
	if e.TblVideos != nil {
		return e.TblVideos, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: videos.Label}
	}
	return nil, &NotLoadedError{edge: "tbl_videos"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Viewers) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case viewers.FieldTimePoint:
			values[i] = new(sql.NullFloat64)
		case viewers.FieldID, viewers.FieldVideoID, viewers.FieldNumber:
			values[i] = new(sql.NullInt64)
		case viewers.FieldCreatedAt, viewers.FieldUpdatedAt, viewers.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Viewers fields.
func (v *Viewers) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case viewers.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			v.ID = uint(value.Int64)
		case viewers.FieldVideoID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field video_id", values[i])
			} else if value.Valid {
				v.VideoID = uint(value.Int64)
			}
		case viewers.FieldNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number", values[i])
			} else if value.Valid {
				v.Number = int(value.Int64)
			}
		case viewers.FieldTimePoint:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field time_point", values[i])
			} else if value.Valid {
				v.TimePoint = value.Float64
			}
		case viewers.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				v.CreatedAt = value.Time
			}
		case viewers.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				v.UpdatedAt = value.Time
			}
		case viewers.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				v.DeletedAt = new(time.Time)
				*v.DeletedAt = value.Time
			}
		default:
			v.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Viewers.
// This includes values selected through modifiers, order, etc.
func (v *Viewers) Value(name string) (ent.Value, error) {
	return v.selectValues.Get(name)
}

// QueryTblVideos queries the "tbl_videos" edge of the Viewers entity.
func (v *Viewers) QueryTblVideos() *VideosQuery {
	return NewViewersClient(v.config).QueryTblVideos(v)
}

// Update returns a builder for updating this Viewers.
// Note that you need to call Viewers.Unwrap() before calling this method if this Viewers
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Viewers) Update() *ViewersUpdateOne {
	return NewViewersClient(v.config).UpdateOne(v)
}

// Unwrap unwraps the Viewers entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Viewers) Unwrap() *Viewers {
	_tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Viewers is not a transactional entity")
	}
	v.config.driver = _tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Viewers) String() string {
	var builder strings.Builder
	builder.WriteString("Viewers(")
	builder.WriteString(fmt.Sprintf("id=%v, ", v.ID))
	builder.WriteString("video_id=")
	builder.WriteString(fmt.Sprintf("%v", v.VideoID))
	builder.WriteString(", ")
	builder.WriteString("number=")
	builder.WriteString(fmt.Sprintf("%v", v.Number))
	builder.WriteString(", ")
	builder.WriteString("time_point=")
	builder.WriteString(fmt.Sprintf("%v", v.TimePoint))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(v.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(v.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := v.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// ViewersSlice is a parsable slice of Viewers.
type ViewersSlice []*Viewers
