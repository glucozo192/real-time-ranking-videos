// Code generated by ent, DO NOT EDIT.

package comments

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the comments type in the database.
	Label = "comments"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldVideoID holds the string denoting the video_id field in the database.
	FieldVideoID = "video_id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldComment holds the string denoting the comment field in the database.
	FieldComment = "comment"
	// FieldUserName holds the string denoting the user_name field in the database.
	FieldUserName = "user_name"
	// FieldAvatar holds the string denoting the avatar field in the database.
	FieldAvatar = "avatar"
	// FieldTimePoint holds the string denoting the time_point field in the database.
	FieldTimePoint = "time_point"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeTblVideos holds the string denoting the tbl_videos edge name in mutations.
	EdgeTblVideos = "tbl_videos"
	// Table holds the table name of the comments in the database.
	Table = "tbl_comments"
	// TblVideosTable is the table that holds the tbl_videos relation/edge.
	TblVideosTable = "tbl_comments"
	// TblVideosInverseTable is the table name for the Videos entity.
	// It exists in this package in order to avoid circular dependency with the "videos" package.
	TblVideosInverseTable = "tbl_videos"
	// TblVideosColumn is the table column denoting the tbl_videos relation/edge.
	TblVideosColumn = "video_id"
)

// Columns holds all SQL columns for comments fields.
var Columns = []string{
	FieldID,
	FieldVideoID,
	FieldDescription,
	FieldComment,
	FieldUserName,
	FieldAvatar,
	FieldTimePoint,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// VideoIDValidator is a validator for the "video_id" field. It is called by the builders before save.
	VideoIDValidator func(uint) error
	// DefaultDescription holds the default value on creation for the "description" field.
	DefaultDescription string
	// DefaultComment holds the default value on creation for the "comment" field.
	DefaultComment string
	// CommentValidator is a validator for the "comment" field. It is called by the builders before save.
	CommentValidator func(string) error
	// UserNameValidator is a validator for the "user_name" field. It is called by the builders before save.
	UserNameValidator func(string) error
	// DefaultAvatar holds the default value on creation for the "avatar" field.
	DefaultAvatar string
	// AvatarValidator is a validator for the "avatar" field. It is called by the builders before save.
	AvatarValidator func(string) error
	// TimePointValidator is a validator for the "time_point" field. It is called by the builders before save.
	TimePointValidator func(float64) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(uint) error
)

// OrderOption defines the ordering options for the Comments queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByVideoID orders the results by the video_id field.
func ByVideoID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVideoID, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByComment orders the results by the comment field.
func ByComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComment, opts...).ToFunc()
}

// ByUserName orders the results by the user_name field.
func ByUserName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserName, opts...).ToFunc()
}

// ByAvatar orders the results by the avatar field.
func ByAvatar(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvatar, opts...).ToFunc()
}

// ByTimePoint orders the results by the time_point field.
func ByTimePoint(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimePoint, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByTblVideosField orders the results by tbl_videos field.
func ByTblVideosField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTblVideosStep(), sql.OrderByField(field, opts...))
	}
}
func newTblVideosStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TblVideosInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TblVideosTable, TblVideosColumn),
	)
}
