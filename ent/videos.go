// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/glu/video-real-time-ranking/ent/videos"
)

// Videos is the model entity for the Videos schema.
type Videos struct {
	config `bson:"-" json:"-"`
	// ID of the ent.
	ID uint `json:"id" bson:"_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name" bson:"name"`
	// Description holds the value of the "description" field.
	Description string `json:"description" bson:"description"`
	// VideoURL holds the value of the "video_url" field.
	VideoURL string `json:"video_url" bson:"video_url"`
	// Config holds the value of the "config" field.
	Config string `json:"config" bson:"config"`
	// PathResource holds the value of the "path_resource" field.
	PathResource string `json:"path_resource" bson:"path_resource"`
	// LevelSystem holds the value of the "level_system" field.
	LevelSystem string `json:"level_system" bson:"level_system"`
	// Status holds the value of the "status" field.
	Status string `json:"status" bson:"status"`
	// Note holds the value of the "note" field.
	Note string `json:"note" bson:"note"`
	// Assign holds the value of the "assign" field.
	Assign string `json:"assign" bson:"assign"`
	// Version holds the value of the "version" field.
	Version uint `json:"version" bson:"version,omitempty"`
	// Author holds the value of the "Author" field.
	Author string `json:"author" bson:"author"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at" bson:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at" bson:"updated_at"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at" bson:"deleted_at"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VideosQuery when eager-loading is set.
	Edges        VideosEdges `json:"edges"`
	selectValues sql.SelectValues
}

// VideosEdges holds the relations/edges for other nodes in the graph.
type VideosEdges struct {
	// TblComments holds the value of the tbl_comments edge.
	TblComments []*Comments `json:"tbl_comments,omitempty"`
	// TblReactions holds the value of the tbl_reactions edge.
	TblReactions []*Reactions `json:"tbl_reactions,omitempty"`
	// TblViewers holds the value of the tbl_viewers edge.
	TblViewers []*Viewers `json:"tbl_viewers,omitempty"`
	// TblObjects holds the value of the tbl_objects edge.
	TblObjects []*Objects `json:"tbl_objects,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// TblCommentsOrErr returns the TblComments value or an error if the edge
// was not loaded in eager-loading.
func (e VideosEdges) TblCommentsOrErr() ([]*Comments, error) {
	if e.loadedTypes[0] {
		return e.TblComments, nil
	}
	return nil, &NotLoadedError{edge: "tbl_comments"}
}

// TblReactionsOrErr returns the TblReactions value or an error if the edge
// was not loaded in eager-loading.
func (e VideosEdges) TblReactionsOrErr() ([]*Reactions, error) {
	if e.loadedTypes[1] {
		return e.TblReactions, nil
	}
	return nil, &NotLoadedError{edge: "tbl_reactions"}
}

// TblViewersOrErr returns the TblViewers value or an error if the edge
// was not loaded in eager-loading.
func (e VideosEdges) TblViewersOrErr() ([]*Viewers, error) {
	if e.loadedTypes[2] {
		return e.TblViewers, nil
	}
	return nil, &NotLoadedError{edge: "tbl_viewers"}
}

// TblObjectsOrErr returns the TblObjects value or an error if the edge
// was not loaded in eager-loading.
func (e VideosEdges) TblObjectsOrErr() ([]*Objects, error) {
	if e.loadedTypes[3] {
		return e.TblObjects, nil
	}
	return nil, &NotLoadedError{edge: "tbl_objects"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Videos) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case videos.FieldID, videos.FieldVersion:
			values[i] = new(sql.NullInt64)
		case videos.FieldName, videos.FieldDescription, videos.FieldVideoURL, videos.FieldConfig, videos.FieldPathResource, videos.FieldLevelSystem, videos.FieldStatus, videos.FieldNote, videos.FieldAssign, videos.FieldAuthor:
			values[i] = new(sql.NullString)
		case videos.FieldCreatedAt, videos.FieldUpdatedAt, videos.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Videos fields.
func (v *Videos) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case videos.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			v.ID = uint(value.Int64)
		case videos.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				v.Name = value.String
			}
		case videos.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				v.Description = value.String
			}
		case videos.FieldVideoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field video_url", values[i])
			} else if value.Valid {
				v.VideoURL = value.String
			}
		case videos.FieldConfig:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field config", values[i])
			} else if value.Valid {
				v.Config = value.String
			}
		case videos.FieldPathResource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path_resource", values[i])
			} else if value.Valid {
				v.PathResource = value.String
			}
		case videos.FieldLevelSystem:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field level_system", values[i])
			} else if value.Valid {
				v.LevelSystem = value.String
			}
		case videos.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				v.Status = value.String
			}
		case videos.FieldNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field note", values[i])
			} else if value.Valid {
				v.Note = value.String
			}
		case videos.FieldAssign:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field assign", values[i])
			} else if value.Valid {
				v.Assign = value.String
			}
		case videos.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				v.Version = uint(value.Int64)
			}
		case videos.FieldAuthor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Author", values[i])
			} else if value.Valid {
				v.Author = value.String
			}
		case videos.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				v.CreatedAt = value.Time
			}
		case videos.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				v.UpdatedAt = value.Time
			}
		case videos.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				v.DeletedAt = new(time.Time)
				*v.DeletedAt = value.Time
			}
		default:
			v.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Videos.
// This includes values selected through modifiers, order, etc.
func (v *Videos) Value(name string) (ent.Value, error) {
	return v.selectValues.Get(name)
}

// QueryTblComments queries the "tbl_comments" edge of the Videos entity.
func (v *Videos) QueryTblComments() *CommentsQuery {
	return NewVideosClient(v.config).QueryTblComments(v)
}

// QueryTblReactions queries the "tbl_reactions" edge of the Videos entity.
func (v *Videos) QueryTblReactions() *ReactionsQuery {
	return NewVideosClient(v.config).QueryTblReactions(v)
}

// QueryTblViewers queries the "tbl_viewers" edge of the Videos entity.
func (v *Videos) QueryTblViewers() *ViewersQuery {
	return NewVideosClient(v.config).QueryTblViewers(v)
}

// QueryTblObjects queries the "tbl_objects" edge of the Videos entity.
func (v *Videos) QueryTblObjects() *ObjectsQuery {
	return NewVideosClient(v.config).QueryTblObjects(v)
}

// Update returns a builder for updating this Videos.
// Note that you need to call Videos.Unwrap() before calling this method if this Videos
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Videos) Update() *VideosUpdateOne {
	return NewVideosClient(v.config).UpdateOne(v)
}

// Unwrap unwraps the Videos entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Videos) Unwrap() *Videos {
	_tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Videos is not a transactional entity")
	}
	v.config.driver = _tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Videos) String() string {
	var builder strings.Builder
	builder.WriteString("Videos(")
	builder.WriteString(fmt.Sprintf("id=%v, ", v.ID))
	builder.WriteString("name=")
	builder.WriteString(v.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(v.Description)
	builder.WriteString(", ")
	builder.WriteString("video_url=")
	builder.WriteString(v.VideoURL)
	builder.WriteString(", ")
	builder.WriteString("config=")
	builder.WriteString(v.Config)
	builder.WriteString(", ")
	builder.WriteString("path_resource=")
	builder.WriteString(v.PathResource)
	builder.WriteString(", ")
	builder.WriteString("level_system=")
	builder.WriteString(v.LevelSystem)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(v.Status)
	builder.WriteString(", ")
	builder.WriteString("note=")
	builder.WriteString(v.Note)
	builder.WriteString(", ")
	builder.WriteString("assign=")
	builder.WriteString(v.Assign)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", v.Version))
	builder.WriteString(", ")
	builder.WriteString("Author=")
	builder.WriteString(v.Author)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(v.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(v.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := v.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// VideosSlice is a parsable slice of Videos.
type VideosSlice []*Videos
