// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/glu/video-real-time-ranking/ent/objects"
	"github.com/glu/video-real-time-ranking/ent/videos"
)

// ObjectsCreate is the builder for creating a Objects entity.
type ObjectsCreate struct {
	config
	mutation *ObjectsMutation
	hooks    []Hook
}

// SetVideoID sets the "video_id" field.
func (oc *ObjectsCreate) SetVideoID(u uint) *ObjectsCreate {
	oc.mutation.SetVideoID(u)
	return oc
}

// SetDescription sets the "description" field.
func (oc *ObjectsCreate) SetDescription(s string) *ObjectsCreate {
	oc.mutation.SetDescription(s)
	return oc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (oc *ObjectsCreate) SetNillableDescription(s *string) *ObjectsCreate {
	if s != nil {
		oc.SetDescription(*s)
	}
	return oc
}

// SetCoordinateX sets the "coordinate_x" field.
func (oc *ObjectsCreate) SetCoordinateX(i int) *ObjectsCreate {
	oc.mutation.SetCoordinateX(i)
	return oc
}

// SetCoordinateY sets the "coordinate_y" field.
func (oc *ObjectsCreate) SetCoordinateY(i int) *ObjectsCreate {
	oc.mutation.SetCoordinateY(i)
	return oc
}

// SetLength sets the "length" field.
func (oc *ObjectsCreate) SetLength(i int) *ObjectsCreate {
	oc.mutation.SetLength(i)
	return oc
}

// SetWidth sets the "width" field.
func (oc *ObjectsCreate) SetWidth(i int) *ObjectsCreate {
	oc.mutation.SetWidth(i)
	return oc
}

// SetOrder sets the "order" field.
func (oc *ObjectsCreate) SetOrder(i int) *ObjectsCreate {
	oc.mutation.SetOrder(i)
	return oc
}

// SetTimeStart sets the "time_start" field.
func (oc *ObjectsCreate) SetTimeStart(f float64) *ObjectsCreate {
	oc.mutation.SetTimeStart(f)
	return oc
}

// SetTimeEnd sets the "time_end" field.
func (oc *ObjectsCreate) SetTimeEnd(f float64) *ObjectsCreate {
	oc.mutation.SetTimeEnd(f)
	return oc
}

// SetCreatedAt sets the "created_at" field.
func (oc *ObjectsCreate) SetCreatedAt(t time.Time) *ObjectsCreate {
	oc.mutation.SetCreatedAt(t)
	return oc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oc *ObjectsCreate) SetNillableCreatedAt(t *time.Time) *ObjectsCreate {
	if t != nil {
		oc.SetCreatedAt(*t)
	}
	return oc
}

// SetUpdatedAt sets the "updated_at" field.
func (oc *ObjectsCreate) SetUpdatedAt(t time.Time) *ObjectsCreate {
	oc.mutation.SetUpdatedAt(t)
	return oc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oc *ObjectsCreate) SetNillableUpdatedAt(t *time.Time) *ObjectsCreate {
	if t != nil {
		oc.SetUpdatedAt(*t)
	}
	return oc
}

// SetDeletedAt sets the "deleted_at" field.
func (oc *ObjectsCreate) SetDeletedAt(t time.Time) *ObjectsCreate {
	oc.mutation.SetDeletedAt(t)
	return oc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (oc *ObjectsCreate) SetNillableDeletedAt(t *time.Time) *ObjectsCreate {
	if t != nil {
		oc.SetDeletedAt(*t)
	}
	return oc
}

// SetTouchVector sets the "touch_vector" field.
func (oc *ObjectsCreate) SetTouchVector(s string) *ObjectsCreate {
	oc.mutation.SetTouchVector(s)
	return oc
}

// SetNillableTouchVector sets the "touch_vector" field if the given value is not nil.
func (oc *ObjectsCreate) SetNillableTouchVector(s *string) *ObjectsCreate {
	if s != nil {
		oc.SetTouchVector(*s)
	}
	return oc
}

// SetMarkerName sets the "marker_name" field.
func (oc *ObjectsCreate) SetMarkerName(s string) *ObjectsCreate {
	oc.mutation.SetMarkerName(s)
	return oc
}

// SetNillableMarkerName sets the "marker_name" field if the given value is not nil.
func (oc *ObjectsCreate) SetNillableMarkerName(s *string) *ObjectsCreate {
	if s != nil {
		oc.SetMarkerName(*s)
	}
	return oc
}

// SetTimePoint sets the "time_point" field.
func (oc *ObjectsCreate) SetTimePoint(f float64) *ObjectsCreate {
	oc.mutation.SetTimePoint(f)
	return oc
}

// SetNillableTimePoint sets the "time_point" field if the given value is not nil.
func (oc *ObjectsCreate) SetNillableTimePoint(f *float64) *ObjectsCreate {
	if f != nil {
		oc.SetTimePoint(*f)
	}
	return oc
}

// SetID sets the "id" field.
func (oc *ObjectsCreate) SetID(u uint) *ObjectsCreate {
	oc.mutation.SetID(u)
	return oc
}

// SetTblVideosID sets the "tbl_videos" edge to the Videos entity by ID.
func (oc *ObjectsCreate) SetTblVideosID(id uint) *ObjectsCreate {
	oc.mutation.SetTblVideosID(id)
	return oc
}

// SetTblVideos sets the "tbl_videos" edge to the Videos entity.
func (oc *ObjectsCreate) SetTblVideos(v *Videos) *ObjectsCreate {
	return oc.SetTblVideosID(v.ID)
}

// Mutation returns the ObjectsMutation object of the builder.
func (oc *ObjectsCreate) Mutation() *ObjectsMutation {
	return oc.mutation
}

// Save creates the Objects in the database.
func (oc *ObjectsCreate) Save(ctx context.Context) (*Objects, error) {
	oc.defaults()
	return withHooks(ctx, oc.sqlSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *ObjectsCreate) SaveX(ctx context.Context) *Objects {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *ObjectsCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *ObjectsCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *ObjectsCreate) defaults() {
	if _, ok := oc.mutation.Description(); !ok {
		v := objects.DefaultDescription
		oc.mutation.SetDescription(v)
	}
	if _, ok := oc.mutation.CreatedAt(); !ok {
		v := objects.DefaultCreatedAt()
		oc.mutation.SetCreatedAt(v)
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		v := objects.DefaultUpdatedAt()
		oc.mutation.SetUpdatedAt(v)
	}
	if _, ok := oc.mutation.TouchVector(); !ok {
		v := objects.DefaultTouchVector
		oc.mutation.SetTouchVector(v)
	}
	if _, ok := oc.mutation.MarkerName(); !ok {
		v := objects.DefaultMarkerName
		oc.mutation.SetMarkerName(v)
	}
	if _, ok := oc.mutation.TimePoint(); !ok {
		v := objects.DefaultTimePoint
		oc.mutation.SetTimePoint(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *ObjectsCreate) check() error {
	if _, ok := oc.mutation.VideoID(); !ok {
		return &ValidationError{Name: "video_id", err: errors.New(`ent: missing required field "Objects.video_id"`)}
	}
	if _, ok := oc.mutation.CoordinateX(); !ok {
		return &ValidationError{Name: "coordinate_x", err: errors.New(`ent: missing required field "Objects.coordinate_x"`)}
	}
	if v, ok := oc.mutation.CoordinateX(); ok {
		if err := objects.CoordinateXValidator(v); err != nil {
			return &ValidationError{Name: "coordinate_x", err: fmt.Errorf(`ent: validator failed for field "Objects.coordinate_x": %w`, err)}
		}
	}
	if _, ok := oc.mutation.CoordinateY(); !ok {
		return &ValidationError{Name: "coordinate_y", err: errors.New(`ent: missing required field "Objects.coordinate_y"`)}
	}
	if v, ok := oc.mutation.CoordinateY(); ok {
		if err := objects.CoordinateYValidator(v); err != nil {
			return &ValidationError{Name: "coordinate_y", err: fmt.Errorf(`ent: validator failed for field "Objects.coordinate_y": %w`, err)}
		}
	}
	if _, ok := oc.mutation.Length(); !ok {
		return &ValidationError{Name: "length", err: errors.New(`ent: missing required field "Objects.length"`)}
	}
	if v, ok := oc.mutation.Length(); ok {
		if err := objects.LengthValidator(v); err != nil {
			return &ValidationError{Name: "length", err: fmt.Errorf(`ent: validator failed for field "Objects.length": %w`, err)}
		}
	}
	if _, ok := oc.mutation.Width(); !ok {
		return &ValidationError{Name: "width", err: errors.New(`ent: missing required field "Objects.width"`)}
	}
	if v, ok := oc.mutation.Width(); ok {
		if err := objects.WidthValidator(v); err != nil {
			return &ValidationError{Name: "width", err: fmt.Errorf(`ent: validator failed for field "Objects.width": %w`, err)}
		}
	}
	if _, ok := oc.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "Objects.order"`)}
	}
	if v, ok := oc.mutation.Order(); ok {
		if err := objects.OrderValidator(v); err != nil {
			return &ValidationError{Name: "order", err: fmt.Errorf(`ent: validator failed for field "Objects.order": %w`, err)}
		}
	}
	if _, ok := oc.mutation.TimeStart(); !ok {
		return &ValidationError{Name: "time_start", err: errors.New(`ent: missing required field "Objects.time_start"`)}
	}
	if _, ok := oc.mutation.TimeEnd(); !ok {
		return &ValidationError{Name: "time_end", err: errors.New(`ent: missing required field "Objects.time_end"`)}
	}
	if _, ok := oc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Objects.created_at"`)}
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Objects.updated_at"`)}
	}
	if _, ok := oc.mutation.TouchVector(); !ok {
		return &ValidationError{Name: "touch_vector", err: errors.New(`ent: missing required field "Objects.touch_vector"`)}
	}
	if _, ok := oc.mutation.MarkerName(); !ok {
		return &ValidationError{Name: "marker_name", err: errors.New(`ent: missing required field "Objects.marker_name"`)}
	}
	if _, ok := oc.mutation.TimePoint(); !ok {
		return &ValidationError{Name: "time_point", err: errors.New(`ent: missing required field "Objects.time_point"`)}
	}
	if v, ok := oc.mutation.ID(); ok {
		if err := objects.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Objects.id": %w`, err)}
		}
	}
	if _, ok := oc.mutation.TblVideosID(); !ok {
		return &ValidationError{Name: "tbl_videos", err: errors.New(`ent: missing required edge "Objects.tbl_videos"`)}
	}
	return nil
}

func (oc *ObjectsCreate) sqlSave(ctx context.Context) (*Objects, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint(id)
	}
	oc.mutation.id = &_node.ID
	oc.mutation.done = true
	return _node, nil
}

func (oc *ObjectsCreate) createSpec() (*Objects, *sqlgraph.CreateSpec) {
	var (
		_node = &Objects{config: oc.config}
		_spec = sqlgraph.NewCreateSpec(objects.Table, sqlgraph.NewFieldSpec(objects.FieldID, field.TypeUint))
	)
	if id, ok := oc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := oc.mutation.Description(); ok {
		_spec.SetField(objects.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := oc.mutation.CoordinateX(); ok {
		_spec.SetField(objects.FieldCoordinateX, field.TypeInt, value)
		_node.CoordinateX = value
	}
	if value, ok := oc.mutation.CoordinateY(); ok {
		_spec.SetField(objects.FieldCoordinateY, field.TypeInt, value)
		_node.CoordinateY = value
	}
	if value, ok := oc.mutation.Length(); ok {
		_spec.SetField(objects.FieldLength, field.TypeInt, value)
		_node.Length = value
	}
	if value, ok := oc.mutation.Width(); ok {
		_spec.SetField(objects.FieldWidth, field.TypeInt, value)
		_node.Width = value
	}
	if value, ok := oc.mutation.Order(); ok {
		_spec.SetField(objects.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if value, ok := oc.mutation.TimeStart(); ok {
		_spec.SetField(objects.FieldTimeStart, field.TypeFloat64, value)
		_node.TimeStart = value
	}
	if value, ok := oc.mutation.TimeEnd(); ok {
		_spec.SetField(objects.FieldTimeEnd, field.TypeFloat64, value)
		_node.TimeEnd = value
	}
	if value, ok := oc.mutation.CreatedAt(); ok {
		_spec.SetField(objects.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := oc.mutation.UpdatedAt(); ok {
		_spec.SetField(objects.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := oc.mutation.DeletedAt(); ok {
		_spec.SetField(objects.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := oc.mutation.TouchVector(); ok {
		_spec.SetField(objects.FieldTouchVector, field.TypeString, value)
		_node.TouchVector = value
	}
	if value, ok := oc.mutation.MarkerName(); ok {
		_spec.SetField(objects.FieldMarkerName, field.TypeString, value)
		_node.MarkerName = value
	}
	if value, ok := oc.mutation.TimePoint(); ok {
		_spec.SetField(objects.FieldTimePoint, field.TypeFloat64, value)
		_node.TimePoint = value
	}
	if nodes := oc.mutation.TblVideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   objects.TblVideosTable,
			Columns: []string{objects.TblVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videos.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.VideoID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ObjectsCreateBulk is the builder for creating many Objects entities in bulk.
type ObjectsCreateBulk struct {
	config
	err      error
	builders []*ObjectsCreate
}

// Save creates the Objects entities in the database.
func (ocb *ObjectsCreateBulk) Save(ctx context.Context) ([]*Objects, error) {
	if ocb.err != nil {
		return nil, ocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Objects, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ObjectsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *ObjectsCreateBulk) SaveX(ctx context.Context) []*Objects {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *ObjectsCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *ObjectsCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}
