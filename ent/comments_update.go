// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/glu/video-real-time-ranking/ent/comments"
	"github.com/glu/video-real-time-ranking/ent/predicate"
	"github.com/glu/video-real-time-ranking/ent/videos"
)

// CommentsUpdate is the builder for updating Comments entities.
type CommentsUpdate struct {
	config
	hooks    []Hook
	mutation *CommentsMutation
}

// Where appends a list predicates to the CommentsUpdate builder.
func (cu *CommentsUpdate) Where(ps ...predicate.Comments) *CommentsUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetVideoID sets the "video_id" field.
func (cu *CommentsUpdate) SetVideoID(u uint) *CommentsUpdate {
	cu.mutation.SetVideoID(u)
	return cu
}

// SetNillableVideoID sets the "video_id" field if the given value is not nil.
func (cu *CommentsUpdate) SetNillableVideoID(u *uint) *CommentsUpdate {
	if u != nil {
		cu.SetVideoID(*u)
	}
	return cu
}

// SetDescription sets the "description" field.
func (cu *CommentsUpdate) SetDescription(s string) *CommentsUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *CommentsUpdate) SetNillableDescription(s *string) *CommentsUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// ClearDescription clears the value of the "description" field.
func (cu *CommentsUpdate) ClearDescription() *CommentsUpdate {
	cu.mutation.ClearDescription()
	return cu
}

// SetComment sets the "comment" field.
func (cu *CommentsUpdate) SetComment(s string) *CommentsUpdate {
	cu.mutation.SetComment(s)
	return cu
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (cu *CommentsUpdate) SetNillableComment(s *string) *CommentsUpdate {
	if s != nil {
		cu.SetComment(*s)
	}
	return cu
}

// SetUserName sets the "user_name" field.
func (cu *CommentsUpdate) SetUserName(s string) *CommentsUpdate {
	cu.mutation.SetUserName(s)
	return cu
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (cu *CommentsUpdate) SetNillableUserName(s *string) *CommentsUpdate {
	if s != nil {
		cu.SetUserName(*s)
	}
	return cu
}

// SetAvatar sets the "avatar" field.
func (cu *CommentsUpdate) SetAvatar(s string) *CommentsUpdate {
	cu.mutation.SetAvatar(s)
	return cu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (cu *CommentsUpdate) SetNillableAvatar(s *string) *CommentsUpdate {
	if s != nil {
		cu.SetAvatar(*s)
	}
	return cu
}

// SetTimePoint sets the "time_point" field.
func (cu *CommentsUpdate) SetTimePoint(f float64) *CommentsUpdate {
	cu.mutation.ResetTimePoint()
	cu.mutation.SetTimePoint(f)
	return cu
}

// SetNillableTimePoint sets the "time_point" field if the given value is not nil.
func (cu *CommentsUpdate) SetNillableTimePoint(f *float64) *CommentsUpdate {
	if f != nil {
		cu.SetTimePoint(*f)
	}
	return cu
}

// AddTimePoint adds f to the "time_point" field.
func (cu *CommentsUpdate) AddTimePoint(f float64) *CommentsUpdate {
	cu.mutation.AddTimePoint(f)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CommentsUpdate) SetUpdatedAt(t time.Time) *CommentsUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *CommentsUpdate) SetDeletedAt(t time.Time) *CommentsUpdate {
	cu.mutation.SetDeletedAt(t)
	return cu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cu *CommentsUpdate) SetNillableDeletedAt(t *time.Time) *CommentsUpdate {
	if t != nil {
		cu.SetDeletedAt(*t)
	}
	return cu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cu *CommentsUpdate) ClearDeletedAt() *CommentsUpdate {
	cu.mutation.ClearDeletedAt()
	return cu
}

// SetTblVideosID sets the "tbl_videos" edge to the Videos entity by ID.
func (cu *CommentsUpdate) SetTblVideosID(id uint) *CommentsUpdate {
	cu.mutation.SetTblVideosID(id)
	return cu
}

// SetTblVideos sets the "tbl_videos" edge to the Videos entity.
func (cu *CommentsUpdate) SetTblVideos(v *Videos) *CommentsUpdate {
	return cu.SetTblVideosID(v.ID)
}

// Mutation returns the CommentsMutation object of the builder.
func (cu *CommentsUpdate) Mutation() *CommentsMutation {
	return cu.mutation
}

// ClearTblVideos clears the "tbl_videos" edge to the Videos entity.
func (cu *CommentsUpdate) ClearTblVideos() *CommentsUpdate {
	cu.mutation.ClearTblVideos()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CommentsUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CommentsUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CommentsUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CommentsUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CommentsUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := comments.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CommentsUpdate) check() error {
	if v, ok := cu.mutation.VideoID(); ok {
		if err := comments.VideoIDValidator(v); err != nil {
			return &ValidationError{Name: "video_id", err: fmt.Errorf(`ent: validator failed for field "Comments.video_id": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Comment(); ok {
		if err := comments.CommentValidator(v); err != nil {
			return &ValidationError{Name: "comment", err: fmt.Errorf(`ent: validator failed for field "Comments.comment": %w`, err)}
		}
	}
	if v, ok := cu.mutation.UserName(); ok {
		if err := comments.UserNameValidator(v); err != nil {
			return &ValidationError{Name: "user_name", err: fmt.Errorf(`ent: validator failed for field "Comments.user_name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Avatar(); ok {
		if err := comments.AvatarValidator(v); err != nil {
			return &ValidationError{Name: "avatar", err: fmt.Errorf(`ent: validator failed for field "Comments.avatar": %w`, err)}
		}
	}
	if v, ok := cu.mutation.TimePoint(); ok {
		if err := comments.TimePointValidator(v); err != nil {
			return &ValidationError{Name: "time_point", err: fmt.Errorf(`ent: validator failed for field "Comments.time_point": %w`, err)}
		}
	}
	if _, ok := cu.mutation.TblVideosID(); cu.mutation.TblVideosCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Comments.tbl_videos"`)
	}
	return nil
}

func (cu *CommentsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(comments.Table, comments.Columns, sqlgraph.NewFieldSpec(comments.FieldID, field.TypeUint))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(comments.FieldDescription, field.TypeString, value)
	}
	if cu.mutation.DescriptionCleared() {
		_spec.ClearField(comments.FieldDescription, field.TypeString)
	}
	if value, ok := cu.mutation.Comment(); ok {
		_spec.SetField(comments.FieldComment, field.TypeString, value)
	}
	if value, ok := cu.mutation.UserName(); ok {
		_spec.SetField(comments.FieldUserName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Avatar(); ok {
		_spec.SetField(comments.FieldAvatar, field.TypeString, value)
	}
	if value, ok := cu.mutation.TimePoint(); ok {
		_spec.SetField(comments.FieldTimePoint, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.AddedTimePoint(); ok {
		_spec.AddField(comments.FieldTimePoint, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(comments.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.SetField(comments.FieldDeletedAt, field.TypeTime, value)
	}
	if cu.mutation.DeletedAtCleared() {
		_spec.ClearField(comments.FieldDeletedAt, field.TypeTime)
	}
	if cu.mutation.TblVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comments.TblVideosTable,
			Columns: []string{comments.TblVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videos.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.TblVideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comments.TblVideosTable,
			Columns: []string{comments.TblVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videos.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{comments.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CommentsUpdateOne is the builder for updating a single Comments entity.
type CommentsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommentsMutation
}

// SetVideoID sets the "video_id" field.
func (cuo *CommentsUpdateOne) SetVideoID(u uint) *CommentsUpdateOne {
	cuo.mutation.SetVideoID(u)
	return cuo
}

// SetNillableVideoID sets the "video_id" field if the given value is not nil.
func (cuo *CommentsUpdateOne) SetNillableVideoID(u *uint) *CommentsUpdateOne {
	if u != nil {
		cuo.SetVideoID(*u)
	}
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *CommentsUpdateOne) SetDescription(s string) *CommentsUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *CommentsUpdateOne) SetNillableDescription(s *string) *CommentsUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// ClearDescription clears the value of the "description" field.
func (cuo *CommentsUpdateOne) ClearDescription() *CommentsUpdateOne {
	cuo.mutation.ClearDescription()
	return cuo
}

// SetComment sets the "comment" field.
func (cuo *CommentsUpdateOne) SetComment(s string) *CommentsUpdateOne {
	cuo.mutation.SetComment(s)
	return cuo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (cuo *CommentsUpdateOne) SetNillableComment(s *string) *CommentsUpdateOne {
	if s != nil {
		cuo.SetComment(*s)
	}
	return cuo
}

// SetUserName sets the "user_name" field.
func (cuo *CommentsUpdateOne) SetUserName(s string) *CommentsUpdateOne {
	cuo.mutation.SetUserName(s)
	return cuo
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (cuo *CommentsUpdateOne) SetNillableUserName(s *string) *CommentsUpdateOne {
	if s != nil {
		cuo.SetUserName(*s)
	}
	return cuo
}

// SetAvatar sets the "avatar" field.
func (cuo *CommentsUpdateOne) SetAvatar(s string) *CommentsUpdateOne {
	cuo.mutation.SetAvatar(s)
	return cuo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (cuo *CommentsUpdateOne) SetNillableAvatar(s *string) *CommentsUpdateOne {
	if s != nil {
		cuo.SetAvatar(*s)
	}
	return cuo
}

// SetTimePoint sets the "time_point" field.
func (cuo *CommentsUpdateOne) SetTimePoint(f float64) *CommentsUpdateOne {
	cuo.mutation.ResetTimePoint()
	cuo.mutation.SetTimePoint(f)
	return cuo
}

// SetNillableTimePoint sets the "time_point" field if the given value is not nil.
func (cuo *CommentsUpdateOne) SetNillableTimePoint(f *float64) *CommentsUpdateOne {
	if f != nil {
		cuo.SetTimePoint(*f)
	}
	return cuo
}

// AddTimePoint adds f to the "time_point" field.
func (cuo *CommentsUpdateOne) AddTimePoint(f float64) *CommentsUpdateOne {
	cuo.mutation.AddTimePoint(f)
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CommentsUpdateOne) SetUpdatedAt(t time.Time) *CommentsUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *CommentsUpdateOne) SetDeletedAt(t time.Time) *CommentsUpdateOne {
	cuo.mutation.SetDeletedAt(t)
	return cuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cuo *CommentsUpdateOne) SetNillableDeletedAt(t *time.Time) *CommentsUpdateOne {
	if t != nil {
		cuo.SetDeletedAt(*t)
	}
	return cuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cuo *CommentsUpdateOne) ClearDeletedAt() *CommentsUpdateOne {
	cuo.mutation.ClearDeletedAt()
	return cuo
}

// SetTblVideosID sets the "tbl_videos" edge to the Videos entity by ID.
func (cuo *CommentsUpdateOne) SetTblVideosID(id uint) *CommentsUpdateOne {
	cuo.mutation.SetTblVideosID(id)
	return cuo
}

// SetTblVideos sets the "tbl_videos" edge to the Videos entity.
func (cuo *CommentsUpdateOne) SetTblVideos(v *Videos) *CommentsUpdateOne {
	return cuo.SetTblVideosID(v.ID)
}

// Mutation returns the CommentsMutation object of the builder.
func (cuo *CommentsUpdateOne) Mutation() *CommentsMutation {
	return cuo.mutation
}

// ClearTblVideos clears the "tbl_videos" edge to the Videos entity.
func (cuo *CommentsUpdateOne) ClearTblVideos() *CommentsUpdateOne {
	cuo.mutation.ClearTblVideos()
	return cuo
}

// Where appends a list predicates to the CommentsUpdate builder.
func (cuo *CommentsUpdateOne) Where(ps ...predicate.Comments) *CommentsUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CommentsUpdateOne) Select(field string, fields ...string) *CommentsUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Comments entity.
func (cuo *CommentsUpdateOne) Save(ctx context.Context) (*Comments, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CommentsUpdateOne) SaveX(ctx context.Context) *Comments {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CommentsUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CommentsUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CommentsUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := comments.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CommentsUpdateOne) check() error {
	if v, ok := cuo.mutation.VideoID(); ok {
		if err := comments.VideoIDValidator(v); err != nil {
			return &ValidationError{Name: "video_id", err: fmt.Errorf(`ent: validator failed for field "Comments.video_id": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Comment(); ok {
		if err := comments.CommentValidator(v); err != nil {
			return &ValidationError{Name: "comment", err: fmt.Errorf(`ent: validator failed for field "Comments.comment": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.UserName(); ok {
		if err := comments.UserNameValidator(v); err != nil {
			return &ValidationError{Name: "user_name", err: fmt.Errorf(`ent: validator failed for field "Comments.user_name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Avatar(); ok {
		if err := comments.AvatarValidator(v); err != nil {
			return &ValidationError{Name: "avatar", err: fmt.Errorf(`ent: validator failed for field "Comments.avatar": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.TimePoint(); ok {
		if err := comments.TimePointValidator(v); err != nil {
			return &ValidationError{Name: "time_point", err: fmt.Errorf(`ent: validator failed for field "Comments.time_point": %w`, err)}
		}
	}
	if _, ok := cuo.mutation.TblVideosID(); cuo.mutation.TblVideosCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Comments.tbl_videos"`)
	}
	return nil
}

func (cuo *CommentsUpdateOne) sqlSave(ctx context.Context) (_node *Comments, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(comments.Table, comments.Columns, sqlgraph.NewFieldSpec(comments.FieldID, field.TypeUint))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Comments.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, comments.FieldID)
		for _, f := range fields {
			if !comments.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != comments.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(comments.FieldDescription, field.TypeString, value)
	}
	if cuo.mutation.DescriptionCleared() {
		_spec.ClearField(comments.FieldDescription, field.TypeString)
	}
	if value, ok := cuo.mutation.Comment(); ok {
		_spec.SetField(comments.FieldComment, field.TypeString, value)
	}
	if value, ok := cuo.mutation.UserName(); ok {
		_spec.SetField(comments.FieldUserName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Avatar(); ok {
		_spec.SetField(comments.FieldAvatar, field.TypeString, value)
	}
	if value, ok := cuo.mutation.TimePoint(); ok {
		_spec.SetField(comments.FieldTimePoint, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.AddedTimePoint(); ok {
		_spec.AddField(comments.FieldTimePoint, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(comments.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.SetField(comments.FieldDeletedAt, field.TypeTime, value)
	}
	if cuo.mutation.DeletedAtCleared() {
		_spec.ClearField(comments.FieldDeletedAt, field.TypeTime)
	}
	if cuo.mutation.TblVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comments.TblVideosTable,
			Columns: []string{comments.TblVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videos.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.TblVideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comments.TblVideosTable,
			Columns: []string{comments.TblVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videos.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Comments{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{comments.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
