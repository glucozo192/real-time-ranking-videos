// Code generated by ent, DO NOT EDIT.

package videos

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the videos type in the database.
	Label = "videos"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldVideoURL holds the string denoting the video_url field in the database.
	FieldVideoURL = "video_url"
	// FieldConfig holds the string denoting the config field in the database.
	FieldConfig = "config"
	// FieldPathResource holds the string denoting the path_resource field in the database.
	FieldPathResource = "path_resource"
	// FieldLevelSystem holds the string denoting the level_system field in the database.
	FieldLevelSystem = "level_system"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldNote holds the string denoting the note field in the database.
	FieldNote = "note"
	// FieldAssign holds the string denoting the assign field in the database.
	FieldAssign = "assign"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldAuthor holds the string denoting the author field in the database.
	FieldAuthor = "author"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeTblComments holds the string denoting the tbl_comments edge name in mutations.
	EdgeTblComments = "tbl_comments"
	// EdgeTblReactions holds the string denoting the tbl_reactions edge name in mutations.
	EdgeTblReactions = "tbl_reactions"
	// EdgeTblViewers holds the string denoting the tbl_viewers edge name in mutations.
	EdgeTblViewers = "tbl_viewers"
	// EdgeTblObjects holds the string denoting the tbl_objects edge name in mutations.
	EdgeTblObjects = "tbl_objects"
	// Table holds the table name of the videos in the database.
	Table = "tbl_videos"
	// TblCommentsTable is the table that holds the tbl_comments relation/edge.
	TblCommentsTable = "tbl_comments"
	// TblCommentsInverseTable is the table name for the Comments entity.
	// It exists in this package in order to avoid circular dependency with the "comments" package.
	TblCommentsInverseTable = "tbl_comments"
	// TblCommentsColumn is the table column denoting the tbl_comments relation/edge.
	TblCommentsColumn = "video_id"
	// TblReactionsTable is the table that holds the tbl_reactions relation/edge.
	TblReactionsTable = "tbl_reactions"
	// TblReactionsInverseTable is the table name for the Reactions entity.
	// It exists in this package in order to avoid circular dependency with the "reactions" package.
	TblReactionsInverseTable = "tbl_reactions"
	// TblReactionsColumn is the table column denoting the tbl_reactions relation/edge.
	TblReactionsColumn = "video_id"
	// TblViewersTable is the table that holds the tbl_viewers relation/edge.
	TblViewersTable = "tbl_viewers"
	// TblViewersInverseTable is the table name for the Viewers entity.
	// It exists in this package in order to avoid circular dependency with the "viewers" package.
	TblViewersInverseTable = "tbl_viewers"
	// TblViewersColumn is the table column denoting the tbl_viewers relation/edge.
	TblViewersColumn = "video_id"
	// TblObjectsTable is the table that holds the tbl_objects relation/edge.
	TblObjectsTable = "tbl_objects"
	// TblObjectsInverseTable is the table name for the Objects entity.
	// It exists in this package in order to avoid circular dependency with the "objects" package.
	TblObjectsInverseTable = "tbl_objects"
	// TblObjectsColumn is the table column denoting the tbl_objects relation/edge.
	TblObjectsColumn = "video_id"
)

// Columns holds all SQL columns for videos fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldVideoURL,
	FieldConfig,
	FieldPathResource,
	FieldLevelSystem,
	FieldStatus,
	FieldNote,
	FieldAssign,
	FieldVersion,
	FieldAuthor,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultDescription holds the default value on creation for the "description" field.
	DefaultDescription string
	// DefaultVersion holds the default value on creation for the "version" field.
	DefaultVersion uint
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Videos queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByVideoURL orders the results by the video_url field.
func ByVideoURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVideoURL, opts...).ToFunc()
}

// ByConfig orders the results by the config field.
func ByConfig(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConfig, opts...).ToFunc()
}

// ByPathResource orders the results by the path_resource field.
func ByPathResource(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPathResource, opts...).ToFunc()
}

// ByLevelSystem orders the results by the level_system field.
func ByLevelSystem(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLevelSystem, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByNote orders the results by the note field.
func ByNote(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNote, opts...).ToFunc()
}

// ByAssign orders the results by the assign field.
func ByAssign(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssign, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByAuthor orders the results by the Author field.
func ByAuthor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthor, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByTblCommentsCount orders the results by tbl_comments count.
func ByTblCommentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTblCommentsStep(), opts...)
	}
}

// ByTblComments orders the results by tbl_comments terms.
func ByTblComments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTblCommentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTblReactionsCount orders the results by tbl_reactions count.
func ByTblReactionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTblReactionsStep(), opts...)
	}
}

// ByTblReactions orders the results by tbl_reactions terms.
func ByTblReactions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTblReactionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTblViewersCount orders the results by tbl_viewers count.
func ByTblViewersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTblViewersStep(), opts...)
	}
}

// ByTblViewers orders the results by tbl_viewers terms.
func ByTblViewers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTblViewersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTblObjectsCount orders the results by tbl_objects count.
func ByTblObjectsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTblObjectsStep(), opts...)
	}
}

// ByTblObjects orders the results by tbl_objects terms.
func ByTblObjects(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTblObjectsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTblCommentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TblCommentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TblCommentsTable, TblCommentsColumn),
	)
}
func newTblReactionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TblReactionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TblReactionsTable, TblReactionsColumn),
	)
}
func newTblViewersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TblViewersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TblViewersTable, TblViewersColumn),
	)
}
func newTblObjectsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TblObjectsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TblObjectsTable, TblObjectsColumn),
	)
}
