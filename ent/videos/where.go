// Code generated by ent, DO NOT EDIT.

package videos

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/glu/video-real-time-ranking/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint) predicate.Videos {
	return predicate.Videos(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint) predicate.Videos {
	return predicate.Videos(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint) predicate.Videos {
	return predicate.Videos(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint) predicate.Videos {
	return predicate.Videos(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint) predicate.Videos {
	return predicate.Videos(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint) predicate.Videos {
	return predicate.Videos(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint) predicate.Videos {
	return predicate.Videos(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldDescription, v))
}

// VideoURL applies equality check predicate on the "video_url" field. It's identical to VideoURLEQ.
func VideoURL(v string) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldVideoURL, v))
}

// Config applies equality check predicate on the "config" field. It's identical to ConfigEQ.
func Config(v string) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldConfig, v))
}

// PathResource applies equality check predicate on the "path_resource" field. It's identical to PathResourceEQ.
func PathResource(v string) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldPathResource, v))
}

// LevelSystem applies equality check predicate on the "level_system" field. It's identical to LevelSystemEQ.
func LevelSystem(v string) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldLevelSystem, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldStatus, v))
}

// Note applies equality check predicate on the "note" field. It's identical to NoteEQ.
func Note(v string) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldNote, v))
}

// Assign applies equality check predicate on the "assign" field. It's identical to AssignEQ.
func Assign(v string) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldAssign, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v uint) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldVersion, v))
}

// Author applies equality check predicate on the "Author" field. It's identical to AuthorEQ.
func Author(v string) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldAuthor, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldDeletedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Videos {
	return predicate.Videos(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Videos {
	return predicate.Videos(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Videos {
	return predicate.Videos(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Videos {
	return predicate.Videos(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Videos {
	return predicate.Videos(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Videos {
	return predicate.Videos(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Videos {
	return predicate.Videos(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Videos {
	return predicate.Videos(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Videos {
	return predicate.Videos(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Videos {
	return predicate.Videos(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Videos {
	return predicate.Videos(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Videos {
	return predicate.Videos(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Videos {
	return predicate.Videos(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Videos {
	return predicate.Videos(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Videos {
	return predicate.Videos(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Videos {
	return predicate.Videos(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Videos {
	return predicate.Videos(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Videos {
	return predicate.Videos(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Videos {
	return predicate.Videos(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Videos {
	return predicate.Videos(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Videos {
	return predicate.Videos(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Videos {
	return predicate.Videos(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Videos {
	return predicate.Videos(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Videos {
	return predicate.Videos(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Videos {
	return predicate.Videos(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Videos {
	return predicate.Videos(sql.FieldContainsFold(FieldDescription, v))
}

// VideoURLEQ applies the EQ predicate on the "video_url" field.
func VideoURLEQ(v string) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldVideoURL, v))
}

// VideoURLNEQ applies the NEQ predicate on the "video_url" field.
func VideoURLNEQ(v string) predicate.Videos {
	return predicate.Videos(sql.FieldNEQ(FieldVideoURL, v))
}

// VideoURLIn applies the In predicate on the "video_url" field.
func VideoURLIn(vs ...string) predicate.Videos {
	return predicate.Videos(sql.FieldIn(FieldVideoURL, vs...))
}

// VideoURLNotIn applies the NotIn predicate on the "video_url" field.
func VideoURLNotIn(vs ...string) predicate.Videos {
	return predicate.Videos(sql.FieldNotIn(FieldVideoURL, vs...))
}

// VideoURLGT applies the GT predicate on the "video_url" field.
func VideoURLGT(v string) predicate.Videos {
	return predicate.Videos(sql.FieldGT(FieldVideoURL, v))
}

// VideoURLGTE applies the GTE predicate on the "video_url" field.
func VideoURLGTE(v string) predicate.Videos {
	return predicate.Videos(sql.FieldGTE(FieldVideoURL, v))
}

// VideoURLLT applies the LT predicate on the "video_url" field.
func VideoURLLT(v string) predicate.Videos {
	return predicate.Videos(sql.FieldLT(FieldVideoURL, v))
}

// VideoURLLTE applies the LTE predicate on the "video_url" field.
func VideoURLLTE(v string) predicate.Videos {
	return predicate.Videos(sql.FieldLTE(FieldVideoURL, v))
}

// VideoURLContains applies the Contains predicate on the "video_url" field.
func VideoURLContains(v string) predicate.Videos {
	return predicate.Videos(sql.FieldContains(FieldVideoURL, v))
}

// VideoURLHasPrefix applies the HasPrefix predicate on the "video_url" field.
func VideoURLHasPrefix(v string) predicate.Videos {
	return predicate.Videos(sql.FieldHasPrefix(FieldVideoURL, v))
}

// VideoURLHasSuffix applies the HasSuffix predicate on the "video_url" field.
func VideoURLHasSuffix(v string) predicate.Videos {
	return predicate.Videos(sql.FieldHasSuffix(FieldVideoURL, v))
}

// VideoURLEqualFold applies the EqualFold predicate on the "video_url" field.
func VideoURLEqualFold(v string) predicate.Videos {
	return predicate.Videos(sql.FieldEqualFold(FieldVideoURL, v))
}

// VideoURLContainsFold applies the ContainsFold predicate on the "video_url" field.
func VideoURLContainsFold(v string) predicate.Videos {
	return predicate.Videos(sql.FieldContainsFold(FieldVideoURL, v))
}

// ConfigEQ applies the EQ predicate on the "config" field.
func ConfigEQ(v string) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldConfig, v))
}

// ConfigNEQ applies the NEQ predicate on the "config" field.
func ConfigNEQ(v string) predicate.Videos {
	return predicate.Videos(sql.FieldNEQ(FieldConfig, v))
}

// ConfigIn applies the In predicate on the "config" field.
func ConfigIn(vs ...string) predicate.Videos {
	return predicate.Videos(sql.FieldIn(FieldConfig, vs...))
}

// ConfigNotIn applies the NotIn predicate on the "config" field.
func ConfigNotIn(vs ...string) predicate.Videos {
	return predicate.Videos(sql.FieldNotIn(FieldConfig, vs...))
}

// ConfigGT applies the GT predicate on the "config" field.
func ConfigGT(v string) predicate.Videos {
	return predicate.Videos(sql.FieldGT(FieldConfig, v))
}

// ConfigGTE applies the GTE predicate on the "config" field.
func ConfigGTE(v string) predicate.Videos {
	return predicate.Videos(sql.FieldGTE(FieldConfig, v))
}

// ConfigLT applies the LT predicate on the "config" field.
func ConfigLT(v string) predicate.Videos {
	return predicate.Videos(sql.FieldLT(FieldConfig, v))
}

// ConfigLTE applies the LTE predicate on the "config" field.
func ConfigLTE(v string) predicate.Videos {
	return predicate.Videos(sql.FieldLTE(FieldConfig, v))
}

// ConfigContains applies the Contains predicate on the "config" field.
func ConfigContains(v string) predicate.Videos {
	return predicate.Videos(sql.FieldContains(FieldConfig, v))
}

// ConfigHasPrefix applies the HasPrefix predicate on the "config" field.
func ConfigHasPrefix(v string) predicate.Videos {
	return predicate.Videos(sql.FieldHasPrefix(FieldConfig, v))
}

// ConfigHasSuffix applies the HasSuffix predicate on the "config" field.
func ConfigHasSuffix(v string) predicate.Videos {
	return predicate.Videos(sql.FieldHasSuffix(FieldConfig, v))
}

// ConfigEqualFold applies the EqualFold predicate on the "config" field.
func ConfigEqualFold(v string) predicate.Videos {
	return predicate.Videos(sql.FieldEqualFold(FieldConfig, v))
}

// ConfigContainsFold applies the ContainsFold predicate on the "config" field.
func ConfigContainsFold(v string) predicate.Videos {
	return predicate.Videos(sql.FieldContainsFold(FieldConfig, v))
}

// PathResourceEQ applies the EQ predicate on the "path_resource" field.
func PathResourceEQ(v string) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldPathResource, v))
}

// PathResourceNEQ applies the NEQ predicate on the "path_resource" field.
func PathResourceNEQ(v string) predicate.Videos {
	return predicate.Videos(sql.FieldNEQ(FieldPathResource, v))
}

// PathResourceIn applies the In predicate on the "path_resource" field.
func PathResourceIn(vs ...string) predicate.Videos {
	return predicate.Videos(sql.FieldIn(FieldPathResource, vs...))
}

// PathResourceNotIn applies the NotIn predicate on the "path_resource" field.
func PathResourceNotIn(vs ...string) predicate.Videos {
	return predicate.Videos(sql.FieldNotIn(FieldPathResource, vs...))
}

// PathResourceGT applies the GT predicate on the "path_resource" field.
func PathResourceGT(v string) predicate.Videos {
	return predicate.Videos(sql.FieldGT(FieldPathResource, v))
}

// PathResourceGTE applies the GTE predicate on the "path_resource" field.
func PathResourceGTE(v string) predicate.Videos {
	return predicate.Videos(sql.FieldGTE(FieldPathResource, v))
}

// PathResourceLT applies the LT predicate on the "path_resource" field.
func PathResourceLT(v string) predicate.Videos {
	return predicate.Videos(sql.FieldLT(FieldPathResource, v))
}

// PathResourceLTE applies the LTE predicate on the "path_resource" field.
func PathResourceLTE(v string) predicate.Videos {
	return predicate.Videos(sql.FieldLTE(FieldPathResource, v))
}

// PathResourceContains applies the Contains predicate on the "path_resource" field.
func PathResourceContains(v string) predicate.Videos {
	return predicate.Videos(sql.FieldContains(FieldPathResource, v))
}

// PathResourceHasPrefix applies the HasPrefix predicate on the "path_resource" field.
func PathResourceHasPrefix(v string) predicate.Videos {
	return predicate.Videos(sql.FieldHasPrefix(FieldPathResource, v))
}

// PathResourceHasSuffix applies the HasSuffix predicate on the "path_resource" field.
func PathResourceHasSuffix(v string) predicate.Videos {
	return predicate.Videos(sql.FieldHasSuffix(FieldPathResource, v))
}

// PathResourceEqualFold applies the EqualFold predicate on the "path_resource" field.
func PathResourceEqualFold(v string) predicate.Videos {
	return predicate.Videos(sql.FieldEqualFold(FieldPathResource, v))
}

// PathResourceContainsFold applies the ContainsFold predicate on the "path_resource" field.
func PathResourceContainsFold(v string) predicate.Videos {
	return predicate.Videos(sql.FieldContainsFold(FieldPathResource, v))
}

// LevelSystemEQ applies the EQ predicate on the "level_system" field.
func LevelSystemEQ(v string) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldLevelSystem, v))
}

// LevelSystemNEQ applies the NEQ predicate on the "level_system" field.
func LevelSystemNEQ(v string) predicate.Videos {
	return predicate.Videos(sql.FieldNEQ(FieldLevelSystem, v))
}

// LevelSystemIn applies the In predicate on the "level_system" field.
func LevelSystemIn(vs ...string) predicate.Videos {
	return predicate.Videos(sql.FieldIn(FieldLevelSystem, vs...))
}

// LevelSystemNotIn applies the NotIn predicate on the "level_system" field.
func LevelSystemNotIn(vs ...string) predicate.Videos {
	return predicate.Videos(sql.FieldNotIn(FieldLevelSystem, vs...))
}

// LevelSystemGT applies the GT predicate on the "level_system" field.
func LevelSystemGT(v string) predicate.Videos {
	return predicate.Videos(sql.FieldGT(FieldLevelSystem, v))
}

// LevelSystemGTE applies the GTE predicate on the "level_system" field.
func LevelSystemGTE(v string) predicate.Videos {
	return predicate.Videos(sql.FieldGTE(FieldLevelSystem, v))
}

// LevelSystemLT applies the LT predicate on the "level_system" field.
func LevelSystemLT(v string) predicate.Videos {
	return predicate.Videos(sql.FieldLT(FieldLevelSystem, v))
}

// LevelSystemLTE applies the LTE predicate on the "level_system" field.
func LevelSystemLTE(v string) predicate.Videos {
	return predicate.Videos(sql.FieldLTE(FieldLevelSystem, v))
}

// LevelSystemContains applies the Contains predicate on the "level_system" field.
func LevelSystemContains(v string) predicate.Videos {
	return predicate.Videos(sql.FieldContains(FieldLevelSystem, v))
}

// LevelSystemHasPrefix applies the HasPrefix predicate on the "level_system" field.
func LevelSystemHasPrefix(v string) predicate.Videos {
	return predicate.Videos(sql.FieldHasPrefix(FieldLevelSystem, v))
}

// LevelSystemHasSuffix applies the HasSuffix predicate on the "level_system" field.
func LevelSystemHasSuffix(v string) predicate.Videos {
	return predicate.Videos(sql.FieldHasSuffix(FieldLevelSystem, v))
}

// LevelSystemEqualFold applies the EqualFold predicate on the "level_system" field.
func LevelSystemEqualFold(v string) predicate.Videos {
	return predicate.Videos(sql.FieldEqualFold(FieldLevelSystem, v))
}

// LevelSystemContainsFold applies the ContainsFold predicate on the "level_system" field.
func LevelSystemContainsFold(v string) predicate.Videos {
	return predicate.Videos(sql.FieldContainsFold(FieldLevelSystem, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Videos {
	return predicate.Videos(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Videos {
	return predicate.Videos(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Videos {
	return predicate.Videos(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Videos {
	return predicate.Videos(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Videos {
	return predicate.Videos(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Videos {
	return predicate.Videos(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Videos {
	return predicate.Videos(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Videos {
	return predicate.Videos(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Videos {
	return predicate.Videos(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Videos {
	return predicate.Videos(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Videos {
	return predicate.Videos(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Videos {
	return predicate.Videos(sql.FieldContainsFold(FieldStatus, v))
}

// NoteEQ applies the EQ predicate on the "note" field.
func NoteEQ(v string) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldNote, v))
}

// NoteNEQ applies the NEQ predicate on the "note" field.
func NoteNEQ(v string) predicate.Videos {
	return predicate.Videos(sql.FieldNEQ(FieldNote, v))
}

// NoteIn applies the In predicate on the "note" field.
func NoteIn(vs ...string) predicate.Videos {
	return predicate.Videos(sql.FieldIn(FieldNote, vs...))
}

// NoteNotIn applies the NotIn predicate on the "note" field.
func NoteNotIn(vs ...string) predicate.Videos {
	return predicate.Videos(sql.FieldNotIn(FieldNote, vs...))
}

// NoteGT applies the GT predicate on the "note" field.
func NoteGT(v string) predicate.Videos {
	return predicate.Videos(sql.FieldGT(FieldNote, v))
}

// NoteGTE applies the GTE predicate on the "note" field.
func NoteGTE(v string) predicate.Videos {
	return predicate.Videos(sql.FieldGTE(FieldNote, v))
}

// NoteLT applies the LT predicate on the "note" field.
func NoteLT(v string) predicate.Videos {
	return predicate.Videos(sql.FieldLT(FieldNote, v))
}

// NoteLTE applies the LTE predicate on the "note" field.
func NoteLTE(v string) predicate.Videos {
	return predicate.Videos(sql.FieldLTE(FieldNote, v))
}

// NoteContains applies the Contains predicate on the "note" field.
func NoteContains(v string) predicate.Videos {
	return predicate.Videos(sql.FieldContains(FieldNote, v))
}

// NoteHasPrefix applies the HasPrefix predicate on the "note" field.
func NoteHasPrefix(v string) predicate.Videos {
	return predicate.Videos(sql.FieldHasPrefix(FieldNote, v))
}

// NoteHasSuffix applies the HasSuffix predicate on the "note" field.
func NoteHasSuffix(v string) predicate.Videos {
	return predicate.Videos(sql.FieldHasSuffix(FieldNote, v))
}

// NoteEqualFold applies the EqualFold predicate on the "note" field.
func NoteEqualFold(v string) predicate.Videos {
	return predicate.Videos(sql.FieldEqualFold(FieldNote, v))
}

// NoteContainsFold applies the ContainsFold predicate on the "note" field.
func NoteContainsFold(v string) predicate.Videos {
	return predicate.Videos(sql.FieldContainsFold(FieldNote, v))
}

// AssignEQ applies the EQ predicate on the "assign" field.
func AssignEQ(v string) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldAssign, v))
}

// AssignNEQ applies the NEQ predicate on the "assign" field.
func AssignNEQ(v string) predicate.Videos {
	return predicate.Videos(sql.FieldNEQ(FieldAssign, v))
}

// AssignIn applies the In predicate on the "assign" field.
func AssignIn(vs ...string) predicate.Videos {
	return predicate.Videos(sql.FieldIn(FieldAssign, vs...))
}

// AssignNotIn applies the NotIn predicate on the "assign" field.
func AssignNotIn(vs ...string) predicate.Videos {
	return predicate.Videos(sql.FieldNotIn(FieldAssign, vs...))
}

// AssignGT applies the GT predicate on the "assign" field.
func AssignGT(v string) predicate.Videos {
	return predicate.Videos(sql.FieldGT(FieldAssign, v))
}

// AssignGTE applies the GTE predicate on the "assign" field.
func AssignGTE(v string) predicate.Videos {
	return predicate.Videos(sql.FieldGTE(FieldAssign, v))
}

// AssignLT applies the LT predicate on the "assign" field.
func AssignLT(v string) predicate.Videos {
	return predicate.Videos(sql.FieldLT(FieldAssign, v))
}

// AssignLTE applies the LTE predicate on the "assign" field.
func AssignLTE(v string) predicate.Videos {
	return predicate.Videos(sql.FieldLTE(FieldAssign, v))
}

// AssignContains applies the Contains predicate on the "assign" field.
func AssignContains(v string) predicate.Videos {
	return predicate.Videos(sql.FieldContains(FieldAssign, v))
}

// AssignHasPrefix applies the HasPrefix predicate on the "assign" field.
func AssignHasPrefix(v string) predicate.Videos {
	return predicate.Videos(sql.FieldHasPrefix(FieldAssign, v))
}

// AssignHasSuffix applies the HasSuffix predicate on the "assign" field.
func AssignHasSuffix(v string) predicate.Videos {
	return predicate.Videos(sql.FieldHasSuffix(FieldAssign, v))
}

// AssignEqualFold applies the EqualFold predicate on the "assign" field.
func AssignEqualFold(v string) predicate.Videos {
	return predicate.Videos(sql.FieldEqualFold(FieldAssign, v))
}

// AssignContainsFold applies the ContainsFold predicate on the "assign" field.
func AssignContainsFold(v string) predicate.Videos {
	return predicate.Videos(sql.FieldContainsFold(FieldAssign, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v uint) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v uint) predicate.Videos {
	return predicate.Videos(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...uint) predicate.Videos {
	return predicate.Videos(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...uint) predicate.Videos {
	return predicate.Videos(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v uint) predicate.Videos {
	return predicate.Videos(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v uint) predicate.Videos {
	return predicate.Videos(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v uint) predicate.Videos {
	return predicate.Videos(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v uint) predicate.Videos {
	return predicate.Videos(sql.FieldLTE(FieldVersion, v))
}

// AuthorEQ applies the EQ predicate on the "Author" field.
func AuthorEQ(v string) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldAuthor, v))
}

// AuthorNEQ applies the NEQ predicate on the "Author" field.
func AuthorNEQ(v string) predicate.Videos {
	return predicate.Videos(sql.FieldNEQ(FieldAuthor, v))
}

// AuthorIn applies the In predicate on the "Author" field.
func AuthorIn(vs ...string) predicate.Videos {
	return predicate.Videos(sql.FieldIn(FieldAuthor, vs...))
}

// AuthorNotIn applies the NotIn predicate on the "Author" field.
func AuthorNotIn(vs ...string) predicate.Videos {
	return predicate.Videos(sql.FieldNotIn(FieldAuthor, vs...))
}

// AuthorGT applies the GT predicate on the "Author" field.
func AuthorGT(v string) predicate.Videos {
	return predicate.Videos(sql.FieldGT(FieldAuthor, v))
}

// AuthorGTE applies the GTE predicate on the "Author" field.
func AuthorGTE(v string) predicate.Videos {
	return predicate.Videos(sql.FieldGTE(FieldAuthor, v))
}

// AuthorLT applies the LT predicate on the "Author" field.
func AuthorLT(v string) predicate.Videos {
	return predicate.Videos(sql.FieldLT(FieldAuthor, v))
}

// AuthorLTE applies the LTE predicate on the "Author" field.
func AuthorLTE(v string) predicate.Videos {
	return predicate.Videos(sql.FieldLTE(FieldAuthor, v))
}

// AuthorContains applies the Contains predicate on the "Author" field.
func AuthorContains(v string) predicate.Videos {
	return predicate.Videos(sql.FieldContains(FieldAuthor, v))
}

// AuthorHasPrefix applies the HasPrefix predicate on the "Author" field.
func AuthorHasPrefix(v string) predicate.Videos {
	return predicate.Videos(sql.FieldHasPrefix(FieldAuthor, v))
}

// AuthorHasSuffix applies the HasSuffix predicate on the "Author" field.
func AuthorHasSuffix(v string) predicate.Videos {
	return predicate.Videos(sql.FieldHasSuffix(FieldAuthor, v))
}

// AuthorEqualFold applies the EqualFold predicate on the "Author" field.
func AuthorEqualFold(v string) predicate.Videos {
	return predicate.Videos(sql.FieldEqualFold(FieldAuthor, v))
}

// AuthorContainsFold applies the ContainsFold predicate on the "Author" field.
func AuthorContainsFold(v string) predicate.Videos {
	return predicate.Videos(sql.FieldContainsFold(FieldAuthor, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Videos {
	return predicate.Videos(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Videos {
	return predicate.Videos(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Videos {
	return predicate.Videos(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Videos {
	return predicate.Videos(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Videos {
	return predicate.Videos(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Videos {
	return predicate.Videos(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Videos {
	return predicate.Videos(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Videos {
	return predicate.Videos(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Videos {
	return predicate.Videos(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Videos {
	return predicate.Videos(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Videos {
	return predicate.Videos(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Videos {
	return predicate.Videos(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Videos {
	return predicate.Videos(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Videos {
	return predicate.Videos(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Videos {
	return predicate.Videos(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Videos {
	return predicate.Videos(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Videos {
	return predicate.Videos(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Videos {
	return predicate.Videos(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Videos {
	return predicate.Videos(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Videos {
	return predicate.Videos(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Videos {
	return predicate.Videos(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Videos {
	return predicate.Videos(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Videos {
	return predicate.Videos(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Videos {
	return predicate.Videos(sql.FieldNotNull(FieldDeletedAt))
}

// HasTblComments applies the HasEdge predicate on the "tbl_comments" edge.
func HasTblComments() predicate.Videos {
	return predicate.Videos(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TblCommentsTable, TblCommentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTblCommentsWith applies the HasEdge predicate on the "tbl_comments" edge with a given conditions (other predicates).
func HasTblCommentsWith(preds ...predicate.Comments) predicate.Videos {
	return predicate.Videos(func(s *sql.Selector) {
		step := newTblCommentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTblReactions applies the HasEdge predicate on the "tbl_reactions" edge.
func HasTblReactions() predicate.Videos {
	return predicate.Videos(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TblReactionsTable, TblReactionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTblReactionsWith applies the HasEdge predicate on the "tbl_reactions" edge with a given conditions (other predicates).
func HasTblReactionsWith(preds ...predicate.Reactions) predicate.Videos {
	return predicate.Videos(func(s *sql.Selector) {
		step := newTblReactionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTblViewers applies the HasEdge predicate on the "tbl_viewers" edge.
func HasTblViewers() predicate.Videos {
	return predicate.Videos(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TblViewersTable, TblViewersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTblViewersWith applies the HasEdge predicate on the "tbl_viewers" edge with a given conditions (other predicates).
func HasTblViewersWith(preds ...predicate.Viewers) predicate.Videos {
	return predicate.Videos(func(s *sql.Selector) {
		step := newTblViewersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTblObjects applies the HasEdge predicate on the "tbl_objects" edge.
func HasTblObjects() predicate.Videos {
	return predicate.Videos(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TblObjectsTable, TblObjectsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTblObjectsWith applies the HasEdge predicate on the "tbl_objects" edge with a given conditions (other predicates).
func HasTblObjectsWith(preds ...predicate.Objects) predicate.Videos {
	return predicate.Videos(func(s *sql.Selector) {
		step := newTblObjectsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Videos) predicate.Videos {
	return predicate.Videos(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Videos) predicate.Videos {
	return predicate.Videos(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Videos) predicate.Videos {
	return predicate.Videos(func(s *sql.Selector) {
		p(s.Not())
	})
}
