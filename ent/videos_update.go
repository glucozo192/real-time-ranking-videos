// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/glu/video-real-time-ranking/ent/comments"
	"github.com/glu/video-real-time-ranking/ent/objects"
	"github.com/glu/video-real-time-ranking/ent/predicate"
	"github.com/glu/video-real-time-ranking/ent/reactions"
	"github.com/glu/video-real-time-ranking/ent/videos"
	"github.com/glu/video-real-time-ranking/ent/viewers"
)

// VideosUpdate is the builder for updating Videos entities.
type VideosUpdate struct {
	config
	hooks    []Hook
	mutation *VideosMutation
}

// Where appends a list predicates to the VideosUpdate builder.
func (vu *VideosUpdate) Where(ps ...predicate.Videos) *VideosUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetName sets the "name" field.
func (vu *VideosUpdate) SetName(s string) *VideosUpdate {
	vu.mutation.SetName(s)
	return vu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (vu *VideosUpdate) SetNillableName(s *string) *VideosUpdate {
	if s != nil {
		vu.SetName(*s)
	}
	return vu
}

// SetDescription sets the "description" field.
func (vu *VideosUpdate) SetDescription(s string) *VideosUpdate {
	vu.mutation.SetDescription(s)
	return vu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vu *VideosUpdate) SetNillableDescription(s *string) *VideosUpdate {
	if s != nil {
		vu.SetDescription(*s)
	}
	return vu
}

// ClearDescription clears the value of the "description" field.
func (vu *VideosUpdate) ClearDescription() *VideosUpdate {
	vu.mutation.ClearDescription()
	return vu
}

// SetVideoURL sets the "video_url" field.
func (vu *VideosUpdate) SetVideoURL(s string) *VideosUpdate {
	vu.mutation.SetVideoURL(s)
	return vu
}

// SetNillableVideoURL sets the "video_url" field if the given value is not nil.
func (vu *VideosUpdate) SetNillableVideoURL(s *string) *VideosUpdate {
	if s != nil {
		vu.SetVideoURL(*s)
	}
	return vu
}

// SetConfig sets the "config" field.
func (vu *VideosUpdate) SetConfig(s string) *VideosUpdate {
	vu.mutation.SetConfig(s)
	return vu
}

// SetNillableConfig sets the "config" field if the given value is not nil.
func (vu *VideosUpdate) SetNillableConfig(s *string) *VideosUpdate {
	if s != nil {
		vu.SetConfig(*s)
	}
	return vu
}

// SetPathResource sets the "path_resource" field.
func (vu *VideosUpdate) SetPathResource(s string) *VideosUpdate {
	vu.mutation.SetPathResource(s)
	return vu
}

// SetNillablePathResource sets the "path_resource" field if the given value is not nil.
func (vu *VideosUpdate) SetNillablePathResource(s *string) *VideosUpdate {
	if s != nil {
		vu.SetPathResource(*s)
	}
	return vu
}

// SetLevelSystem sets the "level_system" field.
func (vu *VideosUpdate) SetLevelSystem(s string) *VideosUpdate {
	vu.mutation.SetLevelSystem(s)
	return vu
}

// SetNillableLevelSystem sets the "level_system" field if the given value is not nil.
func (vu *VideosUpdate) SetNillableLevelSystem(s *string) *VideosUpdate {
	if s != nil {
		vu.SetLevelSystem(*s)
	}
	return vu
}

// SetStatus sets the "status" field.
func (vu *VideosUpdate) SetStatus(s string) *VideosUpdate {
	vu.mutation.SetStatus(s)
	return vu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (vu *VideosUpdate) SetNillableStatus(s *string) *VideosUpdate {
	if s != nil {
		vu.SetStatus(*s)
	}
	return vu
}

// SetNote sets the "note" field.
func (vu *VideosUpdate) SetNote(s string) *VideosUpdate {
	vu.mutation.SetNote(s)
	return vu
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (vu *VideosUpdate) SetNillableNote(s *string) *VideosUpdate {
	if s != nil {
		vu.SetNote(*s)
	}
	return vu
}

// SetAssign sets the "assign" field.
func (vu *VideosUpdate) SetAssign(s string) *VideosUpdate {
	vu.mutation.SetAssign(s)
	return vu
}

// SetNillableAssign sets the "assign" field if the given value is not nil.
func (vu *VideosUpdate) SetNillableAssign(s *string) *VideosUpdate {
	if s != nil {
		vu.SetAssign(*s)
	}
	return vu
}

// SetVersion sets the "version" field.
func (vu *VideosUpdate) SetVersion(u uint) *VideosUpdate {
	vu.mutation.ResetVersion()
	vu.mutation.SetVersion(u)
	return vu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (vu *VideosUpdate) SetNillableVersion(u *uint) *VideosUpdate {
	if u != nil {
		vu.SetVersion(*u)
	}
	return vu
}

// AddVersion adds u to the "version" field.
func (vu *VideosUpdate) AddVersion(u int) *VideosUpdate {
	vu.mutation.AddVersion(u)
	return vu
}

// SetAuthor sets the "Author" field.
func (vu *VideosUpdate) SetAuthor(s string) *VideosUpdate {
	vu.mutation.SetAuthor(s)
	return vu
}

// SetNillableAuthor sets the "Author" field if the given value is not nil.
func (vu *VideosUpdate) SetNillableAuthor(s *string) *VideosUpdate {
	if s != nil {
		vu.SetAuthor(*s)
	}
	return vu
}

// SetCreatedAt sets the "created_at" field.
func (vu *VideosUpdate) SetCreatedAt(t time.Time) *VideosUpdate {
	vu.mutation.SetCreatedAt(t)
	return vu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vu *VideosUpdate) SetNillableCreatedAt(t *time.Time) *VideosUpdate {
	if t != nil {
		vu.SetCreatedAt(*t)
	}
	return vu
}

// SetUpdatedAt sets the "updated_at" field.
func (vu *VideosUpdate) SetUpdatedAt(t time.Time) *VideosUpdate {
	vu.mutation.SetUpdatedAt(t)
	return vu
}

// SetDeletedAt sets the "deleted_at" field.
func (vu *VideosUpdate) SetDeletedAt(t time.Time) *VideosUpdate {
	vu.mutation.SetDeletedAt(t)
	return vu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vu *VideosUpdate) SetNillableDeletedAt(t *time.Time) *VideosUpdate {
	if t != nil {
		vu.SetDeletedAt(*t)
	}
	return vu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vu *VideosUpdate) ClearDeletedAt() *VideosUpdate {
	vu.mutation.ClearDeletedAt()
	return vu
}

// AddTblCommentIDs adds the "tbl_comments" edge to the Comments entity by IDs.
func (vu *VideosUpdate) AddTblCommentIDs(ids ...uint) *VideosUpdate {
	vu.mutation.AddTblCommentIDs(ids...)
	return vu
}

// AddTblComments adds the "tbl_comments" edges to the Comments entity.
func (vu *VideosUpdate) AddTblComments(c ...*Comments) *VideosUpdate {
	ids := make([]uint, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return vu.AddTblCommentIDs(ids...)
}

// AddTblReactionIDs adds the "tbl_reactions" edge to the Reactions entity by IDs.
func (vu *VideosUpdate) AddTblReactionIDs(ids ...uint) *VideosUpdate {
	vu.mutation.AddTblReactionIDs(ids...)
	return vu
}

// AddTblReactions adds the "tbl_reactions" edges to the Reactions entity.
func (vu *VideosUpdate) AddTblReactions(r ...*Reactions) *VideosUpdate {
	ids := make([]uint, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return vu.AddTblReactionIDs(ids...)
}

// AddTblViewerIDs adds the "tbl_viewers" edge to the Viewers entity by IDs.
func (vu *VideosUpdate) AddTblViewerIDs(ids ...uint) *VideosUpdate {
	vu.mutation.AddTblViewerIDs(ids...)
	return vu
}

// AddTblViewers adds the "tbl_viewers" edges to the Viewers entity.
func (vu *VideosUpdate) AddTblViewers(v ...*Viewers) *VideosUpdate {
	ids := make([]uint, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vu.AddTblViewerIDs(ids...)
}

// AddTblObjectIDs adds the "tbl_objects" edge to the Objects entity by IDs.
func (vu *VideosUpdate) AddTblObjectIDs(ids ...uint) *VideosUpdate {
	vu.mutation.AddTblObjectIDs(ids...)
	return vu
}

// AddTblObjects adds the "tbl_objects" edges to the Objects entity.
func (vu *VideosUpdate) AddTblObjects(o ...*Objects) *VideosUpdate {
	ids := make([]uint, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return vu.AddTblObjectIDs(ids...)
}

// Mutation returns the VideosMutation object of the builder.
func (vu *VideosUpdate) Mutation() *VideosMutation {
	return vu.mutation
}

// ClearTblComments clears all "tbl_comments" edges to the Comments entity.
func (vu *VideosUpdate) ClearTblComments() *VideosUpdate {
	vu.mutation.ClearTblComments()
	return vu
}

// RemoveTblCommentIDs removes the "tbl_comments" edge to Comments entities by IDs.
func (vu *VideosUpdate) RemoveTblCommentIDs(ids ...uint) *VideosUpdate {
	vu.mutation.RemoveTblCommentIDs(ids...)
	return vu
}

// RemoveTblComments removes "tbl_comments" edges to Comments entities.
func (vu *VideosUpdate) RemoveTblComments(c ...*Comments) *VideosUpdate {
	ids := make([]uint, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return vu.RemoveTblCommentIDs(ids...)
}

// ClearTblReactions clears all "tbl_reactions" edges to the Reactions entity.
func (vu *VideosUpdate) ClearTblReactions() *VideosUpdate {
	vu.mutation.ClearTblReactions()
	return vu
}

// RemoveTblReactionIDs removes the "tbl_reactions" edge to Reactions entities by IDs.
func (vu *VideosUpdate) RemoveTblReactionIDs(ids ...uint) *VideosUpdate {
	vu.mutation.RemoveTblReactionIDs(ids...)
	return vu
}

// RemoveTblReactions removes "tbl_reactions" edges to Reactions entities.
func (vu *VideosUpdate) RemoveTblReactions(r ...*Reactions) *VideosUpdate {
	ids := make([]uint, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return vu.RemoveTblReactionIDs(ids...)
}

// ClearTblViewers clears all "tbl_viewers" edges to the Viewers entity.
func (vu *VideosUpdate) ClearTblViewers() *VideosUpdate {
	vu.mutation.ClearTblViewers()
	return vu
}

// RemoveTblViewerIDs removes the "tbl_viewers" edge to Viewers entities by IDs.
func (vu *VideosUpdate) RemoveTblViewerIDs(ids ...uint) *VideosUpdate {
	vu.mutation.RemoveTblViewerIDs(ids...)
	return vu
}

// RemoveTblViewers removes "tbl_viewers" edges to Viewers entities.
func (vu *VideosUpdate) RemoveTblViewers(v ...*Viewers) *VideosUpdate {
	ids := make([]uint, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vu.RemoveTblViewerIDs(ids...)
}

// ClearTblObjects clears all "tbl_objects" edges to the Objects entity.
func (vu *VideosUpdate) ClearTblObjects() *VideosUpdate {
	vu.mutation.ClearTblObjects()
	return vu
}

// RemoveTblObjectIDs removes the "tbl_objects" edge to Objects entities by IDs.
func (vu *VideosUpdate) RemoveTblObjectIDs(ids ...uint) *VideosUpdate {
	vu.mutation.RemoveTblObjectIDs(ids...)
	return vu
}

// RemoveTblObjects removes "tbl_objects" edges to Objects entities.
func (vu *VideosUpdate) RemoveTblObjects(o ...*Objects) *VideosUpdate {
	ids := make([]uint, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return vu.RemoveTblObjectIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VideosUpdate) Save(ctx context.Context) (int, error) {
	vu.defaults()
	return withHooks(ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VideosUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VideosUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VideosUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vu *VideosUpdate) defaults() {
	if _, ok := vu.mutation.UpdatedAt(); !ok {
		v := videos.UpdateDefaultUpdatedAt()
		vu.mutation.SetUpdatedAt(v)
	}
}

func (vu *VideosUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(videos.Table, videos.Columns, sqlgraph.NewFieldSpec(videos.FieldID, field.TypeUint))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.Name(); ok {
		_spec.SetField(videos.FieldName, field.TypeString, value)
	}
	if value, ok := vu.mutation.Description(); ok {
		_spec.SetField(videos.FieldDescription, field.TypeString, value)
	}
	if vu.mutation.DescriptionCleared() {
		_spec.ClearField(videos.FieldDescription, field.TypeString)
	}
	if value, ok := vu.mutation.VideoURL(); ok {
		_spec.SetField(videos.FieldVideoURL, field.TypeString, value)
	}
	if value, ok := vu.mutation.Config(); ok {
		_spec.SetField(videos.FieldConfig, field.TypeString, value)
	}
	if value, ok := vu.mutation.PathResource(); ok {
		_spec.SetField(videos.FieldPathResource, field.TypeString, value)
	}
	if value, ok := vu.mutation.LevelSystem(); ok {
		_spec.SetField(videos.FieldLevelSystem, field.TypeString, value)
	}
	if value, ok := vu.mutation.Status(); ok {
		_spec.SetField(videos.FieldStatus, field.TypeString, value)
	}
	if value, ok := vu.mutation.Note(); ok {
		_spec.SetField(videos.FieldNote, field.TypeString, value)
	}
	if value, ok := vu.mutation.Assign(); ok {
		_spec.SetField(videos.FieldAssign, field.TypeString, value)
	}
	if value, ok := vu.mutation.Version(); ok {
		_spec.SetField(videos.FieldVersion, field.TypeUint, value)
	}
	if value, ok := vu.mutation.AddedVersion(); ok {
		_spec.AddField(videos.FieldVersion, field.TypeUint, value)
	}
	if value, ok := vu.mutation.Author(); ok {
		_spec.SetField(videos.FieldAuthor, field.TypeString, value)
	}
	if value, ok := vu.mutation.CreatedAt(); ok {
		_spec.SetField(videos.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := vu.mutation.UpdatedAt(); ok {
		_spec.SetField(videos.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vu.mutation.DeletedAt(); ok {
		_spec.SetField(videos.FieldDeletedAt, field.TypeTime, value)
	}
	if vu.mutation.DeletedAtCleared() {
		_spec.ClearField(videos.FieldDeletedAt, field.TypeTime)
	}
	if vu.mutation.TblCommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   videos.TblCommentsTable,
			Columns: []string{videos.TblCommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comments.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedTblCommentsIDs(); len(nodes) > 0 && !vu.mutation.TblCommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   videos.TblCommentsTable,
			Columns: []string{videos.TblCommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comments.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.TblCommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   videos.TblCommentsTable,
			Columns: []string{videos.TblCommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comments.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.TblReactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   videos.TblReactionsTable,
			Columns: []string{videos.TblReactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reactions.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedTblReactionsIDs(); len(nodes) > 0 && !vu.mutation.TblReactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   videos.TblReactionsTable,
			Columns: []string{videos.TblReactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reactions.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.TblReactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   videos.TblReactionsTable,
			Columns: []string{videos.TblReactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reactions.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.TblViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   videos.TblViewersTable,
			Columns: []string{videos.TblViewersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(viewers.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedTblViewersIDs(); len(nodes) > 0 && !vu.mutation.TblViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   videos.TblViewersTable,
			Columns: []string{videos.TblViewersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(viewers.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.TblViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   videos.TblViewersTable,
			Columns: []string{videos.TblViewersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(viewers.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.TblObjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   videos.TblObjectsTable,
			Columns: []string{videos.TblObjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(objects.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedTblObjectsIDs(); len(nodes) > 0 && !vu.mutation.TblObjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   videos.TblObjectsTable,
			Columns: []string{videos.TblObjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(objects.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.TblObjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   videos.TblObjectsTable,
			Columns: []string{videos.TblObjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(objects.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{videos.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// VideosUpdateOne is the builder for updating a single Videos entity.
type VideosUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VideosMutation
}

// SetName sets the "name" field.
func (vuo *VideosUpdateOne) SetName(s string) *VideosUpdateOne {
	vuo.mutation.SetName(s)
	return vuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (vuo *VideosUpdateOne) SetNillableName(s *string) *VideosUpdateOne {
	if s != nil {
		vuo.SetName(*s)
	}
	return vuo
}

// SetDescription sets the "description" field.
func (vuo *VideosUpdateOne) SetDescription(s string) *VideosUpdateOne {
	vuo.mutation.SetDescription(s)
	return vuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vuo *VideosUpdateOne) SetNillableDescription(s *string) *VideosUpdateOne {
	if s != nil {
		vuo.SetDescription(*s)
	}
	return vuo
}

// ClearDescription clears the value of the "description" field.
func (vuo *VideosUpdateOne) ClearDescription() *VideosUpdateOne {
	vuo.mutation.ClearDescription()
	return vuo
}

// SetVideoURL sets the "video_url" field.
func (vuo *VideosUpdateOne) SetVideoURL(s string) *VideosUpdateOne {
	vuo.mutation.SetVideoURL(s)
	return vuo
}

// SetNillableVideoURL sets the "video_url" field if the given value is not nil.
func (vuo *VideosUpdateOne) SetNillableVideoURL(s *string) *VideosUpdateOne {
	if s != nil {
		vuo.SetVideoURL(*s)
	}
	return vuo
}

// SetConfig sets the "config" field.
func (vuo *VideosUpdateOne) SetConfig(s string) *VideosUpdateOne {
	vuo.mutation.SetConfig(s)
	return vuo
}

// SetNillableConfig sets the "config" field if the given value is not nil.
func (vuo *VideosUpdateOne) SetNillableConfig(s *string) *VideosUpdateOne {
	if s != nil {
		vuo.SetConfig(*s)
	}
	return vuo
}

// SetPathResource sets the "path_resource" field.
func (vuo *VideosUpdateOne) SetPathResource(s string) *VideosUpdateOne {
	vuo.mutation.SetPathResource(s)
	return vuo
}

// SetNillablePathResource sets the "path_resource" field if the given value is not nil.
func (vuo *VideosUpdateOne) SetNillablePathResource(s *string) *VideosUpdateOne {
	if s != nil {
		vuo.SetPathResource(*s)
	}
	return vuo
}

// SetLevelSystem sets the "level_system" field.
func (vuo *VideosUpdateOne) SetLevelSystem(s string) *VideosUpdateOne {
	vuo.mutation.SetLevelSystem(s)
	return vuo
}

// SetNillableLevelSystem sets the "level_system" field if the given value is not nil.
func (vuo *VideosUpdateOne) SetNillableLevelSystem(s *string) *VideosUpdateOne {
	if s != nil {
		vuo.SetLevelSystem(*s)
	}
	return vuo
}

// SetStatus sets the "status" field.
func (vuo *VideosUpdateOne) SetStatus(s string) *VideosUpdateOne {
	vuo.mutation.SetStatus(s)
	return vuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (vuo *VideosUpdateOne) SetNillableStatus(s *string) *VideosUpdateOne {
	if s != nil {
		vuo.SetStatus(*s)
	}
	return vuo
}

// SetNote sets the "note" field.
func (vuo *VideosUpdateOne) SetNote(s string) *VideosUpdateOne {
	vuo.mutation.SetNote(s)
	return vuo
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (vuo *VideosUpdateOne) SetNillableNote(s *string) *VideosUpdateOne {
	if s != nil {
		vuo.SetNote(*s)
	}
	return vuo
}

// SetAssign sets the "assign" field.
func (vuo *VideosUpdateOne) SetAssign(s string) *VideosUpdateOne {
	vuo.mutation.SetAssign(s)
	return vuo
}

// SetNillableAssign sets the "assign" field if the given value is not nil.
func (vuo *VideosUpdateOne) SetNillableAssign(s *string) *VideosUpdateOne {
	if s != nil {
		vuo.SetAssign(*s)
	}
	return vuo
}

// SetVersion sets the "version" field.
func (vuo *VideosUpdateOne) SetVersion(u uint) *VideosUpdateOne {
	vuo.mutation.ResetVersion()
	vuo.mutation.SetVersion(u)
	return vuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (vuo *VideosUpdateOne) SetNillableVersion(u *uint) *VideosUpdateOne {
	if u != nil {
		vuo.SetVersion(*u)
	}
	return vuo
}

// AddVersion adds u to the "version" field.
func (vuo *VideosUpdateOne) AddVersion(u int) *VideosUpdateOne {
	vuo.mutation.AddVersion(u)
	return vuo
}

// SetAuthor sets the "Author" field.
func (vuo *VideosUpdateOne) SetAuthor(s string) *VideosUpdateOne {
	vuo.mutation.SetAuthor(s)
	return vuo
}

// SetNillableAuthor sets the "Author" field if the given value is not nil.
func (vuo *VideosUpdateOne) SetNillableAuthor(s *string) *VideosUpdateOne {
	if s != nil {
		vuo.SetAuthor(*s)
	}
	return vuo
}

// SetCreatedAt sets the "created_at" field.
func (vuo *VideosUpdateOne) SetCreatedAt(t time.Time) *VideosUpdateOne {
	vuo.mutation.SetCreatedAt(t)
	return vuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vuo *VideosUpdateOne) SetNillableCreatedAt(t *time.Time) *VideosUpdateOne {
	if t != nil {
		vuo.SetCreatedAt(*t)
	}
	return vuo
}

// SetUpdatedAt sets the "updated_at" field.
func (vuo *VideosUpdateOne) SetUpdatedAt(t time.Time) *VideosUpdateOne {
	vuo.mutation.SetUpdatedAt(t)
	return vuo
}

// SetDeletedAt sets the "deleted_at" field.
func (vuo *VideosUpdateOne) SetDeletedAt(t time.Time) *VideosUpdateOne {
	vuo.mutation.SetDeletedAt(t)
	return vuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vuo *VideosUpdateOne) SetNillableDeletedAt(t *time.Time) *VideosUpdateOne {
	if t != nil {
		vuo.SetDeletedAt(*t)
	}
	return vuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vuo *VideosUpdateOne) ClearDeletedAt() *VideosUpdateOne {
	vuo.mutation.ClearDeletedAt()
	return vuo
}

// AddTblCommentIDs adds the "tbl_comments" edge to the Comments entity by IDs.
func (vuo *VideosUpdateOne) AddTblCommentIDs(ids ...uint) *VideosUpdateOne {
	vuo.mutation.AddTblCommentIDs(ids...)
	return vuo
}

// AddTblComments adds the "tbl_comments" edges to the Comments entity.
func (vuo *VideosUpdateOne) AddTblComments(c ...*Comments) *VideosUpdateOne {
	ids := make([]uint, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return vuo.AddTblCommentIDs(ids...)
}

// AddTblReactionIDs adds the "tbl_reactions" edge to the Reactions entity by IDs.
func (vuo *VideosUpdateOne) AddTblReactionIDs(ids ...uint) *VideosUpdateOne {
	vuo.mutation.AddTblReactionIDs(ids...)
	return vuo
}

// AddTblReactions adds the "tbl_reactions" edges to the Reactions entity.
func (vuo *VideosUpdateOne) AddTblReactions(r ...*Reactions) *VideosUpdateOne {
	ids := make([]uint, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return vuo.AddTblReactionIDs(ids...)
}

// AddTblViewerIDs adds the "tbl_viewers" edge to the Viewers entity by IDs.
func (vuo *VideosUpdateOne) AddTblViewerIDs(ids ...uint) *VideosUpdateOne {
	vuo.mutation.AddTblViewerIDs(ids...)
	return vuo
}

// AddTblViewers adds the "tbl_viewers" edges to the Viewers entity.
func (vuo *VideosUpdateOne) AddTblViewers(v ...*Viewers) *VideosUpdateOne {
	ids := make([]uint, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vuo.AddTblViewerIDs(ids...)
}

// AddTblObjectIDs adds the "tbl_objects" edge to the Objects entity by IDs.
func (vuo *VideosUpdateOne) AddTblObjectIDs(ids ...uint) *VideosUpdateOne {
	vuo.mutation.AddTblObjectIDs(ids...)
	return vuo
}

// AddTblObjects adds the "tbl_objects" edges to the Objects entity.
func (vuo *VideosUpdateOne) AddTblObjects(o ...*Objects) *VideosUpdateOne {
	ids := make([]uint, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return vuo.AddTblObjectIDs(ids...)
}

// Mutation returns the VideosMutation object of the builder.
func (vuo *VideosUpdateOne) Mutation() *VideosMutation {
	return vuo.mutation
}

// ClearTblComments clears all "tbl_comments" edges to the Comments entity.
func (vuo *VideosUpdateOne) ClearTblComments() *VideosUpdateOne {
	vuo.mutation.ClearTblComments()
	return vuo
}

// RemoveTblCommentIDs removes the "tbl_comments" edge to Comments entities by IDs.
func (vuo *VideosUpdateOne) RemoveTblCommentIDs(ids ...uint) *VideosUpdateOne {
	vuo.mutation.RemoveTblCommentIDs(ids...)
	return vuo
}

// RemoveTblComments removes "tbl_comments" edges to Comments entities.
func (vuo *VideosUpdateOne) RemoveTblComments(c ...*Comments) *VideosUpdateOne {
	ids := make([]uint, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return vuo.RemoveTblCommentIDs(ids...)
}

// ClearTblReactions clears all "tbl_reactions" edges to the Reactions entity.
func (vuo *VideosUpdateOne) ClearTblReactions() *VideosUpdateOne {
	vuo.mutation.ClearTblReactions()
	return vuo
}

// RemoveTblReactionIDs removes the "tbl_reactions" edge to Reactions entities by IDs.
func (vuo *VideosUpdateOne) RemoveTblReactionIDs(ids ...uint) *VideosUpdateOne {
	vuo.mutation.RemoveTblReactionIDs(ids...)
	return vuo
}

// RemoveTblReactions removes "tbl_reactions" edges to Reactions entities.
func (vuo *VideosUpdateOne) RemoveTblReactions(r ...*Reactions) *VideosUpdateOne {
	ids := make([]uint, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return vuo.RemoveTblReactionIDs(ids...)
}

// ClearTblViewers clears all "tbl_viewers" edges to the Viewers entity.
func (vuo *VideosUpdateOne) ClearTblViewers() *VideosUpdateOne {
	vuo.mutation.ClearTblViewers()
	return vuo
}

// RemoveTblViewerIDs removes the "tbl_viewers" edge to Viewers entities by IDs.
func (vuo *VideosUpdateOne) RemoveTblViewerIDs(ids ...uint) *VideosUpdateOne {
	vuo.mutation.RemoveTblViewerIDs(ids...)
	return vuo
}

// RemoveTblViewers removes "tbl_viewers" edges to Viewers entities.
func (vuo *VideosUpdateOne) RemoveTblViewers(v ...*Viewers) *VideosUpdateOne {
	ids := make([]uint, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vuo.RemoveTblViewerIDs(ids...)
}

// ClearTblObjects clears all "tbl_objects" edges to the Objects entity.
func (vuo *VideosUpdateOne) ClearTblObjects() *VideosUpdateOne {
	vuo.mutation.ClearTblObjects()
	return vuo
}

// RemoveTblObjectIDs removes the "tbl_objects" edge to Objects entities by IDs.
func (vuo *VideosUpdateOne) RemoveTblObjectIDs(ids ...uint) *VideosUpdateOne {
	vuo.mutation.RemoveTblObjectIDs(ids...)
	return vuo
}

// RemoveTblObjects removes "tbl_objects" edges to Objects entities.
func (vuo *VideosUpdateOne) RemoveTblObjects(o ...*Objects) *VideosUpdateOne {
	ids := make([]uint, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return vuo.RemoveTblObjectIDs(ids...)
}

// Where appends a list predicates to the VideosUpdate builder.
func (vuo *VideosUpdateOne) Where(ps ...predicate.Videos) *VideosUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VideosUpdateOne) Select(field string, fields ...string) *VideosUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Videos entity.
func (vuo *VideosUpdateOne) Save(ctx context.Context) (*Videos, error) {
	vuo.defaults()
	return withHooks(ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VideosUpdateOne) SaveX(ctx context.Context) *Videos {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VideosUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VideosUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vuo *VideosUpdateOne) defaults() {
	if _, ok := vuo.mutation.UpdatedAt(); !ok {
		v := videos.UpdateDefaultUpdatedAt()
		vuo.mutation.SetUpdatedAt(v)
	}
}

func (vuo *VideosUpdateOne) sqlSave(ctx context.Context) (_node *Videos, err error) {
	_spec := sqlgraph.NewUpdateSpec(videos.Table, videos.Columns, sqlgraph.NewFieldSpec(videos.FieldID, field.TypeUint))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Videos.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, videos.FieldID)
		for _, f := range fields {
			if !videos.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != videos.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.Name(); ok {
		_spec.SetField(videos.FieldName, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Description(); ok {
		_spec.SetField(videos.FieldDescription, field.TypeString, value)
	}
	if vuo.mutation.DescriptionCleared() {
		_spec.ClearField(videos.FieldDescription, field.TypeString)
	}
	if value, ok := vuo.mutation.VideoURL(); ok {
		_spec.SetField(videos.FieldVideoURL, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Config(); ok {
		_spec.SetField(videos.FieldConfig, field.TypeString, value)
	}
	if value, ok := vuo.mutation.PathResource(); ok {
		_spec.SetField(videos.FieldPathResource, field.TypeString, value)
	}
	if value, ok := vuo.mutation.LevelSystem(); ok {
		_spec.SetField(videos.FieldLevelSystem, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Status(); ok {
		_spec.SetField(videos.FieldStatus, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Note(); ok {
		_spec.SetField(videos.FieldNote, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Assign(); ok {
		_spec.SetField(videos.FieldAssign, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Version(); ok {
		_spec.SetField(videos.FieldVersion, field.TypeUint, value)
	}
	if value, ok := vuo.mutation.AddedVersion(); ok {
		_spec.AddField(videos.FieldVersion, field.TypeUint, value)
	}
	if value, ok := vuo.mutation.Author(); ok {
		_spec.SetField(videos.FieldAuthor, field.TypeString, value)
	}
	if value, ok := vuo.mutation.CreatedAt(); ok {
		_spec.SetField(videos.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := vuo.mutation.UpdatedAt(); ok {
		_spec.SetField(videos.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vuo.mutation.DeletedAt(); ok {
		_spec.SetField(videos.FieldDeletedAt, field.TypeTime, value)
	}
	if vuo.mutation.DeletedAtCleared() {
		_spec.ClearField(videos.FieldDeletedAt, field.TypeTime)
	}
	if vuo.mutation.TblCommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   videos.TblCommentsTable,
			Columns: []string{videos.TblCommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comments.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedTblCommentsIDs(); len(nodes) > 0 && !vuo.mutation.TblCommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   videos.TblCommentsTable,
			Columns: []string{videos.TblCommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comments.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.TblCommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   videos.TblCommentsTable,
			Columns: []string{videos.TblCommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comments.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.TblReactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   videos.TblReactionsTable,
			Columns: []string{videos.TblReactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reactions.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedTblReactionsIDs(); len(nodes) > 0 && !vuo.mutation.TblReactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   videos.TblReactionsTable,
			Columns: []string{videos.TblReactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reactions.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.TblReactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   videos.TblReactionsTable,
			Columns: []string{videos.TblReactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reactions.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.TblViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   videos.TblViewersTable,
			Columns: []string{videos.TblViewersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(viewers.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedTblViewersIDs(); len(nodes) > 0 && !vuo.mutation.TblViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   videos.TblViewersTable,
			Columns: []string{videos.TblViewersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(viewers.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.TblViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   videos.TblViewersTable,
			Columns: []string{videos.TblViewersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(viewers.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.TblObjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   videos.TblObjectsTable,
			Columns: []string{videos.TblObjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(objects.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedTblObjectsIDs(); len(nodes) > 0 && !vuo.mutation.TblObjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   videos.TblObjectsTable,
			Columns: []string{videos.TblObjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(objects.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.TblObjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   videos.TblObjectsTable,
			Columns: []string{videos.TblObjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(objects.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Videos{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{videos.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}
