// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/glu/video-real-time-ranking/ent/predicate"
	"github.com/glu/video-real-time-ranking/ent/videos"
	"github.com/glu/video-real-time-ranking/ent/viewers"
)

// ViewersUpdate is the builder for updating Viewers entities.
type ViewersUpdate struct {
	config
	hooks    []Hook
	mutation *ViewersMutation
}

// Where appends a list predicates to the ViewersUpdate builder.
func (vu *ViewersUpdate) Where(ps ...predicate.Viewers) *ViewersUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetVideoID sets the "video_id" field.
func (vu *ViewersUpdate) SetVideoID(u uint) *ViewersUpdate {
	vu.mutation.SetVideoID(u)
	return vu
}

// SetNillableVideoID sets the "video_id" field if the given value is not nil.
func (vu *ViewersUpdate) SetNillableVideoID(u *uint) *ViewersUpdate {
	if u != nil {
		vu.SetVideoID(*u)
	}
	return vu
}

// SetNumber sets the "number" field.
func (vu *ViewersUpdate) SetNumber(i int) *ViewersUpdate {
	vu.mutation.ResetNumber()
	vu.mutation.SetNumber(i)
	return vu
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (vu *ViewersUpdate) SetNillableNumber(i *int) *ViewersUpdate {
	if i != nil {
		vu.SetNumber(*i)
	}
	return vu
}

// AddNumber adds i to the "number" field.
func (vu *ViewersUpdate) AddNumber(i int) *ViewersUpdate {
	vu.mutation.AddNumber(i)
	return vu
}

// SetTimePoint sets the "time_point" field.
func (vu *ViewersUpdate) SetTimePoint(f float64) *ViewersUpdate {
	vu.mutation.ResetTimePoint()
	vu.mutation.SetTimePoint(f)
	return vu
}

// SetNillableTimePoint sets the "time_point" field if the given value is not nil.
func (vu *ViewersUpdate) SetNillableTimePoint(f *float64) *ViewersUpdate {
	if f != nil {
		vu.SetTimePoint(*f)
	}
	return vu
}

// AddTimePoint adds f to the "time_point" field.
func (vu *ViewersUpdate) AddTimePoint(f float64) *ViewersUpdate {
	vu.mutation.AddTimePoint(f)
	return vu
}

// SetUpdatedAt sets the "updated_at" field.
func (vu *ViewersUpdate) SetUpdatedAt(t time.Time) *ViewersUpdate {
	vu.mutation.SetUpdatedAt(t)
	return vu
}

// SetDeletedAt sets the "deleted_at" field.
func (vu *ViewersUpdate) SetDeletedAt(t time.Time) *ViewersUpdate {
	vu.mutation.SetDeletedAt(t)
	return vu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vu *ViewersUpdate) SetNillableDeletedAt(t *time.Time) *ViewersUpdate {
	if t != nil {
		vu.SetDeletedAt(*t)
	}
	return vu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vu *ViewersUpdate) ClearDeletedAt() *ViewersUpdate {
	vu.mutation.ClearDeletedAt()
	return vu
}

// SetTblVideosID sets the "tbl_videos" edge to the Videos entity by ID.
func (vu *ViewersUpdate) SetTblVideosID(id uint) *ViewersUpdate {
	vu.mutation.SetTblVideosID(id)
	return vu
}

// SetTblVideos sets the "tbl_videos" edge to the Videos entity.
func (vu *ViewersUpdate) SetTblVideos(v *Videos) *ViewersUpdate {
	return vu.SetTblVideosID(v.ID)
}

// Mutation returns the ViewersMutation object of the builder.
func (vu *ViewersUpdate) Mutation() *ViewersMutation {
	return vu.mutation
}

// ClearTblVideos clears the "tbl_videos" edge to the Videos entity.
func (vu *ViewersUpdate) ClearTblVideos() *ViewersUpdate {
	vu.mutation.ClearTblVideos()
	return vu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *ViewersUpdate) Save(ctx context.Context) (int, error) {
	vu.defaults()
	return withHooks(ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *ViewersUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *ViewersUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *ViewersUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vu *ViewersUpdate) defaults() {
	if _, ok := vu.mutation.UpdatedAt(); !ok {
		v := viewers.UpdateDefaultUpdatedAt()
		vu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vu *ViewersUpdate) check() error {
	if v, ok := vu.mutation.VideoID(); ok {
		if err := viewers.VideoIDValidator(v); err != nil {
			return &ValidationError{Name: "video_id", err: fmt.Errorf(`ent: validator failed for field "Viewers.video_id": %w`, err)}
		}
	}
	if v, ok := vu.mutation.Number(); ok {
		if err := viewers.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`ent: validator failed for field "Viewers.number": %w`, err)}
		}
	}
	if v, ok := vu.mutation.TimePoint(); ok {
		if err := viewers.TimePointValidator(v); err != nil {
			return &ValidationError{Name: "time_point", err: fmt.Errorf(`ent: validator failed for field "Viewers.time_point": %w`, err)}
		}
	}
	if _, ok := vu.mutation.TblVideosID(); vu.mutation.TblVideosCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Viewers.tbl_videos"`)
	}
	return nil
}

func (vu *ViewersUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(viewers.Table, viewers.Columns, sqlgraph.NewFieldSpec(viewers.FieldID, field.TypeUint))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.Number(); ok {
		_spec.SetField(viewers.FieldNumber, field.TypeInt, value)
	}
	if value, ok := vu.mutation.AddedNumber(); ok {
		_spec.AddField(viewers.FieldNumber, field.TypeInt, value)
	}
	if value, ok := vu.mutation.TimePoint(); ok {
		_spec.SetField(viewers.FieldTimePoint, field.TypeFloat64, value)
	}
	if value, ok := vu.mutation.AddedTimePoint(); ok {
		_spec.AddField(viewers.FieldTimePoint, field.TypeFloat64, value)
	}
	if value, ok := vu.mutation.UpdatedAt(); ok {
		_spec.SetField(viewers.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vu.mutation.DeletedAt(); ok {
		_spec.SetField(viewers.FieldDeletedAt, field.TypeTime, value)
	}
	if vu.mutation.DeletedAtCleared() {
		_spec.ClearField(viewers.FieldDeletedAt, field.TypeTime)
	}
	if vu.mutation.TblVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   viewers.TblVideosTable,
			Columns: []string{viewers.TblVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videos.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.TblVideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   viewers.TblVideosTable,
			Columns: []string{viewers.TblVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videos.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{viewers.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// ViewersUpdateOne is the builder for updating a single Viewers entity.
type ViewersUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ViewersMutation
}

// SetVideoID sets the "video_id" field.
func (vuo *ViewersUpdateOne) SetVideoID(u uint) *ViewersUpdateOne {
	vuo.mutation.SetVideoID(u)
	return vuo
}

// SetNillableVideoID sets the "video_id" field if the given value is not nil.
func (vuo *ViewersUpdateOne) SetNillableVideoID(u *uint) *ViewersUpdateOne {
	if u != nil {
		vuo.SetVideoID(*u)
	}
	return vuo
}

// SetNumber sets the "number" field.
func (vuo *ViewersUpdateOne) SetNumber(i int) *ViewersUpdateOne {
	vuo.mutation.ResetNumber()
	vuo.mutation.SetNumber(i)
	return vuo
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (vuo *ViewersUpdateOne) SetNillableNumber(i *int) *ViewersUpdateOne {
	if i != nil {
		vuo.SetNumber(*i)
	}
	return vuo
}

// AddNumber adds i to the "number" field.
func (vuo *ViewersUpdateOne) AddNumber(i int) *ViewersUpdateOne {
	vuo.mutation.AddNumber(i)
	return vuo
}

// SetTimePoint sets the "time_point" field.
func (vuo *ViewersUpdateOne) SetTimePoint(f float64) *ViewersUpdateOne {
	vuo.mutation.ResetTimePoint()
	vuo.mutation.SetTimePoint(f)
	return vuo
}

// SetNillableTimePoint sets the "time_point" field if the given value is not nil.
func (vuo *ViewersUpdateOne) SetNillableTimePoint(f *float64) *ViewersUpdateOne {
	if f != nil {
		vuo.SetTimePoint(*f)
	}
	return vuo
}

// AddTimePoint adds f to the "time_point" field.
func (vuo *ViewersUpdateOne) AddTimePoint(f float64) *ViewersUpdateOne {
	vuo.mutation.AddTimePoint(f)
	return vuo
}

// SetUpdatedAt sets the "updated_at" field.
func (vuo *ViewersUpdateOne) SetUpdatedAt(t time.Time) *ViewersUpdateOne {
	vuo.mutation.SetUpdatedAt(t)
	return vuo
}

// SetDeletedAt sets the "deleted_at" field.
func (vuo *ViewersUpdateOne) SetDeletedAt(t time.Time) *ViewersUpdateOne {
	vuo.mutation.SetDeletedAt(t)
	return vuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vuo *ViewersUpdateOne) SetNillableDeletedAt(t *time.Time) *ViewersUpdateOne {
	if t != nil {
		vuo.SetDeletedAt(*t)
	}
	return vuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vuo *ViewersUpdateOne) ClearDeletedAt() *ViewersUpdateOne {
	vuo.mutation.ClearDeletedAt()
	return vuo
}

// SetTblVideosID sets the "tbl_videos" edge to the Videos entity by ID.
func (vuo *ViewersUpdateOne) SetTblVideosID(id uint) *ViewersUpdateOne {
	vuo.mutation.SetTblVideosID(id)
	return vuo
}

// SetTblVideos sets the "tbl_videos" edge to the Videos entity.
func (vuo *ViewersUpdateOne) SetTblVideos(v *Videos) *ViewersUpdateOne {
	return vuo.SetTblVideosID(v.ID)
}

// Mutation returns the ViewersMutation object of the builder.
func (vuo *ViewersUpdateOne) Mutation() *ViewersMutation {
	return vuo.mutation
}

// ClearTblVideos clears the "tbl_videos" edge to the Videos entity.
func (vuo *ViewersUpdateOne) ClearTblVideos() *ViewersUpdateOne {
	vuo.mutation.ClearTblVideos()
	return vuo
}

// Where appends a list predicates to the ViewersUpdate builder.
func (vuo *ViewersUpdateOne) Where(ps ...predicate.Viewers) *ViewersUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *ViewersUpdateOne) Select(field string, fields ...string) *ViewersUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Viewers entity.
func (vuo *ViewersUpdateOne) Save(ctx context.Context) (*Viewers, error) {
	vuo.defaults()
	return withHooks(ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *ViewersUpdateOne) SaveX(ctx context.Context) *Viewers {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *ViewersUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *ViewersUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vuo *ViewersUpdateOne) defaults() {
	if _, ok := vuo.mutation.UpdatedAt(); !ok {
		v := viewers.UpdateDefaultUpdatedAt()
		vuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vuo *ViewersUpdateOne) check() error {
	if v, ok := vuo.mutation.VideoID(); ok {
		if err := viewers.VideoIDValidator(v); err != nil {
			return &ValidationError{Name: "video_id", err: fmt.Errorf(`ent: validator failed for field "Viewers.video_id": %w`, err)}
		}
	}
	if v, ok := vuo.mutation.Number(); ok {
		if err := viewers.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`ent: validator failed for field "Viewers.number": %w`, err)}
		}
	}
	if v, ok := vuo.mutation.TimePoint(); ok {
		if err := viewers.TimePointValidator(v); err != nil {
			return &ValidationError{Name: "time_point", err: fmt.Errorf(`ent: validator failed for field "Viewers.time_point": %w`, err)}
		}
	}
	if _, ok := vuo.mutation.TblVideosID(); vuo.mutation.TblVideosCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Viewers.tbl_videos"`)
	}
	return nil
}

func (vuo *ViewersUpdateOne) sqlSave(ctx context.Context) (_node *Viewers, err error) {
	if err := vuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(viewers.Table, viewers.Columns, sqlgraph.NewFieldSpec(viewers.FieldID, field.TypeUint))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Viewers.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, viewers.FieldID)
		for _, f := range fields {
			if !viewers.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != viewers.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.Number(); ok {
		_spec.SetField(viewers.FieldNumber, field.TypeInt, value)
	}
	if value, ok := vuo.mutation.AddedNumber(); ok {
		_spec.AddField(viewers.FieldNumber, field.TypeInt, value)
	}
	if value, ok := vuo.mutation.TimePoint(); ok {
		_spec.SetField(viewers.FieldTimePoint, field.TypeFloat64, value)
	}
	if value, ok := vuo.mutation.AddedTimePoint(); ok {
		_spec.AddField(viewers.FieldTimePoint, field.TypeFloat64, value)
	}
	if value, ok := vuo.mutation.UpdatedAt(); ok {
		_spec.SetField(viewers.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vuo.mutation.DeletedAt(); ok {
		_spec.SetField(viewers.FieldDeletedAt, field.TypeTime, value)
	}
	if vuo.mutation.DeletedAtCleared() {
		_spec.ClearField(viewers.FieldDeletedAt, field.TypeTime)
	}
	if vuo.mutation.TblVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   viewers.TblVideosTable,
			Columns: []string{viewers.TblVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videos.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.TblVideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   viewers.TblVideosTable,
			Columns: []string{viewers.TblVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videos.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Viewers{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{viewers.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}
