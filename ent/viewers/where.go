// Code generated by ent, DO NOT EDIT.

package viewers

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/glu/video-real-time-ranking/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint) predicate.Viewers {
	return predicate.Viewers(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint) predicate.Viewers {
	return predicate.Viewers(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint) predicate.Viewers {
	return predicate.Viewers(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint) predicate.Viewers {
	return predicate.Viewers(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint) predicate.Viewers {
	return predicate.Viewers(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint) predicate.Viewers {
	return predicate.Viewers(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint) predicate.Viewers {
	return predicate.Viewers(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint) predicate.Viewers {
	return predicate.Viewers(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint) predicate.Viewers {
	return predicate.Viewers(sql.FieldLTE(FieldID, id))
}

// VideoID applies equality check predicate on the "video_id" field. It's identical to VideoIDEQ.
func VideoID(v uint) predicate.Viewers {
	return predicate.Viewers(sql.FieldEQ(FieldVideoID, v))
}

// Number applies equality check predicate on the "number" field. It's identical to NumberEQ.
func Number(v int) predicate.Viewers {
	return predicate.Viewers(sql.FieldEQ(FieldNumber, v))
}

// TimePoint applies equality check predicate on the "time_point" field. It's identical to TimePointEQ.
func TimePoint(v float64) predicate.Viewers {
	return predicate.Viewers(sql.FieldEQ(FieldTimePoint, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Viewers {
	return predicate.Viewers(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Viewers {
	return predicate.Viewers(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Viewers {
	return predicate.Viewers(sql.FieldEQ(FieldDeletedAt, v))
}

// VideoIDEQ applies the EQ predicate on the "video_id" field.
func VideoIDEQ(v uint) predicate.Viewers {
	return predicate.Viewers(sql.FieldEQ(FieldVideoID, v))
}

// VideoIDNEQ applies the NEQ predicate on the "video_id" field.
func VideoIDNEQ(v uint) predicate.Viewers {
	return predicate.Viewers(sql.FieldNEQ(FieldVideoID, v))
}

// VideoIDIn applies the In predicate on the "video_id" field.
func VideoIDIn(vs ...uint) predicate.Viewers {
	return predicate.Viewers(sql.FieldIn(FieldVideoID, vs...))
}

// VideoIDNotIn applies the NotIn predicate on the "video_id" field.
func VideoIDNotIn(vs ...uint) predicate.Viewers {
	return predicate.Viewers(sql.FieldNotIn(FieldVideoID, vs...))
}

// NumberEQ applies the EQ predicate on the "number" field.
func NumberEQ(v int) predicate.Viewers {
	return predicate.Viewers(sql.FieldEQ(FieldNumber, v))
}

// NumberNEQ applies the NEQ predicate on the "number" field.
func NumberNEQ(v int) predicate.Viewers {
	return predicate.Viewers(sql.FieldNEQ(FieldNumber, v))
}

// NumberIn applies the In predicate on the "number" field.
func NumberIn(vs ...int) predicate.Viewers {
	return predicate.Viewers(sql.FieldIn(FieldNumber, vs...))
}

// NumberNotIn applies the NotIn predicate on the "number" field.
func NumberNotIn(vs ...int) predicate.Viewers {
	return predicate.Viewers(sql.FieldNotIn(FieldNumber, vs...))
}

// NumberGT applies the GT predicate on the "number" field.
func NumberGT(v int) predicate.Viewers {
	return predicate.Viewers(sql.FieldGT(FieldNumber, v))
}

// NumberGTE applies the GTE predicate on the "number" field.
func NumberGTE(v int) predicate.Viewers {
	return predicate.Viewers(sql.FieldGTE(FieldNumber, v))
}

// NumberLT applies the LT predicate on the "number" field.
func NumberLT(v int) predicate.Viewers {
	return predicate.Viewers(sql.FieldLT(FieldNumber, v))
}

// NumberLTE applies the LTE predicate on the "number" field.
func NumberLTE(v int) predicate.Viewers {
	return predicate.Viewers(sql.FieldLTE(FieldNumber, v))
}

// TimePointEQ applies the EQ predicate on the "time_point" field.
func TimePointEQ(v float64) predicate.Viewers {
	return predicate.Viewers(sql.FieldEQ(FieldTimePoint, v))
}

// TimePointNEQ applies the NEQ predicate on the "time_point" field.
func TimePointNEQ(v float64) predicate.Viewers {
	return predicate.Viewers(sql.FieldNEQ(FieldTimePoint, v))
}

// TimePointIn applies the In predicate on the "time_point" field.
func TimePointIn(vs ...float64) predicate.Viewers {
	return predicate.Viewers(sql.FieldIn(FieldTimePoint, vs...))
}

// TimePointNotIn applies the NotIn predicate on the "time_point" field.
func TimePointNotIn(vs ...float64) predicate.Viewers {
	return predicate.Viewers(sql.FieldNotIn(FieldTimePoint, vs...))
}

// TimePointGT applies the GT predicate on the "time_point" field.
func TimePointGT(v float64) predicate.Viewers {
	return predicate.Viewers(sql.FieldGT(FieldTimePoint, v))
}

// TimePointGTE applies the GTE predicate on the "time_point" field.
func TimePointGTE(v float64) predicate.Viewers {
	return predicate.Viewers(sql.FieldGTE(FieldTimePoint, v))
}

// TimePointLT applies the LT predicate on the "time_point" field.
func TimePointLT(v float64) predicate.Viewers {
	return predicate.Viewers(sql.FieldLT(FieldTimePoint, v))
}

// TimePointLTE applies the LTE predicate on the "time_point" field.
func TimePointLTE(v float64) predicate.Viewers {
	return predicate.Viewers(sql.FieldLTE(FieldTimePoint, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Viewers {
	return predicate.Viewers(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Viewers {
	return predicate.Viewers(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Viewers {
	return predicate.Viewers(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Viewers {
	return predicate.Viewers(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Viewers {
	return predicate.Viewers(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Viewers {
	return predicate.Viewers(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Viewers {
	return predicate.Viewers(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Viewers {
	return predicate.Viewers(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Viewers {
	return predicate.Viewers(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Viewers {
	return predicate.Viewers(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Viewers {
	return predicate.Viewers(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Viewers {
	return predicate.Viewers(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Viewers {
	return predicate.Viewers(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Viewers {
	return predicate.Viewers(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Viewers {
	return predicate.Viewers(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Viewers {
	return predicate.Viewers(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Viewers {
	return predicate.Viewers(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Viewers {
	return predicate.Viewers(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Viewers {
	return predicate.Viewers(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Viewers {
	return predicate.Viewers(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Viewers {
	return predicate.Viewers(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Viewers {
	return predicate.Viewers(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Viewers {
	return predicate.Viewers(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Viewers {
	return predicate.Viewers(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Viewers {
	return predicate.Viewers(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Viewers {
	return predicate.Viewers(sql.FieldNotNull(FieldDeletedAt))
}

// HasTblVideos applies the HasEdge predicate on the "tbl_videos" edge.
func HasTblVideos() predicate.Viewers {
	return predicate.Viewers(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TblVideosTable, TblVideosColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTblVideosWith applies the HasEdge predicate on the "tbl_videos" edge with a given conditions (other predicates).
func HasTblVideosWith(preds ...predicate.Videos) predicate.Viewers {
	return predicate.Viewers(func(s *sql.Selector) {
		step := newTblVideosStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Viewers) predicate.Viewers {
	return predicate.Viewers(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Viewers) predicate.Viewers {
	return predicate.Viewers(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Viewers) predicate.Viewers {
	return predicate.Viewers(func(s *sql.Selector) {
		p(s.Not())
	})
}
