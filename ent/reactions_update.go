// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/glu/video-real-time-ranking/ent/predicate"
	"github.com/glu/video-real-time-ranking/ent/reactions"
	"github.com/glu/video-real-time-ranking/ent/videos"
)

// ReactionsUpdate is the builder for updating Reactions entities.
type ReactionsUpdate struct {
	config
	hooks    []Hook
	mutation *ReactionsMutation
}

// Where appends a list predicates to the ReactionsUpdate builder.
func (ru *ReactionsUpdate) Where(ps ...predicate.Reactions) *ReactionsUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetVideoID sets the "video_id" field.
func (ru *ReactionsUpdate) SetVideoID(u uint) *ReactionsUpdate {
	ru.mutation.SetVideoID(u)
	return ru
}

// SetNillableVideoID sets the "video_id" field if the given value is not nil.
func (ru *ReactionsUpdate) SetNillableVideoID(u *uint) *ReactionsUpdate {
	if u != nil {
		ru.SetVideoID(*u)
	}
	return ru
}

// SetDescription sets the "description" field.
func (ru *ReactionsUpdate) SetDescription(s string) *ReactionsUpdate {
	ru.mutation.SetDescription(s)
	return ru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ru *ReactionsUpdate) SetNillableDescription(s *string) *ReactionsUpdate {
	if s != nil {
		ru.SetDescription(*s)
	}
	return ru
}

// ClearDescription clears the value of the "description" field.
func (ru *ReactionsUpdate) ClearDescription() *ReactionsUpdate {
	ru.mutation.ClearDescription()
	return ru
}

// SetName sets the "name" field.
func (ru *ReactionsUpdate) SetName(s string) *ReactionsUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ru *ReactionsUpdate) SetNillableName(s *string) *ReactionsUpdate {
	if s != nil {
		ru.SetName(*s)
	}
	return ru
}

// SetNumber sets the "number" field.
func (ru *ReactionsUpdate) SetNumber(i int) *ReactionsUpdate {
	ru.mutation.ResetNumber()
	ru.mutation.SetNumber(i)
	return ru
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (ru *ReactionsUpdate) SetNillableNumber(i *int) *ReactionsUpdate {
	if i != nil {
		ru.SetNumber(*i)
	}
	return ru
}

// AddNumber adds i to the "number" field.
func (ru *ReactionsUpdate) AddNumber(i int) *ReactionsUpdate {
	ru.mutation.AddNumber(i)
	return ru
}

// SetTimePoint sets the "time_point" field.
func (ru *ReactionsUpdate) SetTimePoint(f float64) *ReactionsUpdate {
	ru.mutation.ResetTimePoint()
	ru.mutation.SetTimePoint(f)
	return ru
}

// SetNillableTimePoint sets the "time_point" field if the given value is not nil.
func (ru *ReactionsUpdate) SetNillableTimePoint(f *float64) *ReactionsUpdate {
	if f != nil {
		ru.SetTimePoint(*f)
	}
	return ru
}

// AddTimePoint adds f to the "time_point" field.
func (ru *ReactionsUpdate) AddTimePoint(f float64) *ReactionsUpdate {
	ru.mutation.AddTimePoint(f)
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *ReactionsUpdate) SetUpdatedAt(t time.Time) *ReactionsUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetDeletedAt sets the "deleted_at" field.
func (ru *ReactionsUpdate) SetDeletedAt(t time.Time) *ReactionsUpdate {
	ru.mutation.SetDeletedAt(t)
	return ru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ru *ReactionsUpdate) SetNillableDeletedAt(t *time.Time) *ReactionsUpdate {
	if t != nil {
		ru.SetDeletedAt(*t)
	}
	return ru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ru *ReactionsUpdate) ClearDeletedAt() *ReactionsUpdate {
	ru.mutation.ClearDeletedAt()
	return ru
}

// SetTblVideosID sets the "tbl_videos" edge to the Videos entity by ID.
func (ru *ReactionsUpdate) SetTblVideosID(id uint) *ReactionsUpdate {
	ru.mutation.SetTblVideosID(id)
	return ru
}

// SetTblVideos sets the "tbl_videos" edge to the Videos entity.
func (ru *ReactionsUpdate) SetTblVideos(v *Videos) *ReactionsUpdate {
	return ru.SetTblVideosID(v.ID)
}

// Mutation returns the ReactionsMutation object of the builder.
func (ru *ReactionsUpdate) Mutation() *ReactionsMutation {
	return ru.mutation
}

// ClearTblVideos clears the "tbl_videos" edge to the Videos entity.
func (ru *ReactionsUpdate) ClearTblVideos() *ReactionsUpdate {
	ru.mutation.ClearTblVideos()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ReactionsUpdate) Save(ctx context.Context) (int, error) {
	ru.defaults()
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ReactionsUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ReactionsUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ReactionsUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *ReactionsUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := reactions.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *ReactionsUpdate) check() error {
	if v, ok := ru.mutation.Name(); ok {
		if err := reactions.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Reactions.name": %w`, err)}
		}
	}
	if v, ok := ru.mutation.Number(); ok {
		if err := reactions.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`ent: validator failed for field "Reactions.number": %w`, err)}
		}
	}
	if v, ok := ru.mutation.TimePoint(); ok {
		if err := reactions.TimePointValidator(v); err != nil {
			return &ValidationError{Name: "time_point", err: fmt.Errorf(`ent: validator failed for field "Reactions.time_point": %w`, err)}
		}
	}
	if _, ok := ru.mutation.TblVideosID(); ru.mutation.TblVideosCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Reactions.tbl_videos"`)
	}
	return nil
}

func (ru *ReactionsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(reactions.Table, reactions.Columns, sqlgraph.NewFieldSpec(reactions.FieldID, field.TypeUint))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Description(); ok {
		_spec.SetField(reactions.FieldDescription, field.TypeString, value)
	}
	if ru.mutation.DescriptionCleared() {
		_spec.ClearField(reactions.FieldDescription, field.TypeString)
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(reactions.FieldName, field.TypeString, value)
	}
	if value, ok := ru.mutation.Number(); ok {
		_spec.SetField(reactions.FieldNumber, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedNumber(); ok {
		_spec.AddField(reactions.FieldNumber, field.TypeInt, value)
	}
	if value, ok := ru.mutation.TimePoint(); ok {
		_spec.SetField(reactions.FieldTimePoint, field.TypeFloat64, value)
	}
	if value, ok := ru.mutation.AddedTimePoint(); ok {
		_spec.AddField(reactions.FieldTimePoint, field.TypeFloat64, value)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(reactions.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.DeletedAt(); ok {
		_spec.SetField(reactions.FieldDeletedAt, field.TypeTime, value)
	}
	if ru.mutation.DeletedAtCleared() {
		_spec.ClearField(reactions.FieldDeletedAt, field.TypeTime)
	}
	if ru.mutation.TblVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reactions.TblVideosTable,
			Columns: []string{reactions.TblVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videos.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.TblVideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reactions.TblVideosTable,
			Columns: []string{reactions.TblVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videos.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reactions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// ReactionsUpdateOne is the builder for updating a single Reactions entity.
type ReactionsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReactionsMutation
}

// SetVideoID sets the "video_id" field.
func (ruo *ReactionsUpdateOne) SetVideoID(u uint) *ReactionsUpdateOne {
	ruo.mutation.SetVideoID(u)
	return ruo
}

// SetNillableVideoID sets the "video_id" field if the given value is not nil.
func (ruo *ReactionsUpdateOne) SetNillableVideoID(u *uint) *ReactionsUpdateOne {
	if u != nil {
		ruo.SetVideoID(*u)
	}
	return ruo
}

// SetDescription sets the "description" field.
func (ruo *ReactionsUpdateOne) SetDescription(s string) *ReactionsUpdateOne {
	ruo.mutation.SetDescription(s)
	return ruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ruo *ReactionsUpdateOne) SetNillableDescription(s *string) *ReactionsUpdateOne {
	if s != nil {
		ruo.SetDescription(*s)
	}
	return ruo
}

// ClearDescription clears the value of the "description" field.
func (ruo *ReactionsUpdateOne) ClearDescription() *ReactionsUpdateOne {
	ruo.mutation.ClearDescription()
	return ruo
}

// SetName sets the "name" field.
func (ruo *ReactionsUpdateOne) SetName(s string) *ReactionsUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ruo *ReactionsUpdateOne) SetNillableName(s *string) *ReactionsUpdateOne {
	if s != nil {
		ruo.SetName(*s)
	}
	return ruo
}

// SetNumber sets the "number" field.
func (ruo *ReactionsUpdateOne) SetNumber(i int) *ReactionsUpdateOne {
	ruo.mutation.ResetNumber()
	ruo.mutation.SetNumber(i)
	return ruo
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (ruo *ReactionsUpdateOne) SetNillableNumber(i *int) *ReactionsUpdateOne {
	if i != nil {
		ruo.SetNumber(*i)
	}
	return ruo
}

// AddNumber adds i to the "number" field.
func (ruo *ReactionsUpdateOne) AddNumber(i int) *ReactionsUpdateOne {
	ruo.mutation.AddNumber(i)
	return ruo
}

// SetTimePoint sets the "time_point" field.
func (ruo *ReactionsUpdateOne) SetTimePoint(f float64) *ReactionsUpdateOne {
	ruo.mutation.ResetTimePoint()
	ruo.mutation.SetTimePoint(f)
	return ruo
}

// SetNillableTimePoint sets the "time_point" field if the given value is not nil.
func (ruo *ReactionsUpdateOne) SetNillableTimePoint(f *float64) *ReactionsUpdateOne {
	if f != nil {
		ruo.SetTimePoint(*f)
	}
	return ruo
}

// AddTimePoint adds f to the "time_point" field.
func (ruo *ReactionsUpdateOne) AddTimePoint(f float64) *ReactionsUpdateOne {
	ruo.mutation.AddTimePoint(f)
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *ReactionsUpdateOne) SetUpdatedAt(t time.Time) *ReactionsUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetDeletedAt sets the "deleted_at" field.
func (ruo *ReactionsUpdateOne) SetDeletedAt(t time.Time) *ReactionsUpdateOne {
	ruo.mutation.SetDeletedAt(t)
	return ruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ruo *ReactionsUpdateOne) SetNillableDeletedAt(t *time.Time) *ReactionsUpdateOne {
	if t != nil {
		ruo.SetDeletedAt(*t)
	}
	return ruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ruo *ReactionsUpdateOne) ClearDeletedAt() *ReactionsUpdateOne {
	ruo.mutation.ClearDeletedAt()
	return ruo
}

// SetTblVideosID sets the "tbl_videos" edge to the Videos entity by ID.
func (ruo *ReactionsUpdateOne) SetTblVideosID(id uint) *ReactionsUpdateOne {
	ruo.mutation.SetTblVideosID(id)
	return ruo
}

// SetTblVideos sets the "tbl_videos" edge to the Videos entity.
func (ruo *ReactionsUpdateOne) SetTblVideos(v *Videos) *ReactionsUpdateOne {
	return ruo.SetTblVideosID(v.ID)
}

// Mutation returns the ReactionsMutation object of the builder.
func (ruo *ReactionsUpdateOne) Mutation() *ReactionsMutation {
	return ruo.mutation
}

// ClearTblVideos clears the "tbl_videos" edge to the Videos entity.
func (ruo *ReactionsUpdateOne) ClearTblVideos() *ReactionsUpdateOne {
	ruo.mutation.ClearTblVideos()
	return ruo
}

// Where appends a list predicates to the ReactionsUpdate builder.
func (ruo *ReactionsUpdateOne) Where(ps ...predicate.Reactions) *ReactionsUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ReactionsUpdateOne) Select(field string, fields ...string) *ReactionsUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Reactions entity.
func (ruo *ReactionsUpdateOne) Save(ctx context.Context) (*Reactions, error) {
	ruo.defaults()
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ReactionsUpdateOne) SaveX(ctx context.Context) *Reactions {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ReactionsUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ReactionsUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *ReactionsUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := reactions.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *ReactionsUpdateOne) check() error {
	if v, ok := ruo.mutation.Name(); ok {
		if err := reactions.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Reactions.name": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.Number(); ok {
		if err := reactions.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`ent: validator failed for field "Reactions.number": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.TimePoint(); ok {
		if err := reactions.TimePointValidator(v); err != nil {
			return &ValidationError{Name: "time_point", err: fmt.Errorf(`ent: validator failed for field "Reactions.time_point": %w`, err)}
		}
	}
	if _, ok := ruo.mutation.TblVideosID(); ruo.mutation.TblVideosCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Reactions.tbl_videos"`)
	}
	return nil
}

func (ruo *ReactionsUpdateOne) sqlSave(ctx context.Context) (_node *Reactions, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(reactions.Table, reactions.Columns, sqlgraph.NewFieldSpec(reactions.FieldID, field.TypeUint))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Reactions.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, reactions.FieldID)
		for _, f := range fields {
			if !reactions.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != reactions.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Description(); ok {
		_spec.SetField(reactions.FieldDescription, field.TypeString, value)
	}
	if ruo.mutation.DescriptionCleared() {
		_spec.ClearField(reactions.FieldDescription, field.TypeString)
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(reactions.FieldName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Number(); ok {
		_spec.SetField(reactions.FieldNumber, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedNumber(); ok {
		_spec.AddField(reactions.FieldNumber, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.TimePoint(); ok {
		_spec.SetField(reactions.FieldTimePoint, field.TypeFloat64, value)
	}
	if value, ok := ruo.mutation.AddedTimePoint(); ok {
		_spec.AddField(reactions.FieldTimePoint, field.TypeFloat64, value)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(reactions.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.DeletedAt(); ok {
		_spec.SetField(reactions.FieldDeletedAt, field.TypeTime, value)
	}
	if ruo.mutation.DeletedAtCleared() {
		_spec.ClearField(reactions.FieldDeletedAt, field.TypeTime)
	}
	if ruo.mutation.TblVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reactions.TblVideosTable,
			Columns: []string{reactions.TblVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videos.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.TblVideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reactions.TblVideosTable,
			Columns: []string{reactions.TblVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videos.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Reactions{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reactions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
