// Code generated by ent, DO NOT EDIT.

package objects

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the objects type in the database.
	Label = "objects"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldVideoID holds the string denoting the video_id field in the database.
	FieldVideoID = "video_id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCoordinateX holds the string denoting the coordinate_x field in the database.
	FieldCoordinateX = "coordinate_x"
	// FieldCoordinateY holds the string denoting the coordinate_y field in the database.
	FieldCoordinateY = "coordinate_y"
	// FieldLength holds the string denoting the length field in the database.
	FieldLength = "length"
	// FieldWidth holds the string denoting the width field in the database.
	FieldWidth = "width"
	// FieldOrder holds the string denoting the order field in the database.
	FieldOrder = "order"
	// FieldTimeStart holds the string denoting the time_start field in the database.
	FieldTimeStart = "time_start"
	// FieldTimeEnd holds the string denoting the time_end field in the database.
	FieldTimeEnd = "time_end"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldTouchVector holds the string denoting the touch_vector field in the database.
	FieldTouchVector = "touch_vector"
	// FieldMarkerName holds the string denoting the marker_name field in the database.
	FieldMarkerName = "marker_name"
	// FieldTimePoint holds the string denoting the time_point field in the database.
	FieldTimePoint = "time_point"
	// EdgeTblVideos holds the string denoting the tbl_videos edge name in mutations.
	EdgeTblVideos = "tbl_videos"
	// Table holds the table name of the objects in the database.
	Table = "tbl_objects"
	// TblVideosTable is the table that holds the tbl_videos relation/edge.
	TblVideosTable = "tbl_objects"
	// TblVideosInverseTable is the table name for the Videos entity.
	// It exists in this package in order to avoid circular dependency with the "videos" package.
	TblVideosInverseTable = "tbl_videos"
	// TblVideosColumn is the table column denoting the tbl_videos relation/edge.
	TblVideosColumn = "video_id"
)

// Columns holds all SQL columns for objects fields.
var Columns = []string{
	FieldID,
	FieldVideoID,
	FieldDescription,
	FieldCoordinateX,
	FieldCoordinateY,
	FieldLength,
	FieldWidth,
	FieldOrder,
	FieldTimeStart,
	FieldTimeEnd,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldTouchVector,
	FieldMarkerName,
	FieldTimePoint,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultDescription holds the default value on creation for the "description" field.
	DefaultDescription string
	// CoordinateXValidator is a validator for the "coordinate_x" field. It is called by the builders before save.
	CoordinateXValidator func(int) error
	// CoordinateYValidator is a validator for the "coordinate_y" field. It is called by the builders before save.
	CoordinateYValidator func(int) error
	// LengthValidator is a validator for the "length" field. It is called by the builders before save.
	LengthValidator func(int) error
	// WidthValidator is a validator for the "width" field. It is called by the builders before save.
	WidthValidator func(int) error
	// OrderValidator is a validator for the "order" field. It is called by the builders before save.
	OrderValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultTouchVector holds the default value on creation for the "touch_vector" field.
	DefaultTouchVector string
	// DefaultMarkerName holds the default value on creation for the "marker_name" field.
	DefaultMarkerName string
	// DefaultTimePoint holds the default value on creation for the "time_point" field.
	DefaultTimePoint float64
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(uint) error
)

// OrderOption defines the ordering options for the Objects queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByVideoID orders the results by the video_id field.
func ByVideoID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVideoID, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCoordinateX orders the results by the coordinate_x field.
func ByCoordinateX(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoordinateX, opts...).ToFunc()
}

// ByCoordinateY orders the results by the coordinate_y field.
func ByCoordinateY(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoordinateY, opts...).ToFunc()
}

// ByLength orders the results by the length field.
func ByLength(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLength, opts...).ToFunc()
}

// ByWidth orders the results by the width field.
func ByWidth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWidth, opts...).ToFunc()
}

// ByOrder orders the results by the order field.
func ByOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrder, opts...).ToFunc()
}

// ByTimeStart orders the results by the time_start field.
func ByTimeStart(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimeStart, opts...).ToFunc()
}

// ByTimeEnd orders the results by the time_end field.
func ByTimeEnd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimeEnd, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByTouchVector orders the results by the touch_vector field.
func ByTouchVector(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTouchVector, opts...).ToFunc()
}

// ByMarkerName orders the results by the marker_name field.
func ByMarkerName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMarkerName, opts...).ToFunc()
}

// ByTimePoint orders the results by the time_point field.
func ByTimePoint(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimePoint, opts...).ToFunc()
}

// ByTblVideosField orders the results by tbl_videos field.
func ByTblVideosField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTblVideosStep(), sql.OrderByField(field, opts...))
	}
}
func newTblVideosStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TblVideosInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TblVideosTable, TblVideosColumn),
	)
}
