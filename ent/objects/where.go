// Code generated by ent, DO NOT EDIT.

package objects

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/glu/video-real-time-ranking/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint) predicate.Objects {
	return predicate.Objects(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint) predicate.Objects {
	return predicate.Objects(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint) predicate.Objects {
	return predicate.Objects(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint) predicate.Objects {
	return predicate.Objects(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint) predicate.Objects {
	return predicate.Objects(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint) predicate.Objects {
	return predicate.Objects(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint) predicate.Objects {
	return predicate.Objects(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint) predicate.Objects {
	return predicate.Objects(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint) predicate.Objects {
	return predicate.Objects(sql.FieldLTE(FieldID, id))
}

// VideoID applies equality check predicate on the "video_id" field. It's identical to VideoIDEQ.
func VideoID(v uint) predicate.Objects {
	return predicate.Objects(sql.FieldEQ(FieldVideoID, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Objects {
	return predicate.Objects(sql.FieldEQ(FieldDescription, v))
}

// CoordinateX applies equality check predicate on the "coordinate_x" field. It's identical to CoordinateXEQ.
func CoordinateX(v int) predicate.Objects {
	return predicate.Objects(sql.FieldEQ(FieldCoordinateX, v))
}

// CoordinateY applies equality check predicate on the "coordinate_y" field. It's identical to CoordinateYEQ.
func CoordinateY(v int) predicate.Objects {
	return predicate.Objects(sql.FieldEQ(FieldCoordinateY, v))
}

// Length applies equality check predicate on the "length" field. It's identical to LengthEQ.
func Length(v int) predicate.Objects {
	return predicate.Objects(sql.FieldEQ(FieldLength, v))
}

// Width applies equality check predicate on the "width" field. It's identical to WidthEQ.
func Width(v int) predicate.Objects {
	return predicate.Objects(sql.FieldEQ(FieldWidth, v))
}

// Order applies equality check predicate on the "order" field. It's identical to OrderEQ.
func Order(v int) predicate.Objects {
	return predicate.Objects(sql.FieldEQ(FieldOrder, v))
}

// TimeStart applies equality check predicate on the "time_start" field. It's identical to TimeStartEQ.
func TimeStart(v float64) predicate.Objects {
	return predicate.Objects(sql.FieldEQ(FieldTimeStart, v))
}

// TimeEnd applies equality check predicate on the "time_end" field. It's identical to TimeEndEQ.
func TimeEnd(v float64) predicate.Objects {
	return predicate.Objects(sql.FieldEQ(FieldTimeEnd, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Objects {
	return predicate.Objects(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Objects {
	return predicate.Objects(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Objects {
	return predicate.Objects(sql.FieldEQ(FieldDeletedAt, v))
}

// TouchVector applies equality check predicate on the "touch_vector" field. It's identical to TouchVectorEQ.
func TouchVector(v string) predicate.Objects {
	return predicate.Objects(sql.FieldEQ(FieldTouchVector, v))
}

// MarkerName applies equality check predicate on the "marker_name" field. It's identical to MarkerNameEQ.
func MarkerName(v string) predicate.Objects {
	return predicate.Objects(sql.FieldEQ(FieldMarkerName, v))
}

// TimePoint applies equality check predicate on the "time_point" field. It's identical to TimePointEQ.
func TimePoint(v float64) predicate.Objects {
	return predicate.Objects(sql.FieldEQ(FieldTimePoint, v))
}

// VideoIDEQ applies the EQ predicate on the "video_id" field.
func VideoIDEQ(v uint) predicate.Objects {
	return predicate.Objects(sql.FieldEQ(FieldVideoID, v))
}

// VideoIDNEQ applies the NEQ predicate on the "video_id" field.
func VideoIDNEQ(v uint) predicate.Objects {
	return predicate.Objects(sql.FieldNEQ(FieldVideoID, v))
}

// VideoIDIn applies the In predicate on the "video_id" field.
func VideoIDIn(vs ...uint) predicate.Objects {
	return predicate.Objects(sql.FieldIn(FieldVideoID, vs...))
}

// VideoIDNotIn applies the NotIn predicate on the "video_id" field.
func VideoIDNotIn(vs ...uint) predicate.Objects {
	return predicate.Objects(sql.FieldNotIn(FieldVideoID, vs...))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Objects {
	return predicate.Objects(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Objects {
	return predicate.Objects(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Objects {
	return predicate.Objects(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Objects {
	return predicate.Objects(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Objects {
	return predicate.Objects(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Objects {
	return predicate.Objects(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Objects {
	return predicate.Objects(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Objects {
	return predicate.Objects(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Objects {
	return predicate.Objects(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Objects {
	return predicate.Objects(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Objects {
	return predicate.Objects(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Objects {
	return predicate.Objects(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Objects {
	return predicate.Objects(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Objects {
	return predicate.Objects(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Objects {
	return predicate.Objects(sql.FieldContainsFold(FieldDescription, v))
}

// CoordinateXEQ applies the EQ predicate on the "coordinate_x" field.
func CoordinateXEQ(v int) predicate.Objects {
	return predicate.Objects(sql.FieldEQ(FieldCoordinateX, v))
}

// CoordinateXNEQ applies the NEQ predicate on the "coordinate_x" field.
func CoordinateXNEQ(v int) predicate.Objects {
	return predicate.Objects(sql.FieldNEQ(FieldCoordinateX, v))
}

// CoordinateXIn applies the In predicate on the "coordinate_x" field.
func CoordinateXIn(vs ...int) predicate.Objects {
	return predicate.Objects(sql.FieldIn(FieldCoordinateX, vs...))
}

// CoordinateXNotIn applies the NotIn predicate on the "coordinate_x" field.
func CoordinateXNotIn(vs ...int) predicate.Objects {
	return predicate.Objects(sql.FieldNotIn(FieldCoordinateX, vs...))
}

// CoordinateXGT applies the GT predicate on the "coordinate_x" field.
func CoordinateXGT(v int) predicate.Objects {
	return predicate.Objects(sql.FieldGT(FieldCoordinateX, v))
}

// CoordinateXGTE applies the GTE predicate on the "coordinate_x" field.
func CoordinateXGTE(v int) predicate.Objects {
	return predicate.Objects(sql.FieldGTE(FieldCoordinateX, v))
}

// CoordinateXLT applies the LT predicate on the "coordinate_x" field.
func CoordinateXLT(v int) predicate.Objects {
	return predicate.Objects(sql.FieldLT(FieldCoordinateX, v))
}

// CoordinateXLTE applies the LTE predicate on the "coordinate_x" field.
func CoordinateXLTE(v int) predicate.Objects {
	return predicate.Objects(sql.FieldLTE(FieldCoordinateX, v))
}

// CoordinateYEQ applies the EQ predicate on the "coordinate_y" field.
func CoordinateYEQ(v int) predicate.Objects {
	return predicate.Objects(sql.FieldEQ(FieldCoordinateY, v))
}

// CoordinateYNEQ applies the NEQ predicate on the "coordinate_y" field.
func CoordinateYNEQ(v int) predicate.Objects {
	return predicate.Objects(sql.FieldNEQ(FieldCoordinateY, v))
}

// CoordinateYIn applies the In predicate on the "coordinate_y" field.
func CoordinateYIn(vs ...int) predicate.Objects {
	return predicate.Objects(sql.FieldIn(FieldCoordinateY, vs...))
}

// CoordinateYNotIn applies the NotIn predicate on the "coordinate_y" field.
func CoordinateYNotIn(vs ...int) predicate.Objects {
	return predicate.Objects(sql.FieldNotIn(FieldCoordinateY, vs...))
}

// CoordinateYGT applies the GT predicate on the "coordinate_y" field.
func CoordinateYGT(v int) predicate.Objects {
	return predicate.Objects(sql.FieldGT(FieldCoordinateY, v))
}

// CoordinateYGTE applies the GTE predicate on the "coordinate_y" field.
func CoordinateYGTE(v int) predicate.Objects {
	return predicate.Objects(sql.FieldGTE(FieldCoordinateY, v))
}

// CoordinateYLT applies the LT predicate on the "coordinate_y" field.
func CoordinateYLT(v int) predicate.Objects {
	return predicate.Objects(sql.FieldLT(FieldCoordinateY, v))
}

// CoordinateYLTE applies the LTE predicate on the "coordinate_y" field.
func CoordinateYLTE(v int) predicate.Objects {
	return predicate.Objects(sql.FieldLTE(FieldCoordinateY, v))
}

// LengthEQ applies the EQ predicate on the "length" field.
func LengthEQ(v int) predicate.Objects {
	return predicate.Objects(sql.FieldEQ(FieldLength, v))
}

// LengthNEQ applies the NEQ predicate on the "length" field.
func LengthNEQ(v int) predicate.Objects {
	return predicate.Objects(sql.FieldNEQ(FieldLength, v))
}

// LengthIn applies the In predicate on the "length" field.
func LengthIn(vs ...int) predicate.Objects {
	return predicate.Objects(sql.FieldIn(FieldLength, vs...))
}

// LengthNotIn applies the NotIn predicate on the "length" field.
func LengthNotIn(vs ...int) predicate.Objects {
	return predicate.Objects(sql.FieldNotIn(FieldLength, vs...))
}

// LengthGT applies the GT predicate on the "length" field.
func LengthGT(v int) predicate.Objects {
	return predicate.Objects(sql.FieldGT(FieldLength, v))
}

// LengthGTE applies the GTE predicate on the "length" field.
func LengthGTE(v int) predicate.Objects {
	return predicate.Objects(sql.FieldGTE(FieldLength, v))
}

// LengthLT applies the LT predicate on the "length" field.
func LengthLT(v int) predicate.Objects {
	return predicate.Objects(sql.FieldLT(FieldLength, v))
}

// LengthLTE applies the LTE predicate on the "length" field.
func LengthLTE(v int) predicate.Objects {
	return predicate.Objects(sql.FieldLTE(FieldLength, v))
}

// WidthEQ applies the EQ predicate on the "width" field.
func WidthEQ(v int) predicate.Objects {
	return predicate.Objects(sql.FieldEQ(FieldWidth, v))
}

// WidthNEQ applies the NEQ predicate on the "width" field.
func WidthNEQ(v int) predicate.Objects {
	return predicate.Objects(sql.FieldNEQ(FieldWidth, v))
}

// WidthIn applies the In predicate on the "width" field.
func WidthIn(vs ...int) predicate.Objects {
	return predicate.Objects(sql.FieldIn(FieldWidth, vs...))
}

// WidthNotIn applies the NotIn predicate on the "width" field.
func WidthNotIn(vs ...int) predicate.Objects {
	return predicate.Objects(sql.FieldNotIn(FieldWidth, vs...))
}

// WidthGT applies the GT predicate on the "width" field.
func WidthGT(v int) predicate.Objects {
	return predicate.Objects(sql.FieldGT(FieldWidth, v))
}

// WidthGTE applies the GTE predicate on the "width" field.
func WidthGTE(v int) predicate.Objects {
	return predicate.Objects(sql.FieldGTE(FieldWidth, v))
}

// WidthLT applies the LT predicate on the "width" field.
func WidthLT(v int) predicate.Objects {
	return predicate.Objects(sql.FieldLT(FieldWidth, v))
}

// WidthLTE applies the LTE predicate on the "width" field.
func WidthLTE(v int) predicate.Objects {
	return predicate.Objects(sql.FieldLTE(FieldWidth, v))
}

// OrderEQ applies the EQ predicate on the "order" field.
func OrderEQ(v int) predicate.Objects {
	return predicate.Objects(sql.FieldEQ(FieldOrder, v))
}

// OrderNEQ applies the NEQ predicate on the "order" field.
func OrderNEQ(v int) predicate.Objects {
	return predicate.Objects(sql.FieldNEQ(FieldOrder, v))
}

// OrderIn applies the In predicate on the "order" field.
func OrderIn(vs ...int) predicate.Objects {
	return predicate.Objects(sql.FieldIn(FieldOrder, vs...))
}

// OrderNotIn applies the NotIn predicate on the "order" field.
func OrderNotIn(vs ...int) predicate.Objects {
	return predicate.Objects(sql.FieldNotIn(FieldOrder, vs...))
}

// OrderGT applies the GT predicate on the "order" field.
func OrderGT(v int) predicate.Objects {
	return predicate.Objects(sql.FieldGT(FieldOrder, v))
}

// OrderGTE applies the GTE predicate on the "order" field.
func OrderGTE(v int) predicate.Objects {
	return predicate.Objects(sql.FieldGTE(FieldOrder, v))
}

// OrderLT applies the LT predicate on the "order" field.
func OrderLT(v int) predicate.Objects {
	return predicate.Objects(sql.FieldLT(FieldOrder, v))
}

// OrderLTE applies the LTE predicate on the "order" field.
func OrderLTE(v int) predicate.Objects {
	return predicate.Objects(sql.FieldLTE(FieldOrder, v))
}

// TimeStartEQ applies the EQ predicate on the "time_start" field.
func TimeStartEQ(v float64) predicate.Objects {
	return predicate.Objects(sql.FieldEQ(FieldTimeStart, v))
}

// TimeStartNEQ applies the NEQ predicate on the "time_start" field.
func TimeStartNEQ(v float64) predicate.Objects {
	return predicate.Objects(sql.FieldNEQ(FieldTimeStart, v))
}

// TimeStartIn applies the In predicate on the "time_start" field.
func TimeStartIn(vs ...float64) predicate.Objects {
	return predicate.Objects(sql.FieldIn(FieldTimeStart, vs...))
}

// TimeStartNotIn applies the NotIn predicate on the "time_start" field.
func TimeStartNotIn(vs ...float64) predicate.Objects {
	return predicate.Objects(sql.FieldNotIn(FieldTimeStart, vs...))
}

// TimeStartGT applies the GT predicate on the "time_start" field.
func TimeStartGT(v float64) predicate.Objects {
	return predicate.Objects(sql.FieldGT(FieldTimeStart, v))
}

// TimeStartGTE applies the GTE predicate on the "time_start" field.
func TimeStartGTE(v float64) predicate.Objects {
	return predicate.Objects(sql.FieldGTE(FieldTimeStart, v))
}

// TimeStartLT applies the LT predicate on the "time_start" field.
func TimeStartLT(v float64) predicate.Objects {
	return predicate.Objects(sql.FieldLT(FieldTimeStart, v))
}

// TimeStartLTE applies the LTE predicate on the "time_start" field.
func TimeStartLTE(v float64) predicate.Objects {
	return predicate.Objects(sql.FieldLTE(FieldTimeStart, v))
}

// TimeEndEQ applies the EQ predicate on the "time_end" field.
func TimeEndEQ(v float64) predicate.Objects {
	return predicate.Objects(sql.FieldEQ(FieldTimeEnd, v))
}

// TimeEndNEQ applies the NEQ predicate on the "time_end" field.
func TimeEndNEQ(v float64) predicate.Objects {
	return predicate.Objects(sql.FieldNEQ(FieldTimeEnd, v))
}

// TimeEndIn applies the In predicate on the "time_end" field.
func TimeEndIn(vs ...float64) predicate.Objects {
	return predicate.Objects(sql.FieldIn(FieldTimeEnd, vs...))
}

// TimeEndNotIn applies the NotIn predicate on the "time_end" field.
func TimeEndNotIn(vs ...float64) predicate.Objects {
	return predicate.Objects(sql.FieldNotIn(FieldTimeEnd, vs...))
}

// TimeEndGT applies the GT predicate on the "time_end" field.
func TimeEndGT(v float64) predicate.Objects {
	return predicate.Objects(sql.FieldGT(FieldTimeEnd, v))
}

// TimeEndGTE applies the GTE predicate on the "time_end" field.
func TimeEndGTE(v float64) predicate.Objects {
	return predicate.Objects(sql.FieldGTE(FieldTimeEnd, v))
}

// TimeEndLT applies the LT predicate on the "time_end" field.
func TimeEndLT(v float64) predicate.Objects {
	return predicate.Objects(sql.FieldLT(FieldTimeEnd, v))
}

// TimeEndLTE applies the LTE predicate on the "time_end" field.
func TimeEndLTE(v float64) predicate.Objects {
	return predicate.Objects(sql.FieldLTE(FieldTimeEnd, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Objects {
	return predicate.Objects(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Objects {
	return predicate.Objects(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Objects {
	return predicate.Objects(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Objects {
	return predicate.Objects(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Objects {
	return predicate.Objects(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Objects {
	return predicate.Objects(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Objects {
	return predicate.Objects(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Objects {
	return predicate.Objects(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Objects {
	return predicate.Objects(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Objects {
	return predicate.Objects(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Objects {
	return predicate.Objects(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Objects {
	return predicate.Objects(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Objects {
	return predicate.Objects(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Objects {
	return predicate.Objects(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Objects {
	return predicate.Objects(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Objects {
	return predicate.Objects(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Objects {
	return predicate.Objects(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Objects {
	return predicate.Objects(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Objects {
	return predicate.Objects(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Objects {
	return predicate.Objects(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Objects {
	return predicate.Objects(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Objects {
	return predicate.Objects(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Objects {
	return predicate.Objects(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Objects {
	return predicate.Objects(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Objects {
	return predicate.Objects(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Objects {
	return predicate.Objects(sql.FieldNotNull(FieldDeletedAt))
}

// TouchVectorEQ applies the EQ predicate on the "touch_vector" field.
func TouchVectorEQ(v string) predicate.Objects {
	return predicate.Objects(sql.FieldEQ(FieldTouchVector, v))
}

// TouchVectorNEQ applies the NEQ predicate on the "touch_vector" field.
func TouchVectorNEQ(v string) predicate.Objects {
	return predicate.Objects(sql.FieldNEQ(FieldTouchVector, v))
}

// TouchVectorIn applies the In predicate on the "touch_vector" field.
func TouchVectorIn(vs ...string) predicate.Objects {
	return predicate.Objects(sql.FieldIn(FieldTouchVector, vs...))
}

// TouchVectorNotIn applies the NotIn predicate on the "touch_vector" field.
func TouchVectorNotIn(vs ...string) predicate.Objects {
	return predicate.Objects(sql.FieldNotIn(FieldTouchVector, vs...))
}

// TouchVectorGT applies the GT predicate on the "touch_vector" field.
func TouchVectorGT(v string) predicate.Objects {
	return predicate.Objects(sql.FieldGT(FieldTouchVector, v))
}

// TouchVectorGTE applies the GTE predicate on the "touch_vector" field.
func TouchVectorGTE(v string) predicate.Objects {
	return predicate.Objects(sql.FieldGTE(FieldTouchVector, v))
}

// TouchVectorLT applies the LT predicate on the "touch_vector" field.
func TouchVectorLT(v string) predicate.Objects {
	return predicate.Objects(sql.FieldLT(FieldTouchVector, v))
}

// TouchVectorLTE applies the LTE predicate on the "touch_vector" field.
func TouchVectorLTE(v string) predicate.Objects {
	return predicate.Objects(sql.FieldLTE(FieldTouchVector, v))
}

// TouchVectorContains applies the Contains predicate on the "touch_vector" field.
func TouchVectorContains(v string) predicate.Objects {
	return predicate.Objects(sql.FieldContains(FieldTouchVector, v))
}

// TouchVectorHasPrefix applies the HasPrefix predicate on the "touch_vector" field.
func TouchVectorHasPrefix(v string) predicate.Objects {
	return predicate.Objects(sql.FieldHasPrefix(FieldTouchVector, v))
}

// TouchVectorHasSuffix applies the HasSuffix predicate on the "touch_vector" field.
func TouchVectorHasSuffix(v string) predicate.Objects {
	return predicate.Objects(sql.FieldHasSuffix(FieldTouchVector, v))
}

// TouchVectorEqualFold applies the EqualFold predicate on the "touch_vector" field.
func TouchVectorEqualFold(v string) predicate.Objects {
	return predicate.Objects(sql.FieldEqualFold(FieldTouchVector, v))
}

// TouchVectorContainsFold applies the ContainsFold predicate on the "touch_vector" field.
func TouchVectorContainsFold(v string) predicate.Objects {
	return predicate.Objects(sql.FieldContainsFold(FieldTouchVector, v))
}

// MarkerNameEQ applies the EQ predicate on the "marker_name" field.
func MarkerNameEQ(v string) predicate.Objects {
	return predicate.Objects(sql.FieldEQ(FieldMarkerName, v))
}

// MarkerNameNEQ applies the NEQ predicate on the "marker_name" field.
func MarkerNameNEQ(v string) predicate.Objects {
	return predicate.Objects(sql.FieldNEQ(FieldMarkerName, v))
}

// MarkerNameIn applies the In predicate on the "marker_name" field.
func MarkerNameIn(vs ...string) predicate.Objects {
	return predicate.Objects(sql.FieldIn(FieldMarkerName, vs...))
}

// MarkerNameNotIn applies the NotIn predicate on the "marker_name" field.
func MarkerNameNotIn(vs ...string) predicate.Objects {
	return predicate.Objects(sql.FieldNotIn(FieldMarkerName, vs...))
}

// MarkerNameGT applies the GT predicate on the "marker_name" field.
func MarkerNameGT(v string) predicate.Objects {
	return predicate.Objects(sql.FieldGT(FieldMarkerName, v))
}

// MarkerNameGTE applies the GTE predicate on the "marker_name" field.
func MarkerNameGTE(v string) predicate.Objects {
	return predicate.Objects(sql.FieldGTE(FieldMarkerName, v))
}

// MarkerNameLT applies the LT predicate on the "marker_name" field.
func MarkerNameLT(v string) predicate.Objects {
	return predicate.Objects(sql.FieldLT(FieldMarkerName, v))
}

// MarkerNameLTE applies the LTE predicate on the "marker_name" field.
func MarkerNameLTE(v string) predicate.Objects {
	return predicate.Objects(sql.FieldLTE(FieldMarkerName, v))
}

// MarkerNameContains applies the Contains predicate on the "marker_name" field.
func MarkerNameContains(v string) predicate.Objects {
	return predicate.Objects(sql.FieldContains(FieldMarkerName, v))
}

// MarkerNameHasPrefix applies the HasPrefix predicate on the "marker_name" field.
func MarkerNameHasPrefix(v string) predicate.Objects {
	return predicate.Objects(sql.FieldHasPrefix(FieldMarkerName, v))
}

// MarkerNameHasSuffix applies the HasSuffix predicate on the "marker_name" field.
func MarkerNameHasSuffix(v string) predicate.Objects {
	return predicate.Objects(sql.FieldHasSuffix(FieldMarkerName, v))
}

// MarkerNameEqualFold applies the EqualFold predicate on the "marker_name" field.
func MarkerNameEqualFold(v string) predicate.Objects {
	return predicate.Objects(sql.FieldEqualFold(FieldMarkerName, v))
}

// MarkerNameContainsFold applies the ContainsFold predicate on the "marker_name" field.
func MarkerNameContainsFold(v string) predicate.Objects {
	return predicate.Objects(sql.FieldContainsFold(FieldMarkerName, v))
}

// TimePointEQ applies the EQ predicate on the "time_point" field.
func TimePointEQ(v float64) predicate.Objects {
	return predicate.Objects(sql.FieldEQ(FieldTimePoint, v))
}

// TimePointNEQ applies the NEQ predicate on the "time_point" field.
func TimePointNEQ(v float64) predicate.Objects {
	return predicate.Objects(sql.FieldNEQ(FieldTimePoint, v))
}

// TimePointIn applies the In predicate on the "time_point" field.
func TimePointIn(vs ...float64) predicate.Objects {
	return predicate.Objects(sql.FieldIn(FieldTimePoint, vs...))
}

// TimePointNotIn applies the NotIn predicate on the "time_point" field.
func TimePointNotIn(vs ...float64) predicate.Objects {
	return predicate.Objects(sql.FieldNotIn(FieldTimePoint, vs...))
}

// TimePointGT applies the GT predicate on the "time_point" field.
func TimePointGT(v float64) predicate.Objects {
	return predicate.Objects(sql.FieldGT(FieldTimePoint, v))
}

// TimePointGTE applies the GTE predicate on the "time_point" field.
func TimePointGTE(v float64) predicate.Objects {
	return predicate.Objects(sql.FieldGTE(FieldTimePoint, v))
}

// TimePointLT applies the LT predicate on the "time_point" field.
func TimePointLT(v float64) predicate.Objects {
	return predicate.Objects(sql.FieldLT(FieldTimePoint, v))
}

// TimePointLTE applies the LTE predicate on the "time_point" field.
func TimePointLTE(v float64) predicate.Objects {
	return predicate.Objects(sql.FieldLTE(FieldTimePoint, v))
}

// HasTblVideos applies the HasEdge predicate on the "tbl_videos" edge.
func HasTblVideos() predicate.Objects {
	return predicate.Objects(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TblVideosTable, TblVideosColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTblVideosWith applies the HasEdge predicate on the "tbl_videos" edge with a given conditions (other predicates).
func HasTblVideosWith(preds ...predicate.Videos) predicate.Objects {
	return predicate.Objects(func(s *sql.Selector) {
		step := newTblVideosStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Objects) predicate.Objects {
	return predicate.Objects(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Objects) predicate.Objects {
	return predicate.Objects(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Objects) predicate.Objects {
	return predicate.Objects(func(s *sql.Selector) {
		p(s.Not())
	})
}
