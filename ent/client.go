// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/glu/video-real-time-ranking/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/glu/video-real-time-ranking/ent/comments"
	"github.com/glu/video-real-time-ranking/ent/objects"
	"github.com/glu/video-real-time-ranking/ent/reactions"
	"github.com/glu/video-real-time-ranking/ent/videos"
	"github.com/glu/video-real-time-ranking/ent/viewers"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Comments is the client for interacting with the Comments builders.
	Comments *CommentsClient
	// Objects is the client for interacting with the Objects builders.
	Objects *ObjectsClient
	// Reactions is the client for interacting with the Reactions builders.
	Reactions *ReactionsClient
	// Videos is the client for interacting with the Videos builders.
	Videos *VideosClient
	// Viewers is the client for interacting with the Viewers builders.
	Viewers *ViewersClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Comments = NewCommentsClient(c.config)
	c.Objects = NewObjectsClient(c.config)
	c.Reactions = NewReactionsClient(c.config)
	c.Videos = NewVideosClient(c.config)
	c.Viewers = NewViewersClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		Comments:  NewCommentsClient(cfg),
		Objects:   NewObjectsClient(cfg),
		Reactions: NewReactionsClient(cfg),
		Videos:    NewVideosClient(cfg),
		Viewers:   NewViewersClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		Comments:  NewCommentsClient(cfg),
		Objects:   NewObjectsClient(cfg),
		Reactions: NewReactionsClient(cfg),
		Videos:    NewVideosClient(cfg),
		Viewers:   NewViewersClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Comments.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Comments.Use(hooks...)
	c.Objects.Use(hooks...)
	c.Reactions.Use(hooks...)
	c.Videos.Use(hooks...)
	c.Viewers.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Comments.Intercept(interceptors...)
	c.Objects.Intercept(interceptors...)
	c.Reactions.Intercept(interceptors...)
	c.Videos.Intercept(interceptors...)
	c.Viewers.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *CommentsMutation:
		return c.Comments.mutate(ctx, m)
	case *ObjectsMutation:
		return c.Objects.mutate(ctx, m)
	case *ReactionsMutation:
		return c.Reactions.mutate(ctx, m)
	case *VideosMutation:
		return c.Videos.mutate(ctx, m)
	case *ViewersMutation:
		return c.Viewers.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// CommentsClient is a client for the Comments schema.
type CommentsClient struct {
	config
}

// NewCommentsClient returns a client for the Comments from the given config.
func NewCommentsClient(c config) *CommentsClient {
	return &CommentsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `comments.Hooks(f(g(h())))`.
func (c *CommentsClient) Use(hooks ...Hook) {
	c.hooks.Comments = append(c.hooks.Comments, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `comments.Intercept(f(g(h())))`.
func (c *CommentsClient) Intercept(interceptors ...Interceptor) {
	c.inters.Comments = append(c.inters.Comments, interceptors...)
}

// Create returns a builder for creating a Comments entity.
func (c *CommentsClient) Create() *CommentsCreate {
	mutation := newCommentsMutation(c.config, OpCreate)
	return &CommentsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Comments entities.
func (c *CommentsClient) CreateBulk(builders ...*CommentsCreate) *CommentsCreateBulk {
	return &CommentsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CommentsClient) MapCreateBulk(slice any, setFunc func(*CommentsCreate, int)) *CommentsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CommentsCreateBulk{err: fmt.Errorf("calling to CommentsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CommentsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CommentsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Comments.
func (c *CommentsClient) Update() *CommentsUpdate {
	mutation := newCommentsMutation(c.config, OpUpdate)
	return &CommentsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CommentsClient) UpdateOne(co *Comments) *CommentsUpdateOne {
	mutation := newCommentsMutation(c.config, OpUpdateOne, withComments(co))
	return &CommentsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CommentsClient) UpdateOneID(id uint) *CommentsUpdateOne {
	mutation := newCommentsMutation(c.config, OpUpdateOne, withCommentsID(id))
	return &CommentsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Comments.
func (c *CommentsClient) Delete() *CommentsDelete {
	mutation := newCommentsMutation(c.config, OpDelete)
	return &CommentsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CommentsClient) DeleteOne(co *Comments) *CommentsDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CommentsClient) DeleteOneID(id uint) *CommentsDeleteOne {
	builder := c.Delete().Where(comments.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CommentsDeleteOne{builder}
}

// Query returns a query builder for Comments.
func (c *CommentsClient) Query() *CommentsQuery {
	return &CommentsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeComments},
		inters: c.Interceptors(),
	}
}

// Get returns a Comments entity by its id.
func (c *CommentsClient) Get(ctx context.Context, id uint) (*Comments, error) {
	return c.Query().Where(comments.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CommentsClient) GetX(ctx context.Context, id uint) *Comments {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTblVideos queries the tbl_videos edge of a Comments.
func (c *CommentsClient) QueryTblVideos(co *Comments) *VideosQuery {
	query := (&VideosClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(comments.Table, comments.FieldID, id),
			sqlgraph.To(videos.Table, videos.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, comments.TblVideosTable, comments.TblVideosColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CommentsClient) Hooks() []Hook {
	return c.hooks.Comments
}

// Interceptors returns the client interceptors.
func (c *CommentsClient) Interceptors() []Interceptor {
	return c.inters.Comments
}

func (c *CommentsClient) mutate(ctx context.Context, m *CommentsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CommentsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CommentsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CommentsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CommentsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Comments mutation op: %q", m.Op())
	}
}

// ObjectsClient is a client for the Objects schema.
type ObjectsClient struct {
	config
}

// NewObjectsClient returns a client for the Objects from the given config.
func NewObjectsClient(c config) *ObjectsClient {
	return &ObjectsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `objects.Hooks(f(g(h())))`.
func (c *ObjectsClient) Use(hooks ...Hook) {
	c.hooks.Objects = append(c.hooks.Objects, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `objects.Intercept(f(g(h())))`.
func (c *ObjectsClient) Intercept(interceptors ...Interceptor) {
	c.inters.Objects = append(c.inters.Objects, interceptors...)
}

// Create returns a builder for creating a Objects entity.
func (c *ObjectsClient) Create() *ObjectsCreate {
	mutation := newObjectsMutation(c.config, OpCreate)
	return &ObjectsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Objects entities.
func (c *ObjectsClient) CreateBulk(builders ...*ObjectsCreate) *ObjectsCreateBulk {
	return &ObjectsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ObjectsClient) MapCreateBulk(slice any, setFunc func(*ObjectsCreate, int)) *ObjectsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ObjectsCreateBulk{err: fmt.Errorf("calling to ObjectsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ObjectsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ObjectsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Objects.
func (c *ObjectsClient) Update() *ObjectsUpdate {
	mutation := newObjectsMutation(c.config, OpUpdate)
	return &ObjectsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ObjectsClient) UpdateOne(o *Objects) *ObjectsUpdateOne {
	mutation := newObjectsMutation(c.config, OpUpdateOne, withObjects(o))
	return &ObjectsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ObjectsClient) UpdateOneID(id uint) *ObjectsUpdateOne {
	mutation := newObjectsMutation(c.config, OpUpdateOne, withObjectsID(id))
	return &ObjectsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Objects.
func (c *ObjectsClient) Delete() *ObjectsDelete {
	mutation := newObjectsMutation(c.config, OpDelete)
	return &ObjectsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ObjectsClient) DeleteOne(o *Objects) *ObjectsDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ObjectsClient) DeleteOneID(id uint) *ObjectsDeleteOne {
	builder := c.Delete().Where(objects.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ObjectsDeleteOne{builder}
}

// Query returns a query builder for Objects.
func (c *ObjectsClient) Query() *ObjectsQuery {
	return &ObjectsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeObjects},
		inters: c.Interceptors(),
	}
}

// Get returns a Objects entity by its id.
func (c *ObjectsClient) Get(ctx context.Context, id uint) (*Objects, error) {
	return c.Query().Where(objects.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ObjectsClient) GetX(ctx context.Context, id uint) *Objects {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTblVideos queries the tbl_videos edge of a Objects.
func (c *ObjectsClient) QueryTblVideos(o *Objects) *VideosQuery {
	query := (&VideosClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(objects.Table, objects.FieldID, id),
			sqlgraph.To(videos.Table, videos.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, objects.TblVideosTable, objects.TblVideosColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ObjectsClient) Hooks() []Hook {
	return c.hooks.Objects
}

// Interceptors returns the client interceptors.
func (c *ObjectsClient) Interceptors() []Interceptor {
	return c.inters.Objects
}

func (c *ObjectsClient) mutate(ctx context.Context, m *ObjectsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ObjectsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ObjectsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ObjectsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ObjectsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Objects mutation op: %q", m.Op())
	}
}

// ReactionsClient is a client for the Reactions schema.
type ReactionsClient struct {
	config
}

// NewReactionsClient returns a client for the Reactions from the given config.
func NewReactionsClient(c config) *ReactionsClient {
	return &ReactionsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `reactions.Hooks(f(g(h())))`.
func (c *ReactionsClient) Use(hooks ...Hook) {
	c.hooks.Reactions = append(c.hooks.Reactions, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `reactions.Intercept(f(g(h())))`.
func (c *ReactionsClient) Intercept(interceptors ...Interceptor) {
	c.inters.Reactions = append(c.inters.Reactions, interceptors...)
}

// Create returns a builder for creating a Reactions entity.
func (c *ReactionsClient) Create() *ReactionsCreate {
	mutation := newReactionsMutation(c.config, OpCreate)
	return &ReactionsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Reactions entities.
func (c *ReactionsClient) CreateBulk(builders ...*ReactionsCreate) *ReactionsCreateBulk {
	return &ReactionsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ReactionsClient) MapCreateBulk(slice any, setFunc func(*ReactionsCreate, int)) *ReactionsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ReactionsCreateBulk{err: fmt.Errorf("calling to ReactionsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ReactionsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ReactionsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Reactions.
func (c *ReactionsClient) Update() *ReactionsUpdate {
	mutation := newReactionsMutation(c.config, OpUpdate)
	return &ReactionsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReactionsClient) UpdateOne(r *Reactions) *ReactionsUpdateOne {
	mutation := newReactionsMutation(c.config, OpUpdateOne, withReactions(r))
	return &ReactionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ReactionsClient) UpdateOneID(id uint) *ReactionsUpdateOne {
	mutation := newReactionsMutation(c.config, OpUpdateOne, withReactionsID(id))
	return &ReactionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Reactions.
func (c *ReactionsClient) Delete() *ReactionsDelete {
	mutation := newReactionsMutation(c.config, OpDelete)
	return &ReactionsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ReactionsClient) DeleteOne(r *Reactions) *ReactionsDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ReactionsClient) DeleteOneID(id uint) *ReactionsDeleteOne {
	builder := c.Delete().Where(reactions.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ReactionsDeleteOne{builder}
}

// Query returns a query builder for Reactions.
func (c *ReactionsClient) Query() *ReactionsQuery {
	return &ReactionsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeReactions},
		inters: c.Interceptors(),
	}
}

// Get returns a Reactions entity by its id.
func (c *ReactionsClient) Get(ctx context.Context, id uint) (*Reactions, error) {
	return c.Query().Where(reactions.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ReactionsClient) GetX(ctx context.Context, id uint) *Reactions {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTblVideos queries the tbl_videos edge of a Reactions.
func (c *ReactionsClient) QueryTblVideos(r *Reactions) *VideosQuery {
	query := (&VideosClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(reactions.Table, reactions.FieldID, id),
			sqlgraph.To(videos.Table, videos.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, reactions.TblVideosTable, reactions.TblVideosColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ReactionsClient) Hooks() []Hook {
	return c.hooks.Reactions
}

// Interceptors returns the client interceptors.
func (c *ReactionsClient) Interceptors() []Interceptor {
	return c.inters.Reactions
}

func (c *ReactionsClient) mutate(ctx context.Context, m *ReactionsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ReactionsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ReactionsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ReactionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ReactionsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Reactions mutation op: %q", m.Op())
	}
}

// VideosClient is a client for the Videos schema.
type VideosClient struct {
	config
}

// NewVideosClient returns a client for the Videos from the given config.
func NewVideosClient(c config) *VideosClient {
	return &VideosClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `videos.Hooks(f(g(h())))`.
func (c *VideosClient) Use(hooks ...Hook) {
	c.hooks.Videos = append(c.hooks.Videos, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `videos.Intercept(f(g(h())))`.
func (c *VideosClient) Intercept(interceptors ...Interceptor) {
	c.inters.Videos = append(c.inters.Videos, interceptors...)
}

// Create returns a builder for creating a Videos entity.
func (c *VideosClient) Create() *VideosCreate {
	mutation := newVideosMutation(c.config, OpCreate)
	return &VideosCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Videos entities.
func (c *VideosClient) CreateBulk(builders ...*VideosCreate) *VideosCreateBulk {
	return &VideosCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *VideosClient) MapCreateBulk(slice any, setFunc func(*VideosCreate, int)) *VideosCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &VideosCreateBulk{err: fmt.Errorf("calling to VideosClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*VideosCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &VideosCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Videos.
func (c *VideosClient) Update() *VideosUpdate {
	mutation := newVideosMutation(c.config, OpUpdate)
	return &VideosUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VideosClient) UpdateOne(v *Videos) *VideosUpdateOne {
	mutation := newVideosMutation(c.config, OpUpdateOne, withVideos(v))
	return &VideosUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VideosClient) UpdateOneID(id uint) *VideosUpdateOne {
	mutation := newVideosMutation(c.config, OpUpdateOne, withVideosID(id))
	return &VideosUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Videos.
func (c *VideosClient) Delete() *VideosDelete {
	mutation := newVideosMutation(c.config, OpDelete)
	return &VideosDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VideosClient) DeleteOne(v *Videos) *VideosDeleteOne {
	return c.DeleteOneID(v.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VideosClient) DeleteOneID(id uint) *VideosDeleteOne {
	builder := c.Delete().Where(videos.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VideosDeleteOne{builder}
}

// Query returns a query builder for Videos.
func (c *VideosClient) Query() *VideosQuery {
	return &VideosQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVideos},
		inters: c.Interceptors(),
	}
}

// Get returns a Videos entity by its id.
func (c *VideosClient) Get(ctx context.Context, id uint) (*Videos, error) {
	return c.Query().Where(videos.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VideosClient) GetX(ctx context.Context, id uint) *Videos {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTblComments queries the tbl_comments edge of a Videos.
func (c *VideosClient) QueryTblComments(v *Videos) *CommentsQuery {
	query := (&CommentsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(videos.Table, videos.FieldID, id),
			sqlgraph.To(comments.Table, comments.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, videos.TblCommentsTable, videos.TblCommentsColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTblReactions queries the tbl_reactions edge of a Videos.
func (c *VideosClient) QueryTblReactions(v *Videos) *ReactionsQuery {
	query := (&ReactionsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(videos.Table, videos.FieldID, id),
			sqlgraph.To(reactions.Table, reactions.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, videos.TblReactionsTable, videos.TblReactionsColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTblViewers queries the tbl_viewers edge of a Videos.
func (c *VideosClient) QueryTblViewers(v *Videos) *ViewersQuery {
	query := (&ViewersClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(videos.Table, videos.FieldID, id),
			sqlgraph.To(viewers.Table, viewers.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, videos.TblViewersTable, videos.TblViewersColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTblObjects queries the tbl_objects edge of a Videos.
func (c *VideosClient) QueryTblObjects(v *Videos) *ObjectsQuery {
	query := (&ObjectsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(videos.Table, videos.FieldID, id),
			sqlgraph.To(objects.Table, objects.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, videos.TblObjectsTable, videos.TblObjectsColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VideosClient) Hooks() []Hook {
	return c.hooks.Videos
}

// Interceptors returns the client interceptors.
func (c *VideosClient) Interceptors() []Interceptor {
	return c.inters.Videos
}

func (c *VideosClient) mutate(ctx context.Context, m *VideosMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VideosCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VideosUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VideosUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VideosDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Videos mutation op: %q", m.Op())
	}
}

// ViewersClient is a client for the Viewers schema.
type ViewersClient struct {
	config
}

// NewViewersClient returns a client for the Viewers from the given config.
func NewViewersClient(c config) *ViewersClient {
	return &ViewersClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `viewers.Hooks(f(g(h())))`.
func (c *ViewersClient) Use(hooks ...Hook) {
	c.hooks.Viewers = append(c.hooks.Viewers, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `viewers.Intercept(f(g(h())))`.
func (c *ViewersClient) Intercept(interceptors ...Interceptor) {
	c.inters.Viewers = append(c.inters.Viewers, interceptors...)
}

// Create returns a builder for creating a Viewers entity.
func (c *ViewersClient) Create() *ViewersCreate {
	mutation := newViewersMutation(c.config, OpCreate)
	return &ViewersCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Viewers entities.
func (c *ViewersClient) CreateBulk(builders ...*ViewersCreate) *ViewersCreateBulk {
	return &ViewersCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ViewersClient) MapCreateBulk(slice any, setFunc func(*ViewersCreate, int)) *ViewersCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ViewersCreateBulk{err: fmt.Errorf("calling to ViewersClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ViewersCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ViewersCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Viewers.
func (c *ViewersClient) Update() *ViewersUpdate {
	mutation := newViewersMutation(c.config, OpUpdate)
	return &ViewersUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ViewersClient) UpdateOne(v *Viewers) *ViewersUpdateOne {
	mutation := newViewersMutation(c.config, OpUpdateOne, withViewers(v))
	return &ViewersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ViewersClient) UpdateOneID(id uint) *ViewersUpdateOne {
	mutation := newViewersMutation(c.config, OpUpdateOne, withViewersID(id))
	return &ViewersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Viewers.
func (c *ViewersClient) Delete() *ViewersDelete {
	mutation := newViewersMutation(c.config, OpDelete)
	return &ViewersDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ViewersClient) DeleteOne(v *Viewers) *ViewersDeleteOne {
	return c.DeleteOneID(v.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ViewersClient) DeleteOneID(id uint) *ViewersDeleteOne {
	builder := c.Delete().Where(viewers.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ViewersDeleteOne{builder}
}

// Query returns a query builder for Viewers.
func (c *ViewersClient) Query() *ViewersQuery {
	return &ViewersQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeViewers},
		inters: c.Interceptors(),
	}
}

// Get returns a Viewers entity by its id.
func (c *ViewersClient) Get(ctx context.Context, id uint) (*Viewers, error) {
	return c.Query().Where(viewers.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ViewersClient) GetX(ctx context.Context, id uint) *Viewers {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTblVideos queries the tbl_videos edge of a Viewers.
func (c *ViewersClient) QueryTblVideos(v *Viewers) *VideosQuery {
	query := (&VideosClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(viewers.Table, viewers.FieldID, id),
			sqlgraph.To(videos.Table, videos.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, viewers.TblVideosTable, viewers.TblVideosColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ViewersClient) Hooks() []Hook {
	return c.hooks.Viewers
}

// Interceptors returns the client interceptors.
func (c *ViewersClient) Interceptors() []Interceptor {
	return c.inters.Viewers
}

func (c *ViewersClient) mutate(ctx context.Context, m *ViewersMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ViewersCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ViewersUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ViewersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ViewersDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Viewers mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Comments, Objects, Reactions, Videos, Viewers []ent.Hook
	}
	inters struct {
		Comments, Objects, Reactions, Videos, Viewers []ent.Interceptor
	}
)
