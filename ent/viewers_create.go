// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/glu/video-real-time-ranking/ent/videos"
	"github.com/glu/video-real-time-ranking/ent/viewers"
)

// ViewersCreate is the builder for creating a Viewers entity.
type ViewersCreate struct {
	config
	mutation *ViewersMutation
	hooks    []Hook
}

// SetVideoID sets the "video_id" field.
func (vc *ViewersCreate) SetVideoID(u uint) *ViewersCreate {
	vc.mutation.SetVideoID(u)
	return vc
}

// SetNumber sets the "number" field.
func (vc *ViewersCreate) SetNumber(i int) *ViewersCreate {
	vc.mutation.SetNumber(i)
	return vc
}

// SetTimePoint sets the "time_point" field.
func (vc *ViewersCreate) SetTimePoint(f float64) *ViewersCreate {
	vc.mutation.SetTimePoint(f)
	return vc
}

// SetCreatedAt sets the "created_at" field.
func (vc *ViewersCreate) SetCreatedAt(t time.Time) *ViewersCreate {
	vc.mutation.SetCreatedAt(t)
	return vc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vc *ViewersCreate) SetNillableCreatedAt(t *time.Time) *ViewersCreate {
	if t != nil {
		vc.SetCreatedAt(*t)
	}
	return vc
}

// SetUpdatedAt sets the "updated_at" field.
func (vc *ViewersCreate) SetUpdatedAt(t time.Time) *ViewersCreate {
	vc.mutation.SetUpdatedAt(t)
	return vc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vc *ViewersCreate) SetNillableUpdatedAt(t *time.Time) *ViewersCreate {
	if t != nil {
		vc.SetUpdatedAt(*t)
	}
	return vc
}

// SetDeletedAt sets the "deleted_at" field.
func (vc *ViewersCreate) SetDeletedAt(t time.Time) *ViewersCreate {
	vc.mutation.SetDeletedAt(t)
	return vc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vc *ViewersCreate) SetNillableDeletedAt(t *time.Time) *ViewersCreate {
	if t != nil {
		vc.SetDeletedAt(*t)
	}
	return vc
}

// SetID sets the "id" field.
func (vc *ViewersCreate) SetID(u uint) *ViewersCreate {
	vc.mutation.SetID(u)
	return vc
}

// SetTblVideosID sets the "tbl_videos" edge to the Videos entity by ID.
func (vc *ViewersCreate) SetTblVideosID(id uint) *ViewersCreate {
	vc.mutation.SetTblVideosID(id)
	return vc
}

// SetTblVideos sets the "tbl_videos" edge to the Videos entity.
func (vc *ViewersCreate) SetTblVideos(v *Videos) *ViewersCreate {
	return vc.SetTblVideosID(v.ID)
}

// Mutation returns the ViewersMutation object of the builder.
func (vc *ViewersCreate) Mutation() *ViewersMutation {
	return vc.mutation
}

// Save creates the Viewers in the database.
func (vc *ViewersCreate) Save(ctx context.Context) (*Viewers, error) {
	vc.defaults()
	return withHooks(ctx, vc.sqlSave, vc.mutation, vc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vc *ViewersCreate) SaveX(ctx context.Context) *Viewers {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vc *ViewersCreate) Exec(ctx context.Context) error {
	_, err := vc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vc *ViewersCreate) ExecX(ctx context.Context) {
	if err := vc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vc *ViewersCreate) defaults() {
	if _, ok := vc.mutation.CreatedAt(); !ok {
		v := viewers.DefaultCreatedAt()
		vc.mutation.SetCreatedAt(v)
	}
	if _, ok := vc.mutation.UpdatedAt(); !ok {
		v := viewers.DefaultUpdatedAt()
		vc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vc *ViewersCreate) check() error {
	if _, ok := vc.mutation.VideoID(); !ok {
		return &ValidationError{Name: "video_id", err: errors.New(`ent: missing required field "Viewers.video_id"`)}
	}
	if v, ok := vc.mutation.VideoID(); ok {
		if err := viewers.VideoIDValidator(v); err != nil {
			return &ValidationError{Name: "video_id", err: fmt.Errorf(`ent: validator failed for field "Viewers.video_id": %w`, err)}
		}
	}
	if _, ok := vc.mutation.Number(); !ok {
		return &ValidationError{Name: "number", err: errors.New(`ent: missing required field "Viewers.number"`)}
	}
	if v, ok := vc.mutation.Number(); ok {
		if err := viewers.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`ent: validator failed for field "Viewers.number": %w`, err)}
		}
	}
	if _, ok := vc.mutation.TimePoint(); !ok {
		return &ValidationError{Name: "time_point", err: errors.New(`ent: missing required field "Viewers.time_point"`)}
	}
	if v, ok := vc.mutation.TimePoint(); ok {
		if err := viewers.TimePointValidator(v); err != nil {
			return &ValidationError{Name: "time_point", err: fmt.Errorf(`ent: validator failed for field "Viewers.time_point": %w`, err)}
		}
	}
	if _, ok := vc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Viewers.created_at"`)}
	}
	if _, ok := vc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Viewers.updated_at"`)}
	}
	if v, ok := vc.mutation.ID(); ok {
		if err := viewers.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Viewers.id": %w`, err)}
		}
	}
	if _, ok := vc.mutation.TblVideosID(); !ok {
		return &ValidationError{Name: "tbl_videos", err: errors.New(`ent: missing required edge "Viewers.tbl_videos"`)}
	}
	return nil
}

func (vc *ViewersCreate) sqlSave(ctx context.Context) (*Viewers, error) {
	if err := vc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint(id)
	}
	vc.mutation.id = &_node.ID
	vc.mutation.done = true
	return _node, nil
}

func (vc *ViewersCreate) createSpec() (*Viewers, *sqlgraph.CreateSpec) {
	var (
		_node = &Viewers{config: vc.config}
		_spec = sqlgraph.NewCreateSpec(viewers.Table, sqlgraph.NewFieldSpec(viewers.FieldID, field.TypeUint))
	)
	if id, ok := vc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := vc.mutation.Number(); ok {
		_spec.SetField(viewers.FieldNumber, field.TypeInt, value)
		_node.Number = value
	}
	if value, ok := vc.mutation.TimePoint(); ok {
		_spec.SetField(viewers.FieldTimePoint, field.TypeFloat64, value)
		_node.TimePoint = value
	}
	if value, ok := vc.mutation.CreatedAt(); ok {
		_spec.SetField(viewers.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vc.mutation.UpdatedAt(); ok {
		_spec.SetField(viewers.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := vc.mutation.DeletedAt(); ok {
		_spec.SetField(viewers.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if nodes := vc.mutation.TblVideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   viewers.TblVideosTable,
			Columns: []string{viewers.TblVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videos.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.VideoID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ViewersCreateBulk is the builder for creating many Viewers entities in bulk.
type ViewersCreateBulk struct {
	config
	err      error
	builders []*ViewersCreate
}

// Save creates the Viewers entities in the database.
func (vcb *ViewersCreateBulk) Save(ctx context.Context) ([]*Viewers, error) {
	if vcb.err != nil {
		return nil, vcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Viewers, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ViewersMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *ViewersCreateBulk) SaveX(ctx context.Context) []*Viewers {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcb *ViewersCreateBulk) Exec(ctx context.Context) error {
	_, err := vcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcb *ViewersCreateBulk) ExecX(ctx context.Context) {
	if err := vcb.Exec(ctx); err != nil {
		panic(err)
	}
}
